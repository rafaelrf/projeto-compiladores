/*
* generated by Xtext
*/
package org.xtext.example.myModel.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.myModel.services.CSharpGrammarAccess;

public class CSharpParser extends AbstractContentAssistParser {
	
	@Inject
	private CSharpGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.myModel.ui.contentassist.antlr.internal.InternalCSharpParser createParser() {
		org.xtext.example.myModel.ui.contentassist.antlr.internal.InternalCSharpParser result = new org.xtext.example.myModel.ui.contentassist.antlr.internal.InternalCSharpParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInputSectionPartAccess().getAlternatives(), "rule__InputSectionPart__Alternatives");
					put(grammarAccess.getInputElementAccess().getAlternatives(), "rule__InputElement__Alternatives");
					put(grammarAccess.getTokenAccess().getAlternatives(), "rule__Token__Alternatives");
					put(grammarAccess.getKeywordsAccess().getAlternatives(), "rule__Keywords__Alternatives");
					put(grammarAccess.getIntegerLiteralAccess().getAlternatives(), "rule__IntegerLiteral__Alternatives");
					put(grammarAccess.getCommentAccess().getAlternatives(), "rule__Comment__Alternatives");
					put(grammarAccess.getIntegralTypeAccess().getAlternatives(), "rule__IntegralType__Alternatives");
					put(grammarAccess.getBuiltInTypeAccess().getAlternatives(), "rule__BuiltInType__Alternatives");
					put(grammarAccess.getBuiltInClassTypeAccess().getAlternatives(), "rule__BuiltInClassType__Alternatives");
					put(grammarAccess.getEnumModifierAccess().getAlternatives(), "rule__EnumModifier__Alternatives");
					put(grammarAccess.getInputSectionPartAccess().getGroup_0(), "rule__InputSectionPart__Group_0__0");
					put(grammarAccess.getIntegerLiteralAccess().getGroup_0(), "rule__IntegerLiteral__Group_0__0");
					put(grammarAccess.getIntegerLiteralAccess().getGroup_1(), "rule__IntegerLiteral__Group_1__0");
					put(grammarAccess.getIntegerLiteralAccess().getGroup_2(), "rule__IntegerLiteral__Group_2__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getArrayTypeAccess().getGroup(), "rule__ArrayType__Group__0");
					put(grammarAccess.getEnumTypeAccess().getGroup(), "rule__EnumType__Group__0");
					put(grammarAccess.getEnumTypeAccess().getGroup_4(), "rule__EnumType__Group_4__0");
					put(grammarAccess.getRANK_SPECIFIERAccess().getGroup(), "rule__RANK_SPECIFIER__Group__0");
					put(grammarAccess.getEnumBodyAccess().getGroup(), "rule__EnumBody__Group__0");
					put(grammarAccess.getModelAccess().getInputAssignment(), "rule__Model__InputAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.myModel.ui.contentassist.antlr.internal.InternalCSharpParser typedParser = (org.xtext.example.myModel.ui.contentassist.antlr.internal.InternalCSharpParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public CSharpGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CSharpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
