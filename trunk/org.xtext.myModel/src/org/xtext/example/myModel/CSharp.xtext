grammar org.xtext.example.myModel.CSharp hidden(WS, ML_COMMENT, SL_COMMENT)

generate cSharp 'http://www.xtext.org/example/myModel/CSharp'
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Model:
	inputs+=CompilationUnit;

PredefinedType:
	'bool'
	| 'byte'
	| 'char'
	| 'decimal'
	| 'double'
	| 'float'
	| 'int'
	| 'long'
	| 'object'
	| 'short'
	| 'sbyte'
	| 'string'
	| 'uint'
	| 'ulong'
	'ushort';

Literal:
	BooleanLiteral
	| IntegerLiteral
	| RealLiteral
	| CharacterLiteral
	| StringLiteral
	| NullLiteral;

NullLiteral:
	'null';

BooleanLiteral:
	'true'
	| 'false';

IntegerLiteral:
	('0x' | '0X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX
	| INT (INTEGER_TYPE_SUFFIX)?;

RealLiteral:
	INT '.' INT ExponentPart? REAL_TYPE_SUFFIX?
	| INT ExponentPart REAL_TYPE_SUFFIX?
	| INT REAL_TYPE_SUFFIX;

ExponentPart:
	'e' OPERATOR_OR_SIGN? INT
	| 'E' OPERATOR_OR_SIGN? INT;

CharacterLiteral:
	"'" Character "'";

Character:
	SINGLE_CHARACTER
	| '\\' EscapeSequence;

EscapeSequence:
	ESCAPE_SEQUENCE
	| HexadecimalEscapeSequence
	| UnicodeCharacterEscapeSequence;

UnicodeCharacterEscapeSequence:
	'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
	| 'U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

HexadecimalEscapeSequence:
	'x' HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?;

StringLiteral:
	'"' RegularStringCharacter* '"'
	| '@' VerbatimStringCharacter* '"';

VerbatimStringCharacter:
	SINGLE_CHARACTER //Any character except "
	| QUOTE_ESCAPE_SEQUENCE;

RegularStringCharacter:
	SINGLE_CHARACTER //Any character except " (U+0022), \ (U+005C), and new-line-character
	| '\\' ESCAPE_SEQUENCE;

Comment:
	SL_COMMENT
	| ML_COMMENT;

Identifier returns Identifier:
	{Identifier}
	AvailableIdentifier
	| '@' IDENTIFIER_START_CHARACTER;

AvailableIdentifier:
	IdentifierOrKeyword;

IdentifierOrKeyword:
	IDENTIFIER_START_CHARACTER IdentifierPartCharacter*;

IdentifierPartCharacter:
	LETTER
	| INT /*
    |connecting-character
    |combining-character
    |formatting-character */;
//FIM LEXICA 


//SINTAXE
CompilationUnit:
	usingDirectives+=UsingDirective* globalAtt=GlobalAttributes nameSpaces+=NamespaceMemberDeclaration*;

NamespaceMemberDeclaration returns NamespaceMemberDeclaration:
	{NamespaceMemberDeclaration}
	nameDeclaretion=NamespaceDeclaration
	| typeDeclaration=TypeDeclaration;

NamespaceDeclaration returns NamespaceDeclaration:
	'namespace' qId=QualifiedIdentifier nameBody=NamespaceBody SEMICOLON?;

NamespaceBody returns NamespaceBody:
	{NamespaceBody}
	'{' usingDirectives+=UsingDirective* nameSpaces+=NamespaceMemberDeclaration* '}';

TypeDeclaration returns TypeDeclaration:
	{TypeDeclaration}
	(classDeclaration=ClassDeclaration
	| mod+=Modifier* (structDeclaration=StructDeclaration
	| interfaceDeclaration=InterfaceDeclaration
	| enumDeclaration=EnumDeclaration
	| delegateDeclaration=DelegateDeclaration));

DelegateDeclaration:
	'delegate' TypeOrVoid name=Identifier '(' formalParameters=FormalParameterList? ')' SEMICOLON;

EnumDeclaration:
	'enum' name=Identifier (':' intType=IntegralType)? enumBody=EnumBody SEMICOLON?;

InterfaceDeclaration:
	'struct' name=Identifier (':' qIdentifiers=QualifiedIdentifierList)? interBody=InterfaceBody? SEMICOLON?;

Modifier:
	'new'
	| 'public'
	| 'protected'
	| 'internal'
	| 'private';

InterfaceBody returns InterfaceBody:
	{InterfaceBody}
	'{' interfaceMemberDeclarations+=InterfaceMemberDeclaration* '}';

InterfaceMemberDeclaration returns InterfaceMemberDeclaration:
	{InterfaceMemberDeclaration}
	'new'?
	(intermethodDeclaration=InterfaceMethodDeclaration
	| interEventDeclaration=InterfaceEventDeclaration
	| type1=Type (interfaceIndexerDecla=InterfaceIndexerDeclaration | interProperty=InterfacePropertyDeclaration));

InterfaceIndexerDeclaration returns InterfaceIndexerDeclaration:
	{InterfaceIndexerDeclaration}
	'this' '[' parameterList=FormalParameterList ']' '{' interAccessors=InterfaceAccessors '}';

InterfaceEventDeclaration returns InterfaceEventDeclaration:
	{InterfaceEventDeclaration}
	'event' type=Type name=Identifier SEMICOLON;

InterfacePropertyDeclaration returns InterfacePropertyDeclaration:
	{InterfacePropertyDeclaration}
	name=Identifier '{' interAccessor=InterfaceAccessors '}';

InterfaceAccessors:
	att=Attributes ('get' SEMICOLON (newAtt=Attributes 'set' SEMICOLON)? | 'set' SEMICOLON (otherAtt=Attributes 'get'
	SEMICOLON)?);

InterfaceMethodDeclaration:
	type=TypeOrVoid name=Identifier '(' parameterList=FormalParameterList? ')' SEMICOLON;

StructDeclaration returns StructDeclaration:
	'struct' name=Identifier (':' qualId=QualifiedIdentifierList)? structbody=StructBody SEMICOLON?;

StructBody:
	'{' structMember+=StructMemberDeclaration* '}';

StructMemberDeclarations:
	StructMemberDeclaration (structMember2+=StructMemberDeclarations2)*;

StructMemberDeclarations2:
	StructMemberDeclaration structMember2+=StructMemberDeclarations2;

StructMemberDeclaration:
	ConstantDeclaration
	| FieldDeclaration
	| MethodDeclaration
	| PropertyDeclaration
	| EventDeclaration
	| IndexerDeclaration
	| OperatorDeclaration
	| ConstructorDeclaration
	| StaticConstructorDeclaration
	| TypeDeclaration;

ClassDeclaration returns ClassDeclaration:
	{ClassDeclaration}
	classModifier+=ClassModifier* 'class' className=Identifier classBase=ClassBase? classBody=ClassBody SEMICOLON?;

ClassBody returns ClassBody:
	{ClassBody}
	'{' classDeclaration+=ClassMemberDeclaration* '}';

ClassMemberDeclaration returns ClassMemberDeclaration:
	MethodDeclaration |
	classAtt=Attributes (constDeclaration=ConstantDeclaration
	| fieldDeclaration=FieldDeclaration
	| propertyDeclaration=PropertyDeclaration
	| eventDeclaration=EventDeclaration
	| indexDeclaration=IndexerDeclaration
	| opDeclaration=OperatorDeclaration
	| constructorDeclaration=ConstructorDeclaration
	| destructorDeclaration=DestructorDeclaration
	| staticDeclaration=StaticConstructorDeclaration
	| typeDeclaration=TypeDeclaration);

StaticConstructorDeclaration:
	staticCosntModifier=StaticConstructorModifiers name=Identifier '(' ')' emptyBlock=MaybeEmptyBlock;

StaticConstructorModifiers:
	'extern'? 'static'
	| 'static' 'extern';

DestructorDeclaration:
	'extern'? '~' name=Identifier '(' ')' emptyBlock=MaybeEmptyBlock;

ConstructorDeclaration:
	constModifier+=ConstructorModifier* constrDeclarator=ConstructorDeclarator emptyBlock=MaybeEmptyBlock;

ConstructorDeclarator:
	Identifier '(' formalList=FormalParameterList? ')' constInitializer=ConstructorInitializer?;

ConstructorInitializer:
	':' 'base' '(' ArgumentList ')'
	| ':' 'this' '(' ArgumentList ')';

ArgumentList returns ArgumentList:
	{ArgumentList}
	(arg+=Argument ',')*;

Argument:
	RefOrOut? Expression;

RefOrOut:
	'ref'
	| 'out';

ConstructorModifier:
	'public'
	| 'protected'
	| 'internal'
	| 'private'
	| 'extern';

OperatorDeclaration:
	opModifier+=OperatorModifier+ opDeclarator=OperatorDeclarator emptyBlock=MaybeEmptyBlock;

OperatorDeclarator:
	UnaryOperatorDeclarator
	| BinaryOperatorDeclarator
	| ConversionOperatorDeclarator;

ConversionOperatorDeclarator:
	ConversionKind 'operator' firstType=Type '(' type=Type conversionName=Identifier ')';

ConversionKind:
	'implicit'
	| 'explicit';

BinaryOperatorDeclarator:
	binType=Type 'operator' overBinOperator=OverloadableBinaryOperator '(' type=Type otherName=Identifier ','
	secondType=Type secondName=Identifier ')';

OverloadableBinaryOperator:
	OPERATOR_OR_SIGN
	| '*'
	| '/'
	| '%'
	| AMPERSAND
	| BAR
	| '^'
	| '<<'
	| '>>'
	| '=='
	| '!='
	| GREATER_THAN
	| LESS_THAN
	| '>='
	| '<=';

UnaryOperatorDeclarator:
	type=Type 'operator' OverloadableUnaryOperator '(' otherType=Type name=Identifier ')';

OverloadableUnaryOperator:
	OPERATOR_OR_SIGN
	| INCREMENT_DECREMENT
	| '!'
	| '~'
	| 'true'
	| 'false';

OperatorModifier:
	'public'
	| 'static'
	| 'extern';

IndexerDeclaration:
	idModifier+=IndexerModifier* indexerDeclarator=IndexerDeclarator '{' accDeclaration=AccessorDeclarations '}';

IndexerDeclarator:
	type=Type ('this' '[' formalList=FormalParameterList ']'
	| qualifiedId=QualifiedIdentifier '.' 'this' '[' formalList=FormalParameterList ']');

IndexerModifier:
	'new'
	| 'public'
	| 'protected'
	| 'internal'
	| 'private'
	| 'virtual'
	| 'sealed'
	| 'override'
	| 'abstract'
	| 'extern';

EventDeclaration:
	EventModifier* 'event' Type ((variableDeclarator+=VariableDeclarator ',')+ SEMICOLON | qIdent=QualifiedIdentifier '{'
	eventAccessorDeclarations=EventAccessorDeclarations '}');

EventAccessorDeclarations:
	att1=Attributes (addAccessor=AddAccessorDeclaration att=Attributes removAccessor=RemoveAccessorDeclaration
	| removAccessor=RemoveAccessorDeclaration att=Attributes addAccessor=AddAccessorDeclaration);

RemoveAccessorDeclaration:
	'remove' Block;

AddAccessorDeclaration:
	'add' Block;

EventModifier:
	'new'
	| 'public'
	| 'protected'
	| 'internal'
	| 'private'
	| 'static'
	| 'virtual'
	| 'sealed'
	| 'override'
	| 'abstract'
	| 'extern';

PropertyDeclaration:
	PropertyModifier* Type qualifiedId=QualifiedIdentifier '{' accDeclarate=AccessorDeclarations '}';

AccessorDeclarations:
	att=Attributes (getAcc=GetAccessorDeclaration att2=Attributes (setAcc=SetAccessorDeclaration)?
	| setAcc=SetAccessorDeclaration att2=Attributes (getAcc=GetAccessorDeclaration)?);

SetAccessorDeclaration:
	'set' MaybeEmptyBlock;

GetAccessorDeclaration:
	'get' MaybeEmptyBlock;

PropertyModifier:
	'new'
	| 'public'
	| 'protected'
	| 'internal'
	| 'private'
	| 'static'
	| 'virtual'
	| 'sealed'
	| 'override'
	| 'abstract'
	| 'extern';

MethodDeclaration:
	methodHeader=MethodHeader maybeEmpty=MaybeEmptyBlock;

MethodHeader:
	Attributes MethodModifier* typeOrVoid=TypeOrVoid qualifiedID=QualifiedIdentifier '('
	formalParameters=FormalParameterList? ')';

FormalParameterList:
	FixedParameters (',' parameterArray=ParameterArray
	| parameterArray=ParameterArray);

ParameterArray returns ParameterArray:
	{ParameterArray}
	att=Attributes 'params' array=ArrayType name=Identifier;

FixedParameters returns FixedParameters:
	(fixParameters+=FixedParameter ',')+;

FixedParameter returns FixedParameter:
	ParameterModifier? type=Type name=Identifier;

ParameterModifier:
	'ref'
	| 'out';

TypeOrVoid returns TypeOrVoid:
	{TypeOrVoid}
	type=Type
	| {Void} 'void';

MethodModifier:
	'new'
	| 'public'
	| 'protected'
	| 'internal'
	| 'private'
	| 'static'
	| 'virtual'
	| 'sealed'
	| 'override'
	| 'abstract'
	| 'extern';

FieldDeclaration returns FieldDeclaration:
	FieldModifier* Type (variables+=VariableDeclarator ',')+ SEMICOLON;

VariableDeclarator:
	name=Identifier ('=' variable=VariableInitializer)?;

VariableInitializer returns VariableInitializer:
	Expression | ArrayInitializer;

ArrayInitializer returns ArrayInitializer:
	{ArrayInitializer}
	'{' '}'
	| '{' (variableInitalizers+=VariableInitializer ',')+ ','? '}';

FieldModifier:
	'new'
	| 'public'
	| 'protected'
	| 'internal'
	| 'private'
	| 'static'
	| 'readonly'
	| 'volatile';

ConstantDeclaration:
	ConstantModifier* 'const' Type (constDeclarators+=ConstantDeclarator ',')+ SEMICOLON;

ConstantModifier:
	'new'
	| 'public'
	| 'protected'
	| 'internal'
	| 'private';

ConstantDeclarator returns ConstantDeclarator:
	{ConstantDeclarator}
	name=Identifier '=' exp=Expression;

ClassBase:
	':' (QualifiedIdentifierList | BuiltInClassType (',' QualifiedIdentifierList)?);

QualifiedIdentifierList returns QualifiedIdentifierList:
	(ids+=QualifiedIdentifier ',')+;

ClassModifier:
	Modifier
	| 'abstract'
	| 'sealed';

GlobalAttributes returns GlobalAttributes:
	{GlobalAttributes}
	globalAttSections+=GlobalAttributeSection*;

GlobalAttributeSection:
	'[' 'assembly' ':' AttributeList ','? ']';

Attributes returns Attributes:
	{Attributes} attributes+=AttributeSection*;

AttributeSection:
	'[' (AttributeTarget ':')? AttributeList ','? ']';

AttributeTarget:
	'field'
	| 'event'
	| 'method'
	| 'module'
	| 'param'
	| 'property'
	| 'return'
	| 'type';

AttributeList returns AttributeList:
	{AttributeList}
	(attributes+=Attribute ',')+;

Attribute:
	attName=AttributeName attArguments=AttributeArguments?;

AttributeArguments returns AttributeArguments:
	{AttributeArguments}
	'(' expresions+=ExpressionList? ')';

ExpressionList:
	(expresions+=Expression ',')+;

Expression returns Expression:
	{Expression}
	unary=UnaryExpression (exp2=Expression2 | BAR exp=Expression otherExp2=Expression2);

Expression2 returns Expression2:
	{Expression2}
	('?' internalExp+=Expression ':' exp+=Expression internalExp2+=Expression2
	| '||' exp+=Expression internalExp2+=Expression2
	| '&&' exp+=Expression internalExp2+=Expression2
	| BAR exp+=Expression internalExp2+=Expression2
	| '^' exp+=Expression internalExp2+=Expression2
	| AMPERSAND exp+=Expression internalExp2+=Expression2
	| EXPRESSION_EQUALITY_OPERATOR exp+=Expression internalExp2+=Expression2
	| ExpressionRelationalOperator exp+=Expression internalExp2+=Expression2
	| 'is' buildInType+=BuiltInType internalExp2+=Expression2
	| ExpressionShiftOperator exp+=Expression internalExp2+=Expression2
	| OPERATOR_OR_SIGN exp+=Expression internalExp2+=Expression2
	| '*' exp+=Expression internalExp2+=Expression2
	| '/' exp+=Expression internalExp2+=Expression2
	| '%' exp+=Expression internalExp2+=Expression2)*;

UnaryExpression returns UnaryExpression:
	{UnaryExpression}
	(expUnaryOperator=ExpressionUnaryOperator | '(' type=Type ')') unaryExp=UnaryExpression
	| primaryExp=PrimaryExpression;

ExpressionUnaryOperator:
	OPERATOR_OR_PUNCTUATOR
	| INCREMENT_DECREMENT
	| '!'
	| '~'
	| '*';

ExpressionShiftOperator:
	'<<'
	| '>>';

ExpressionRelationalOperator:
	LESS_THAN
	| GREATER_THAN
	| '<='
	| '>='
	| 'is'
	| 'as';

AttributeName returns AttributeName:
	{AttributeName}
	qualifiedId=QualifiedIdentifier;

UsingDirective returns UsingDirective:
	{UsingDirective} 'using' (name=Identifier '=')? usings=QualifiedIdentifier SEMICOLON;

Type returns Type:
	{Type}
	(nonArray=NonArrayType) RANK_SPECIFIER*;

IntegralType returns IntegralType:
	{IntegralType}
	'sbyte'
	| 'byte'
	| 'short'
	| 'ushort'
	| 'int'
	| 'uint'
	| 'long'
	| 'ulong'
	| 'char';

ArrayType:
	NonArrayType RANK_SPECIFIER+;

EnumType:
	Attributes EnumModifier* 'enum' ID (':' type=IntegralType)? enumBody=EnumBody SEMICOLON?;

NonArrayType returns NonArrayType:
	{NonArrayType}
	(qualified=QualifiedIdentifier | builtType=BuiltInType);

QualifiedIdentifier returns QualifiedIdentifier:
	{QualifiedIdentifier}
	(ids+=Identifier '.')+;

BuiltInType returns BuiltInType:
	{BuiltInType}
	BuiltInClassType
	| 'bool'
	| 'decimal'
	| 'float'
	| 'double';

BuiltInClassType:
	'object' | 'string';

EnumBody returns EnumBody:
	{EnumBody}
	'{' '}'
	| '{' (enumDeclarations+=EnumMemberDeclaration ',')+ ','? '}';

EnumMemberDeclaration returns EnumMemberDeclaration:
	att=Attributes name=Identifier ('=' exp=Expression)?;

EnumModifier:
	'new' | 'public' | 'protected' | 'internal' | 'private';

Statement returns Statement:
	{Statement}
	labelStat=LabeledStatement
	| declareStat=DeclarationStatement
	| embeddedStat=EmbeddedStatement;

DeclarationStatement returns DeclarationStatment:
	{DeclarationStatment}
	(localVariableDeclaration=LocalVariableDeclaration 
	| localCOnstant=LocalConstantDeclaration ) SEMICOLON;

LocalConstantDeclaration returns LocalconstantDeclaration:
	{LocalconstantDeclaration}
	'const' (tipo=Type) (constDeclarator+=ConstantDeclarator ",")+;

LabeledStatement returns LabeledStatement:
	{LabeledStatement}
	(id=Identifier) ":" stat=Statement;

EmbeddedStatement returns EmbeddedStatement:
	{EmbeddedStatement}
	 (maybeEmpty=MaybeEmptyBlock
	| statExp=StatementExpression SEMICOLON
	| selectionStat=SelectionStatement
	| iterationStat=IterationStatement
	| jumpStat=JumpStatement
	| tryStat=TryStatement
	| ('checked' | 'unchecked') block=Block
	| lockStat=LockStatement
	| usingStat=UsingStatement);

UsingStatement returns UsingStatement:
	{UsingStatement} ('using' '(' resourcAquisition=ResourceAquisition ')' embeddedStat=EmbeddedStatement);

ResourceAquisition returns ResourceAquisition:
	LocalVariableDeclaration | Expression;

LocalVariableDeclaration returns LocalVariableDeclaration:
	{LocalVariableDeclaration} (tipo=Type) (variable+=VariableDeclarator ',')+;

LockStatement returns LockStatement:
	{LockStatement} 'lock' '(' exp=Expression ')' embeddedStat=EmbeddedStatement;

TryStatement returns TryStatement:
	{TryStatement} 'try' (block=Block) ((catchClauses=CatchClauses (finally=FinallyClause)?) | (finallyClause=FinallyClause));

FinallyClause returns FinallyClause:
	{FinallyClause} 'finally' (block=Block);

CatchClauses returns CatchClauses:
	{CatchClauses} ((speciCatchClause+=SpecificCatchClause)+ (genCatchClause=GeneralCatchClause)? | (specCatchClause=SpecificCatchClause)* => genCatchClause=GeneralCatchClause);

GeneralCatchClause returns GeneralCatchclause:
	{GeneralCatchclause} 'catch' block=Block;

SpecificCatchClause returns SpecificCatchClause:
	{SpecificCatchClause} 'catch' '(' (BuiltInClassType | qualiId=QualifiedIdentifier) id=Identifier? ')' block=Block;

JumpStatement returns JumpStatement:
	{JumpStatement} 
	(breakStat=BreakStatement
	| continueStat=ContinueStatement
	| gotoStat=GotoStatement
	| returnStat=ReturnStatement
	| throwStat=ThrowStatement);

ThrowStatement returns ThrowStatement:
	{ThrowStatement} 'throw' expression=Expression? SEMICOLON ;

ReturnStatement returns ReturnStatement:
	{ReturnStatement} ('return' expression=Expression? SEMICOLON);

GotoStatement returns GotoStatement:
	{GotoStatement} ('goto' id=Identifier SEMICOLON 'goto' 'case' expression=Expression SEMICOLON 'goto' 'default' SEMICOLON);

ContinueStatement returns ContinueStatement:
	{ContinueStatement} 'continue' SEMICOLON;

BreakStatement returns BreakStatement:
	{BreakStatement} 'break' SEMICOLON;

IterationStatement returns IterationStatement:
	{IterationStatement}(
	whileStatement=WhileStatement 
	| doStatement=DoStatement 
	| forStatement=ForStatement 
	| foreachStatement=ForeachStatement);

ForeachStatement returns ForeachStatement:
	{ForeachStatement}('foreach' '(' tipo=Type id=Identifier 'in' expression=Expression ')' embeddedStatement=EmbeddedStatement);

ForStatement returns ForStatement:
	{ForStatement}('for' '(' forInitializer+=ForInitializer? SEMICOLON expression+=Expression? SEMICOLON statementExpressionList+=StatementExpressionList? ')' embeddedStatement=EmbeddedStatement);

ForInitializer returns ForInitializer:
	{ForInitializer}(localVariableDeclaration=LocalVariableDeclaration 
	| statementExpressionList=StatementExpressionList);

StatementExpressionList returns StatementExpressionList:
	{StatementExpressionList}((list+=StatementExpression) ',')+;

StatementExpression returns StatementExpression:
	{StatementExpression}(primaryExpression=PrimaryExpression (('(' argumentList=ArgumentList ')') | (incrimentDecrement=INCREMENT_DECREMENT))) 
	| 'new' tipo=Type '(' argumentList=ArgumentList ')' 
	| unaryExpression=UnaryExpression assignementOperator=ASSIGNEMENT_OPERATOR expression=Expression 
	| incrimentDecrement=INCREMENT_DECREMENT primaryExpression=PrimaryExpression;

PrimaryExpression returns PrimaryExpression:
		{PrimaryExpression}((('new' ((nonArrayType=NonArrayType '[' expressionList=ExpressionList ']' rankSpecifier+=RANK_SPECIFIER* arrayInitializer+=ArrayInitializer?)
		    |(arrayType=ArrayType arrayInitializer2=ArrayInitializer) 
			| (tipo=Type	'(' argumentList=ArgumentList ')'))) 
		| (id=Identifier)
		| literal=Literal 
		|'(' expression=Expression ')'
		| ('base' (('.' id=Identifier) 
		| ('[' expressionList=ExpressionList ']'))) 
		| predefinedType=PredefinedType '.' id=Identifier 
		| ('this') | ('typeof' '(' typeOrVoid=TypeOrVoid ')') 
		| ('checked' '(' expression=Expression ')')
		| ('unchecked' '(' expression=Expression ')')) primaryExoression2=PrimaryExpression2);

PrimaryExpression2 returns PrimaryExpression2:
	{PrimaryExpression2}((('.' id+=Identifier) 
	  |('(' argumentList+=ArgumentList ')') 
	  |('[' expressionList+=ExpressionList ']') 
	  | (incrementeDecrement+=INCREMENT_DECREMENT)
	) primaryExpression2+=PrimaryExpression2)*;

DoStatement returns DoStatement:
	{DoStatement}('do' embeddedStatement=EmbeddedStatement 'while' '(' expression=Expression ')' SEMICOLON);

WhileStatement returns WhileStatement:
	{WhileStatement}'while' '(' expression=Expression ')' embeddedStatement=EmbeddedStatement;

SelectionStatement returns SelectionStatement:
	{SelectionStatement}(ifStatement=IfStatement | switchStatement=SwitchStatement);

SwitchStatement returns SwitchStatement:
	{SwitchStatement}('switch' '(' expression=Expression ')' '{' switchSection+=SwitchSection* '}');

SwitchSection returns SwitchSection:
	{SwitchSection}(switchlabel+=SwitchLabel+ statement+=Statement+);

SwitchLabel returns SwitchLabel:
	{SwitchLabel}('case' expression=Expression ':' | 'default' ':');

IfStatement returns IfStatement:
	{IfStatement}('if' '(' expression=Expression ')' embeddedStatement=EmbeddedStatement elsePart=ElsePart?);

ElsePart returns ElsePart:
	{ElsePart}('else' embeddedStatement=EmbeddedStatement);

Block returns Block:
	{Block}('{' statement+=Statement* '}');

MaybeEmptyBlock returns MaybeEmptyBlock:
	{MaybeEmptyBlock}('{' statement+=Statement* '}' | SEMICOLON);
	
terminal SEMICOLON:
	';';

terminal ASSIGNEMENT_OPERATOR:
	'=' |
	'+=' |
	'-=' |
	'*=' |
	'/=' |
	'%=' |
	'&=' |
	'^=' |
	'<<=' |
	'>>=';

terminal EXPRESSION_EQUALITY_OPERATOR:
	'=='
	| '!=';

terminal LESS_THAN:
	'<';

terminal GREATER_THAN:
	'>';

terminal BAR:
	'|';

terminal AMPERSAND:
	'&';

terminal INCREMENT_DECREMENT:
	'++' | '--';

terminal OPERATOR_OR_SIGN:
	'+' | '-';

terminal REAL_TYPE_SUFFIX:
	'F' | 'f' | 'D' | 'd' | 'M' | 'm';

terminal LETTER:
	('A'..'Z') | ('a'..'z');

terminal IDENTIFIER_START_CHARACTER:
	LETTER | '_';

terminal QUOTE_ESCAPE_SEQUENCE:
	'""';

terminal ESCAPE_SEQUENCE:
	("'" | '"' | "\\" | '0' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v');

terminal NEW_LINE:
	('\r' | '\n')*;

terminal RANK_SPECIFIER:
	'[' ','* ']';

terminal INTEGER_TYPE_SUFFIX:
	'U' | 'u' | 'L' | 'l' | 'UL' | 'Ul' | 'uL' | 'ul' | 'LU' | 'Lu' | 'lU' | 'lu';

terminal HEX_DIGIT:
	('0'..'9') | (('A'..'F') | ('a'..'f'));

terminal OPERATOR_OR_PUNCTUATOR:
	'{'
	| '}'
	| '['
	| ']'
	| '('
	| ')'
	| '.'
	| ','
	| ':'
	| SEMICOLON
	| '+'
	| '-'
	| '*'
	| '/'
	| '%'
	| '&'
	| '|'
	| '^'
	| '!'
	| '~'
	| '='
	| '<'
	| '>'
	| '?'
	| '++'
	| '--'
	| '&&'
	| '||'
	| '<<'
	| '>>'
	| '=='
	| '!='
	| '<='
	| '>='
	| '+='
	| '-='
	| '*='
	| '/='
	| '%='
	| '&='
	| '|='
	| '^='
	| '<<='
	| '>>='
	| '->';

terminal SINGLE_CHARACTER:
	.?;

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal INT returns ecore::EInt:
	('0'..'9')+;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"'
	| "'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal QUOTES:
	'{'->'}';


 

	