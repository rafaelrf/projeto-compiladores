/*
* generated by Xtext
*/
grammar InternalCSharp;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.myModel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.myModel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.myModel.services.CSharpGrammarAccess;

}

@parser::members {

 	private CSharpGrammarAccess grammarAccess;
 	
    public InternalCSharpParser(TokenStream input, CSharpGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CSharpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getInputsInputParserRuleCall_0()); 
	    }
		lv_inputs_0_0=ruleInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"inputs",
        		true, 
        		"Input");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleInput
entryRuleInput returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); } 
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current.getText(); }  
	 EOF 
;

// Rule Input
ruleInput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInputAccess().getInputSectionPartParserRuleCall()); 
    }
    this_InputSectionPart_0=ruleInputSectionPart    {
		$current.merge(this_InputSectionPart_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleInputSectionPart
entryRuleInputSectionPart returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputSectionPartRule()); } 
	 iv_ruleInputSectionPart=ruleInputSectionPart 
	 { $current=$iv_ruleInputSectionPart.current.getText(); }  
	 EOF 
;

// Rule InputSectionPart
ruleInputSectionPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getInputSectionPartAccess().getInputElementParserRuleCall_0_0()); 
    }
    this_InputElement_0=ruleInputElement    {
		$current.merge(this_InputElement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*    this_NEW_LINE_1=RULE_NEW_LINE    {
		$current.merge(this_NEW_LINE_1);
    }

    { 
    newLeafNode(this_NEW_LINE_1, grammarAccess.getInputSectionPartAccess().getNEW_LINETerminalRuleCall_0_1()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getInputSectionPartAccess().getPPDirectiveParserRuleCall_1()); 
    }
    this_PPDirective_2=rulePPDirective    {
		$current.merge(this_PPDirective_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPDirective
entryRulePPDirective returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPDirectiveRule()); } 
	 iv_rulePPDirective=rulePPDirective 
	 { $current=$iv_rulePPDirective.current.getText(); }  
	 EOF 
;

// Rule PPDirective
rulePPDirective returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPPDirectiveAccess().getPPDeclarationParserRuleCall_0()); 
    }
    this_PPDeclaration_0=rulePPDeclaration    {
		$current.merge(this_PPDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPPDirectiveAccess().getPPConditionalParserRuleCall_1()); 
    }
    this_PPConditional_1=rulePPConditional    {
		$current.merge(this_PPConditional_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPConditional
entryRulePPConditional returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPConditionalRule()); } 
	 iv_rulePPConditional=rulePPConditional 
	 { $current=$iv_rulePPConditional.current.getText(); }  
	 EOF 
;

// Rule PPConditional
rulePPConditional returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPPConditionalAccess().getPPIfSectionParserRuleCall_0()); 
    }
    this_PPIfSection_0=rulePPIfSection    {
		$current.merge(this_PPIfSection_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getPPConditionalAccess().getPPElifSectionsParserRuleCall_1()); 
    }
    this_PPElifSections_1=rulePPElifSections    {
		$current.merge(this_PPElifSections_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getPPConditionalAccess().getPPElseSectionParserRuleCall_2()); 
    }
    this_PPElseSection_2=rulePPElseSection    {
		$current.merge(this_PPElseSection_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getPPConditionalAccess().getPPEndifParserRuleCall_3()); 
    }
    this_PPEndif_3=rulePPEndif    {
		$current.merge(this_PPEndif_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPEndif
entryRulePPEndif returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPEndifRule()); } 
	 iv_rulePPEndif=rulePPEndif 
	 { $current=$iv_rulePPEndif.current.getText(); }  
	 EOF 
;

// Rule PPEndif
rulePPEndif returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getPPEndifAccess().getWSTerminalRuleCall_0()); 
    }
)?
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPEndifAccess().getNumberSignKeyword_1()); 
    }
(    this_WS_2=RULE_WS    {
		$current.merge(this_WS_2);
    }

    { 
    newLeafNode(this_WS_2, grammarAccess.getPPEndifAccess().getWSTerminalRuleCall_2()); 
    }
)?
	kw='endif' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPEndifAccess().getEndifKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getPPEndifAccess().getPPNewLineParserRuleCall_4()); 
    }
    this_PPNewLine_4=rulePPNewLine    {
		$current.merge(this_PPNewLine_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPElseSection
entryRulePPElseSection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPElseSectionRule()); } 
	 iv_rulePPElseSection=rulePPElseSection 
	 { $current=$iv_rulePPElseSection.current.getText(); }  
	 EOF 
;

// Rule PPElseSection
rulePPElseSection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getPPElseSectionAccess().getWSTerminalRuleCall_0()); 
    }
)?
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPElseSectionAccess().getNumberSignKeyword_1()); 
    }
(    this_WS_2=RULE_WS    {
		$current.merge(this_WS_2);
    }

    { 
    newLeafNode(this_WS_2, grammarAccess.getPPElseSectionAccess().getWSTerminalRuleCall_2()); 
    }
)?
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPElseSectionAccess().getElseKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getPPElseSectionAccess().getPPNewLineParserRuleCall_4()); 
    }
    this_PPNewLine_4=rulePPNewLine    {
		$current.merge(this_PPNewLine_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPElifSections
entryRulePPElifSections returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPElifSectionsRule()); } 
	 iv_rulePPElifSections=rulePPElifSections 
	 { $current=$iv_rulePPElifSections.current.getText(); }  
	 EOF 
;

// Rule PPElifSections
rulePPElifSections returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPPElifSectionsAccess().getPPElifSectionParserRuleCall_0()); 
    }
    this_PPElifSection_0=rulePPElifSection    {
		$current.merge(this_PPElifSection_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPPElifSectionsAccess().getPPElifSections2ParserRuleCall_1()); 
    }
    this_PPElifSections2_1=rulePPElifSections2    {
		$current.merge(this_PPElifSections2_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPElifSections2
entryRulePPElifSections2 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPElifSections2Rule()); } 
	 iv_rulePPElifSections2=rulePPElifSections2 
	 { $current=$iv_rulePPElifSections2.current.getText(); }  
	 EOF 
;

// Rule PPElifSections2
rulePPElifSections2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPPElifSections2Access().getPPElifSectionParserRuleCall_0()); 
    }
    this_PPElifSection_0=rulePPElifSection    {
		$current.merge(this_PPElifSection_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPPElifSections2Access().getPPElifSections2ParserRuleCall_1()); 
    }
    this_PPElifSections2_1=rulePPElifSections2    {
		$current.merge(this_PPElifSections2_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPElifSection
entryRulePPElifSection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPElifSectionRule()); } 
	 iv_rulePPElifSection=rulePPElifSection 
	 { $current=$iv_rulePPElifSection.current.getText(); }  
	 EOF 
;

// Rule PPElifSection
rulePPElifSection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getPPElifSectionAccess().getWSTerminalRuleCall_0()); 
    }
)?
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPElifSectionAccess().getNumberSignKeyword_1()); 
    }
(    this_WS_2=RULE_WS    {
		$current.merge(this_WS_2);
    }

    { 
    newLeafNode(this_WS_2, grammarAccess.getPPElifSectionAccess().getWSTerminalRuleCall_2()); 
    }
)?
	kw='elif' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPElifSectionAccess().getElifKeyword_3()); 
    }
    this_WS_4=RULE_WS    {
		$current.merge(this_WS_4);
    }

    { 
    newLeafNode(this_WS_4, grammarAccess.getPPElifSectionAccess().getWSTerminalRuleCall_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getPPElifSectionAccess().getPPExpressionParserRuleCall_5()); 
    }
    this_PPExpression_5=rulePPExpression    {
		$current.merge(this_PPExpression_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPPElifSectionAccess().getPPNewLineParserRuleCall_6()); 
    }
    this_PPNewLine_6=rulePPNewLine    {
		$current.merge(this_PPNewLine_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPIfSection
entryRulePPIfSection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPIfSectionRule()); } 
	 iv_rulePPIfSection=rulePPIfSection 
	 { $current=$iv_rulePPIfSection.current.getText(); }  
	 EOF 
;

// Rule PPIfSection
rulePPIfSection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getPPIfSectionAccess().getWSTerminalRuleCall_0()); 
    }
)?
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPIfSectionAccess().getNumberSignKeyword_1()); 
    }
(    this_WS_2=RULE_WS    {
		$current.merge(this_WS_2);
    }

    { 
    newLeafNode(this_WS_2, grammarAccess.getPPIfSectionAccess().getWSTerminalRuleCall_2()); 
    }
)?
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPIfSectionAccess().getIfKeyword_3()); 
    }
    this_WS_4=RULE_WS    {
		$current.merge(this_WS_4);
    }

    { 
    newLeafNode(this_WS_4, grammarAccess.getPPIfSectionAccess().getWSTerminalRuleCall_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getPPIfSectionAccess().getPPExpressionParserRuleCall_5()); 
    }
    this_PPExpression_5=rulePPExpression    {
		$current.merge(this_PPExpression_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPPIfSectionAccess().getPPNewLineParserRuleCall_6()); 
    }
    this_PPNewLine_6=rulePPNewLine    {
		$current.merge(this_PPNewLine_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPExpression
entryRulePPExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPExpressionRule()); } 
	 iv_rulePPExpression=rulePPExpression 
	 { $current=$iv_rulePPExpression.current.getText(); }  
	 EOF 
;

// Rule PPExpression
rulePPExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getPPExpressionAccess().getWSTerminalRuleCall()); 
    }
)?
    ;





// Entry rule entryRulePPDeclaration
entryRulePPDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPDeclarationRule()); } 
	 iv_rulePPDeclaration=rulePPDeclaration 
	 { $current=$iv_rulePPDeclaration.current.getText(); }  
	 EOF 
;

// Rule PPDeclaration
rulePPDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getPPDeclarationAccess().getWSTerminalRuleCall_0()); 
    }
)?
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPDeclarationAccess().getNumberSignKeyword_1()); 
    }
(    this_WS_2=RULE_WS    {
		$current.merge(this_WS_2);
    }

    { 
    newLeafNode(this_WS_2, grammarAccess.getPPDeclarationAccess().getWSTerminalRuleCall_2()); 
    }
)?(
	kw='define' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPDeclarationAccess().getDefineKeyword_3_0()); 
    }

    |
	kw='undef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPPDeclarationAccess().getUndefKeyword_3_1()); 
    }
)    this_WS_5=RULE_WS    {
		$current.merge(this_WS_5);
    }

    { 
    newLeafNode(this_WS_5, grammarAccess.getPPDeclarationAccess().getWSTerminalRuleCall_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getPPDeclarationAccess().getConditionalSymbolParserRuleCall_5()); 
    }
    this_ConditionalSymbol_6=ruleConditionalSymbol    {
		$current.merge(this_ConditionalSymbol_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPPDeclarationAccess().getPPNewLineParserRuleCall_6()); 
    }
    this_PPNewLine_7=rulePPNewLine    {
		$current.merge(this_PPNewLine_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePPNewLine
entryRulePPNewLine returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPNewLineRule()); } 
	 iv_rulePPNewLine=rulePPNewLine 
	 { $current=$iv_rulePPNewLine.current.getText(); }  
	 EOF 
;

// Rule PPNewLine
rulePPNewLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getPPNewLineAccess().getWSTerminalRuleCall_0()); 
    }
)?(    this_SL_COMMENT_1=RULE_SL_COMMENT    {
		$current.merge(this_SL_COMMENT_1);
    }

    { 
    newLeafNode(this_SL_COMMENT_1, grammarAccess.getPPNewLineAccess().getSL_COMMENTTerminalRuleCall_1()); 
    }
)?    this_NEW_LINE_2=RULE_NEW_LINE    {
		$current.merge(this_NEW_LINE_2);
    }

    { 
    newLeafNode(this_NEW_LINE_2, grammarAccess.getPPNewLineAccess().getNEW_LINETerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleConditionalSymbol
entryRuleConditionalSymbol returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalSymbolRule()); } 
	 iv_ruleConditionalSymbol=ruleConditionalSymbol 
	 { $current=$iv_ruleConditionalSymbol.current.getText(); }  
	 EOF 
;

// Rule ConditionalSymbol
ruleConditionalSymbol returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConditionalSymbolAccess().getIdentifierOrKeywordParserRuleCall()); 
    }
    this_IdentifierOrKeyword_0=ruleIdentifierOrKeyword    {
		$current.merge(this_IdentifierOrKeyword_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleInputElement
entryRuleInputElement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputElementRule()); } 
	 iv_ruleInputElement=ruleInputElement 
	 { $current=$iv_ruleInputElement.current.getText(); }  
	 EOF 
;

// Rule InputElement
ruleInputElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getInputElementAccess().getWSTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getInputElementAccess().getCommentParserRuleCall_1()); 
    }
    this_Comment_1=ruleComment    {
		$current.merge(this_Comment_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInputElementAccess().getTokenParserRuleCall_2()); 
    }
    this_Token_2=ruleToken    {
		$current.merge(this_Token_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleToken
entryRuleToken returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTokenRule()); } 
	 iv_ruleToken=ruleToken 
	 { $current=$iv_ruleToken.current.getText(); }  
	 EOF 
;

// Rule Token
ruleToken returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getTokenAccess().getIDTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getKeywordsParserRuleCall_1()); 
    }
    this_Keywords_1=ruleKeywords    {
		$current.merge(this_Keywords_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getIntegerLiteralParserRuleCall_2()); 
    }
    this_IntegerLiteral_2=ruleIntegerLiteral    {
		$current.merge(this_IntegerLiteral_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getRealLiteralParserRuleCall_3()); 
    }
    this_RealLiteral_3=ruleRealLiteral    {
		$current.merge(this_RealLiteral_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getCharacterLiteralParserRuleCall_4()); 
    }
    this_CharacterLiteral_4=ruleCharacterLiteral    {
		$current.merge(this_CharacterLiteral_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getStringLiteralParserRuleCall_5()); 
    }
    this_StringLiteral_5=ruleStringLiteral    {
		$current.merge(this_StringLiteral_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_OPERATOR_OR_PUNCTUATOR_6=RULE_OPERATOR_OR_PUNCTUATOR    {
		$current.merge(this_OPERATOR_OR_PUNCTUATOR_6);
    }

    { 
    newLeafNode(this_OPERATOR_OR_PUNCTUATOR_6, grammarAccess.getTokenAccess().getOPERATOR_OR_PUNCTUATORTerminalRuleCall_6()); 
    }
)
    ;





// Entry rule entryRuleKeywords
entryRuleKeywords returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordsRule()); } 
	 iv_ruleKeywords=ruleKeywords 
	 { $current=$iv_ruleKeywords.current.getText(); }  
	 EOF 
;

// Rule Keywords
ruleKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getAbstractKeyword_0()); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getAsKeyword_1()); 
    }

    |
	kw='base' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getBaseKeyword_2()); 
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getBoolKeyword_3()); 
    }

    |
	kw='break' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getBreakKeyword_4()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getByteKeyword_5()); 
    }

    |
	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getCaseKeyword_6()); 
    }

    |
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getCatchKeyword_7()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getCharKeyword_8()); 
    }

    |
	kw='checked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getCheckedKeyword_9()); 
    }

    |
	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getClassKeyword_10()); 
    }

    |
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getConstKeyword_11()); 
    }

    |
	kw='continue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getContinueKeyword_12()); 
    }

    |
	kw='decimal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDecimalKeyword_13()); 
    }

    |
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDefaultKeyword_14()); 
    }

    |
	kw='delegate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDelegateKeyword_15()); 
    }

    |
	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDoKeyword_16()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDoubleKeyword_17()); 
    }

    |
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getElseKeyword_18()); 
    }

    |
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getEnumKeyword_19()); 
    }

    |
	kw='event' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getEventKeyword_20()); 
    }

    |
	kw='explicit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getExplicitKeyword_21()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getExternKeyword_22()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getFalseKeyword_23()); 
    }

    |
	kw='finally' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getFinallyKeyword_24()); 
    }

    |
	kw='fixed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getFixedKeyword_25()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getFloatKeyword_26()); 
    }

    |
	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getForKeyword_27()); 
    }

    |
	kw='foreach' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getForeachKeyword_28()); 
    }

    |
	kw='goto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getGotoKeyword_29()); 
    }

    |
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getIfKeyword_30()); 
    }

    |
	kw='implicit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getImplicitKeyword_31()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getInKeyword_32()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getIntKeyword_33()); 
    }

    |
	kw='interface' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getInterfaceKeyword_34()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getInternalKeyword_35()); 
    }

    |
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getIsKeyword_36()); 
    }

    |
	kw='lock' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getLockKeyword_37()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getLongKeyword_38()); 
    }

    |
	kw='namespace' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getNamespaceKeyword_39()); 
    }

    |
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getNewKeyword_40()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getNullKeyword_41()); 
    }

    |
	kw='object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getObjectKeyword_42()); 
    }

    |
	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getOperatorKeyword_43()); 
    }

    |
	kw='out' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getOutKeyword_44()); 
    }

    |
	kw='override' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getOverrideKeyword_45()); 
    }

    |
	kw='params' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getParamsKeyword_46()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getPrivateKeyword_47()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getProtectedKeyword_48()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getPublicKeyword_49()); 
    }

    |
	kw='readonly' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getReadonlyKeyword_50()); 
    }

    |
	kw='ref' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getRefKeyword_51()); 
    }

    |
	kw='return' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getReturnKeyword_52()); 
    }

    |
	kw='sbyte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getSbyteKeyword_53()); 
    }

    |
	kw='sealed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getSealedKeyword_54()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getShortKeyword_55()); 
    }

    |
	kw='sizeof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getSizeofKeyword_56()); 
    }

    |
	kw='stackalloc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getStackallocKeyword_57()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getStaticKeyword_58()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getStringKeyword_59()); 
    }

    |
	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getStructKeyword_60()); 
    }

    |
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getSwitchKeyword_61()); 
    }

    |
	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getThisKeyword_62()); 
    }

    |
	kw='throw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getThrowKeyword_63()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getTrueKeyword_64()); 
    }

    |
	kw='try' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getTryKeyword_65()); 
    }

    |
	kw='typeof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getTypeofKeyword_66()); 
    }

    |
	kw='uint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUintKeyword_67()); 
    }

    |
	kw='ulong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUlongKeyword_68()); 
    }

    |
	kw='unchecked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUncheckedKeyword_69()); 
    }

    |
	kw='unsafe' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUnsafeKeyword_70()); 
    }

    |
	kw='ushort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUshortKeyword_71()); 
    }

    |
	kw='using' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUsingKeyword_72()); 
    }

    |
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getVirtualKeyword_73()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getVoidKeyword_74()); 
    }

    |
	kw='volatile' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getVolatileKeyword_75()); 
    }

    |
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getWhileKeyword_76()); 
    }
)
    ;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); } 
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current.getText(); }  
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='0x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerLiteralAccess().getXKeyword_0_0_0()); 
    }

    |
	kw='0X' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerLiteralAccess().getXKeyword_0_0_1()); 
    }
)(    this_HEX_DIGIT_2=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_2);
    }

    { 
    newLeafNode(this_HEX_DIGIT_2, grammarAccess.getIntegerLiteralAccess().getHEX_DIGITTerminalRuleCall_0_1()); 
    }
)+    this_INTEGER_TYPE_SUFFIX_3=RULE_INTEGER_TYPE_SUFFIX    {
		$current.merge(this_INTEGER_TYPE_SUFFIX_3);
    }

    { 
    newLeafNode(this_INTEGER_TYPE_SUFFIX_3, grammarAccess.getIntegerLiteralAccess().getINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2()); 
    }
)
    |(    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getIntegerLiteralAccess().getINTTerminalRuleCall_1_0()); 
    }
(    this_INTEGER_TYPE_SUFFIX_5=RULE_INTEGER_TYPE_SUFFIX    {
		$current.merge(this_INTEGER_TYPE_SUFFIX_5);
    }

    { 
    newLeafNode(this_INTEGER_TYPE_SUFFIX_5, grammarAccess.getIntegerLiteralAccess().getINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1()); 
    }
)?))
    ;





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); } 
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current.getText(); }  
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getRealLiteralAccess().getINTTerminalRuleCall_0_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealLiteralAccess().getFullStopKeyword_0_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getRealLiteralAccess().getINTTerminalRuleCall_0_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getRealLiteralAccess().getExponentPartParserRuleCall_0_3()); 
    }
    this_ExponentPart_3=ruleExponentPart    {
		$current.merge(this_ExponentPart_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(    this_REAL_TYPE_SUFFIX_4=RULE_REAL_TYPE_SUFFIX    {
		$current.merge(this_REAL_TYPE_SUFFIX_4);
    }

    { 
    newLeafNode(this_REAL_TYPE_SUFFIX_4, grammarAccess.getRealLiteralAccess().getREAL_TYPE_SUFFIXTerminalRuleCall_0_4()); 
    }
)?)
    |(    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getRealLiteralAccess().getINTTerminalRuleCall_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRealLiteralAccess().getExponentPartParserRuleCall_1_1()); 
    }
    this_ExponentPart_6=ruleExponentPart    {
		$current.merge(this_ExponentPart_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_REAL_TYPE_SUFFIX_7=RULE_REAL_TYPE_SUFFIX    {
		$current.merge(this_REAL_TYPE_SUFFIX_7);
    }

    { 
    newLeafNode(this_REAL_TYPE_SUFFIX_7, grammarAccess.getRealLiteralAccess().getREAL_TYPE_SUFFIXTerminalRuleCall_1_2()); 
    }
)?)
    |(    this_INT_8=RULE_INT    {
		$current.merge(this_INT_8);
    }

    { 
    newLeafNode(this_INT_8, grammarAccess.getRealLiteralAccess().getINTTerminalRuleCall_2_0()); 
    }
    this_REAL_TYPE_SUFFIX_9=RULE_REAL_TYPE_SUFFIX    {
		$current.merge(this_REAL_TYPE_SUFFIX_9);
    }

    { 
    newLeafNode(this_REAL_TYPE_SUFFIX_9, grammarAccess.getRealLiteralAccess().getREAL_TYPE_SUFFIXTerminalRuleCall_2_1()); 
    }
))
    ;





// Entry rule entryRuleExponentPart
entryRuleExponentPart returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExponentPartRule()); } 
	 iv_ruleExponentPart=ruleExponentPart 
	 { $current=$iv_ruleExponentPart.current.getText(); }  
	 EOF 
;

// Rule ExponentPart
ruleExponentPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExponentPartAccess().getEKeyword_0_0()); 
    }
(    this_SIGN_1=RULE_SIGN    {
		$current.merge(this_SIGN_1);
    }

    { 
    newLeafNode(this_SIGN_1, grammarAccess.getExponentPartAccess().getSIGNTerminalRuleCall_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getExponentPartAccess().getINTTerminalRuleCall_0_2()); 
    }
)
    |(
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExponentPartAccess().getEKeyword_1_0()); 
    }
(    this_SIGN_4=RULE_SIGN    {
		$current.merge(this_SIGN_4);
    }

    { 
    newLeafNode(this_SIGN_4, grammarAccess.getExponentPartAccess().getSIGNTerminalRuleCall_1_1()); 
    }
)?    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getExponentPartAccess().getINTTerminalRuleCall_1_2()); 
    }
))
    ;





// Entry rule entryRuleCharacterLiteral
entryRuleCharacterLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharacterLiteralRule()); } 
	 iv_ruleCharacterLiteral=ruleCharacterLiteral 
	 { $current=$iv_ruleCharacterLiteral.current.getText(); }  
	 EOF 
;

// Rule CharacterLiteral
ruleCharacterLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCharacterLiteralAccess().getApostropheKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCharacterLiteralAccess().getCharacterParserRuleCall_1()); 
    }
    this_Character_1=ruleCharacter    {
		$current.merge(this_Character_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCharacterLiteralAccess().getApostropheKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleCharacter
entryRuleCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharacterRule()); } 
	 iv_ruleCharacter=ruleCharacter 
	 { $current=$iv_ruleCharacter.current.getText(); }  
	 EOF 
;

// Rule Character
ruleCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SINGLE_CHARACTER_0=RULE_SINGLE_CHARACTER    {
		$current.merge(this_SINGLE_CHARACTER_0);
    }

    { 
    newLeafNode(this_SINGLE_CHARACTER_0, grammarAccess.getCharacterAccess().getSINGLE_CHARACTERTerminalRuleCall_0()); 
    }

    |(
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCharacterAccess().getReverseSolidusKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCharacterAccess().getEscapeSequenceParserRuleCall_1_1()); 
    }
    this_EscapeSequence_2=ruleEscapeSequence    {
		$current.merge(this_EscapeSequence_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleEscapeSequence
entryRuleEscapeSequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEscapeSequenceRule()); } 
	 iv_ruleEscapeSequence=ruleEscapeSequence 
	 { $current=$iv_ruleEscapeSequence.current.getText(); }  
	 EOF 
;

// Rule EscapeSequence
ruleEscapeSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ESCAPE_SEQUENCE_0=RULE_ESCAPE_SEQUENCE    {
		$current.merge(this_ESCAPE_SEQUENCE_0);
    }

    { 
    newLeafNode(this_ESCAPE_SEQUENCE_0, grammarAccess.getEscapeSequenceAccess().getESCAPE_SEQUENCETerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getEscapeSequenceAccess().getHexadecimalEscapeSequenceParserRuleCall_1()); 
    }
    this_HexadecimalEscapeSequence_1=ruleHexadecimalEscapeSequence    {
		$current.merge(this_HexadecimalEscapeSequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEscapeSequenceAccess().getUnicodeCharacterEscapeSequenceParserRuleCall_2()); 
    }
    this_UnicodeCharacterEscapeSequence_2=ruleUnicodeCharacterEscapeSequence    {
		$current.merge(this_UnicodeCharacterEscapeSequence_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleUnicodeCharacterEscapeSequence
entryRuleUnicodeCharacterEscapeSequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnicodeCharacterEscapeSequenceRule()); } 
	 iv_ruleUnicodeCharacterEscapeSequence=ruleUnicodeCharacterEscapeSequence 
	 { $current=$iv_ruleUnicodeCharacterEscapeSequence.current.getText(); }  
	 EOF 
;

// Rule UnicodeCharacterEscapeSequence
ruleUnicodeCharacterEscapeSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='u' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getUKeyword_0_0()); 
    }
    this_HEX_DIGIT_1=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_1);
    }

    { 
    newLeafNode(this_HEX_DIGIT_1, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_0_1()); 
    }
    this_HEX_DIGIT_2=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_2);
    }

    { 
    newLeafNode(this_HEX_DIGIT_2, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_0_2()); 
    }
    this_HEX_DIGIT_3=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_3);
    }

    { 
    newLeafNode(this_HEX_DIGIT_3, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_0_3()); 
    }
    this_HEX_DIGIT_4=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_4);
    }

    { 
    newLeafNode(this_HEX_DIGIT_4, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_0_4()); 
    }
)
    |(
	kw='U' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getUKeyword_1_0()); 
    }
    this_HEX_DIGIT_6=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_6);
    }

    { 
    newLeafNode(this_HEX_DIGIT_6, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_1()); 
    }
    this_HEX_DIGIT_7=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_7);
    }

    { 
    newLeafNode(this_HEX_DIGIT_7, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_2()); 
    }
    this_HEX_DIGIT_8=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_8);
    }

    { 
    newLeafNode(this_HEX_DIGIT_8, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_3()); 
    }
    this_HEX_DIGIT_9=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_9);
    }

    { 
    newLeafNode(this_HEX_DIGIT_9, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_4()); 
    }
    this_HEX_DIGIT_10=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_10);
    }

    { 
    newLeafNode(this_HEX_DIGIT_10, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_5()); 
    }
    this_HEX_DIGIT_11=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_11);
    }

    { 
    newLeafNode(this_HEX_DIGIT_11, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_6()); 
    }
    this_HEX_DIGIT_12=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_12);
    }

    { 
    newLeafNode(this_HEX_DIGIT_12, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_7()); 
    }
    this_HEX_DIGIT_13=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_13);
    }

    { 
    newLeafNode(this_HEX_DIGIT_13, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_8()); 
    }
))
    ;





// Entry rule entryRuleHexadecimalEscapeSequence
entryRuleHexadecimalEscapeSequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHexadecimalEscapeSequenceRule()); } 
	 iv_ruleHexadecimalEscapeSequence=ruleHexadecimalEscapeSequence 
	 { $current=$iv_ruleHexadecimalEscapeSequence.current.getText(); }  
	 EOF 
;

// Rule HexadecimalEscapeSequence
ruleHexadecimalEscapeSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHexadecimalEscapeSequenceAccess().getXKeyword_0()); 
    }
    this_HEX_DIGIT_1=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_1);
    }

    { 
    newLeafNode(this_HEX_DIGIT_1, grammarAccess.getHexadecimalEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1()); 
    }
(    this_HEX_DIGIT_2=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_2);
    }

    { 
    newLeafNode(this_HEX_DIGIT_2, grammarAccess.getHexadecimalEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_2_0()); 
    }
(    this_HEX_DIGIT_3=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_3);
    }

    { 
    newLeafNode(this_HEX_DIGIT_3, grammarAccess.getHexadecimalEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_2_1_0()); 
    }
(    this_HEX_DIGIT_4=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_4);
    }

    { 
    newLeafNode(this_HEX_DIGIT_4, grammarAccess.getHexadecimalEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_2_1_1()); 
    }
)?)?)?)
    ;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getQuotationMarkKeyword_0_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getStringLiteralAccess().getRegularStringCharacterParserRuleCall_0_1()); 
    }
    this_RegularStringCharacter_1=ruleRegularStringCharacter    {
		$current.merge(this_RegularStringCharacter_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getQuotationMarkKeyword_0_2()); 
    }
)
    |(
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getCommercialAtKeyword_1_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getStringLiteralAccess().getVerbatimStringCharacterParserRuleCall_1_1()); 
    }
    this_VerbatimStringCharacter_4=ruleVerbatimStringCharacter    {
		$current.merge(this_VerbatimStringCharacter_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getQuotationMarkKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleVerbatimStringCharacter
entryRuleVerbatimStringCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVerbatimStringCharacterRule()); } 
	 iv_ruleVerbatimStringCharacter=ruleVerbatimStringCharacter 
	 { $current=$iv_ruleVerbatimStringCharacter.current.getText(); }  
	 EOF 
;

// Rule VerbatimStringCharacter
ruleVerbatimStringCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SINGLE_CHARACTER_0=RULE_SINGLE_CHARACTER    {
		$current.merge(this_SINGLE_CHARACTER_0);
    }

    { 
    newLeafNode(this_SINGLE_CHARACTER_0, grammarAccess.getVerbatimStringCharacterAccess().getSINGLE_CHARACTERTerminalRuleCall_0()); 
    }

    |    this_QUOTE_ESCAPE_SEQUENCE_1=RULE_QUOTE_ESCAPE_SEQUENCE    {
		$current.merge(this_QUOTE_ESCAPE_SEQUENCE_1);
    }

    { 
    newLeafNode(this_QUOTE_ESCAPE_SEQUENCE_1, grammarAccess.getVerbatimStringCharacterAccess().getQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRegularStringCharacter
entryRuleRegularStringCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegularStringCharacterRule()); } 
	 iv_ruleRegularStringCharacter=ruleRegularStringCharacter 
	 { $current=$iv_ruleRegularStringCharacter.current.getText(); }  
	 EOF 
;

// Rule RegularStringCharacter
ruleRegularStringCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SINGLE_CHARACTER_0=RULE_SINGLE_CHARACTER    {
		$current.merge(this_SINGLE_CHARACTER_0);
    }

    { 
    newLeafNode(this_SINGLE_CHARACTER_0, grammarAccess.getRegularStringCharacterAccess().getSINGLE_CHARACTERTerminalRuleCall_0()); 
    }

    |(
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRegularStringCharacterAccess().getReverseSolidusKeyword_1_0()); 
    }
    this_ESCAPE_SEQUENCE_2=RULE_ESCAPE_SEQUENCE    {
		$current.merge(this_ESCAPE_SEQUENCE_2);
    }

    { 
    newLeafNode(this_ESCAPE_SEQUENCE_2, grammarAccess.getRegularStringCharacterAccess().getESCAPE_SEQUENCETerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRuleComment
entryRuleComment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); } 
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current.getText(); }  
	 EOF 
;

// Rule Comment
ruleComment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SL_COMMENT_0=RULE_SL_COMMENT    {
		$current.merge(this_SL_COMMENT_0);
    }

    { 
    newLeafNode(this_SL_COMMENT_0, grammarAccess.getCommentAccess().getSL_COMMENTTerminalRuleCall_0()); 
    }

    |    this_ML_COMMENT_1=RULE_ML_COMMENT    {
		$current.merge(this_ML_COMMENT_1);
    }

    { 
    newLeafNode(this_ML_COMMENT_1, grammarAccess.getCommentAccess().getML_COMMENTTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleAvailableIdentifier
entryRuleAvailableIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAvailableIdentifierRule()); } 
	 iv_ruleAvailableIdentifier=ruleAvailableIdentifier 
	 { $current=$iv_ruleAvailableIdentifier.current.getText(); }  
	 EOF 
;

// Rule AvailableIdentifier
ruleAvailableIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAvailableIdentifierAccess().getIdentifierOrKeywordParserRuleCall()); 
    }
    this_IdentifierOrKeyword_0=ruleIdentifierOrKeyword    {
		$current.merge(this_IdentifierOrKeyword_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleIdentifierOrKeyword
entryRuleIdentifierOrKeyword returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierOrKeywordRule()); } 
	 iv_ruleIdentifierOrKeyword=ruleIdentifierOrKeyword 
	 { $current=$iv_ruleIdentifierOrKeyword.current.getText(); }  
	 EOF 
;

// Rule IdentifierOrKeyword
ruleIdentifierOrKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_START_CHARACTER_0=RULE_IDENTIFIER_START_CHARACTER    {
		$current.merge(this_IDENTIFIER_START_CHARACTER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_START_CHARACTER_0, grammarAccess.getIdentifierOrKeywordAccess().getIDENTIFIER_START_CHARACTERTerminalRuleCall_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getIdentifierOrKeywordAccess().getIdentifierPartCharacterParserRuleCall_1()); 
    }
    this_IdentifierPartCharacter_1=ruleIdentifierPartCharacter    {
		$current.merge(this_IdentifierPartCharacter_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleIdentifierPartCharacter
entryRuleIdentifierPartCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierPartCharacterRule()); } 
	 iv_ruleIdentifierPartCharacter=ruleIdentifierPartCharacter 
	 { $current=$iv_ruleIdentifierPartCharacter.current.getText(); }  
	 EOF 
;

// Rule IdentifierPartCharacter
ruleIdentifierPartCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_LETTER_0=RULE_LETTER    {
		$current.merge(this_LETTER_0);
    }

    { 
    newLeafNode(this_LETTER_0, grammarAccess.getIdentifierPartCharacterAccess().getLETTERTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIdentifierPartCharacterAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleIntegralType
entryRuleIntegralType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegralTypeRule()); } 
	 iv_ruleIntegralType=ruleIntegralType 
	 { $current=$iv_ruleIntegralType.current.getText(); }  
	 EOF 
;

// Rule IntegralType
ruleIntegralType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='sbyte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getSbyteKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getByteKeyword_1()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getShortKeyword_2()); 
    }

    |
	kw='ushort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUshortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getIntKeyword_4()); 
    }

    |
	kw='uint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUintKeyword_5()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getLongKeyword_6()); 
    }

    |
	kw='ulong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUlongKeyword_7()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getCharKeyword_8()); 
    }
)
    ;









// Entry rule entryRuleNonArrayType
entryRuleNonArrayType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonArrayTypeRule()); } 
	 iv_ruleNonArrayType=ruleNonArrayType 
	 { $current=$iv_ruleNonArrayType.current.getText(); }  
	 EOF 
;

// Rule NonArrayType
ruleNonArrayType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNonArrayTypeAccess().getBuiltInTypeParserRuleCall()); 
    }
    this_BuiltInType_0=ruleBuiltInType    {
		$current.merge(this_BuiltInType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;







// Entry rule entryRuleBuiltInType
entryRuleBuiltInType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInTypeRule()); } 
	 iv_ruleBuiltInType=ruleBuiltInType 
	 { $current=$iv_ruleBuiltInType.current.getText(); }  
	 EOF 
;

// Rule BuiltInType
ruleBuiltInType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBuiltInTypeAccess().getIntegralTypeParserRuleCall_0()); 
    }
    this_IntegralType_0=ruleIntegralType    {
		$current.merge(this_IntegralType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInTypeAccess().getBuiltInClassTypeParserRuleCall_1()); 
    }
    this_BuiltInClassType_1=ruleBuiltInClassType    {
		$current.merge(this_BuiltInClassType_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getBoolKeyword_2()); 
    }

    |
	kw='decimal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getDecimalKeyword_3()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getFloatKeyword_4()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getDoubleKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleBuiltInClassType
entryRuleBuiltInClassType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInClassTypeRule()); } 
	 iv_ruleBuiltInClassType=ruleBuiltInClassType 
	 { $current=$iv_ruleBuiltInClassType.current.getText(); }  
	 EOF 
;

// Rule BuiltInClassType
ruleBuiltInClassType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInClassTypeAccess().getObjectKeyword_0()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInClassTypeAccess().getStringKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEnumBody
entryRuleEnumBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumBodyRule()); } 
	 iv_ruleEnumBody=ruleEnumBody 
	 { $current=$iv_ruleEnumBody.current.getText(); }  
	 EOF 
;

// Rule EnumBody
ruleEnumBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getLeftCurlyBracketKeyword_0()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getRightCurlyBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEnumModifier
entryRuleEnumModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumModifierRule()); } 
	 iv_ruleEnumModifier=ruleEnumModifier 
	 { $current=$iv_ruleEnumModifier.current.getText(); }  
	 EOF 
;

// Rule EnumModifier
ruleEnumModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getPrivateKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleAttributes
entryRuleAttributes returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributesRule()); } 
	 iv_ruleAttributes=ruleAttributes 
	 { $current=$iv_ruleAttributes.current.getText(); }  
	 EOF 
;

// Rule Attributes
ruleAttributes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributesAccess().getNullKeyword()); 
    }

    ;





RULE_REAL_TYPE_SUFFIX : ('F'|'f'|'D'|'d'|'M'|'m');

RULE_LETTER : ('A'..'Z'|'a'..'z');

RULE_IDENTIFIER_START_CHARACTER : (RULE_LETTER|'_');

RULE_QUOTE_ESCAPE_SEQUENCE : '""';

RULE_ESCAPE_SEQUENCE : ('\''|'"'|'\\'|'0'|'a'|'b'|'f'|'n'|'r'|'t'|'v');

RULE_NEW_LINE : ('\r'|'\n')* EOF;

RULE_RANK_SPECIFIER : '[' ','* ']';

RULE_INTEGER_TYPE_SUFFIX : ('U'|'u'|'L'|'l'|'UL'|'Ul'|'uL'|'ul'|'LU'|'Lu'|'lU'|'lu');

RULE_HEX_DIGIT : ('0'..'9'|('A'..'F'|'a'..'f'));

RULE_SIGN : ('+'|'-');

RULE_OPERATOR_OR_PUNCTUATOR : ('{'|'}'|'['|']'|'('|')'|'.'|','|':'|';'|'+'|'-'|'*'|'/'|'%'|'&'|'|'|'^'|'!'|'~'|'='|'<'|'>'|'?'|'++'|'--'|'&&'|'||'|'<<'|'>>'|'=='|'!='|'<='|'>='|'+='|'-='|'*='|'/='|'%='|'&='|'|='|'^='|'<<='|'>>='|'->');

RULE_SINGLE_CHARACTER : .?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


