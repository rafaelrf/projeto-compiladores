/*
* generated by Xtext
*/
grammar InternalCSharp;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.myModel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.myModel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.myModel.services.CSharpGrammarAccess;

}

@parser::members {

 	private CSharpGrammarAccess grammarAccess;
 	
    public InternalCSharpParser(TokenStream input, CSharpGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CSharpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getInputInputParserRuleCall_0()); 
	    }
		lv_input_0_0=ruleInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"input",
        		lv_input_0_0, 
        		"Input");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleInput
entryRuleInput returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); } 
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current.getText(); }  
	 EOF 
;

// Rule Input
ruleInput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInputAccess().getInputSectionPartParserRuleCall()); 
    }
    this_InputSectionPart_0=ruleInputSectionPart    {
		$current.merge(this_InputSectionPart_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    ;





// Entry rule entryRuleInputSectionPart
entryRuleInputSectionPart returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputSectionPartRule()); } 
	 iv_ruleInputSectionPart=ruleInputSectionPart 
	 { $current=$iv_ruleInputSectionPart.current.getText(); }  
	 EOF 
;

// Rule InputSectionPart
ruleInputSectionPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getInputSectionPartAccess().getInputElementParserRuleCall_0_0()); 
    }
    this_InputElement_0=ruleInputElement    {
		$current.merge(this_InputElement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*    this_NEW_LINE_1=RULE_NEW_LINE    {
		$current.merge(this_NEW_LINE_1);
    }

    { 
    newLeafNode(this_NEW_LINE_1, grammarAccess.getInputSectionPartAccess().getNEW_LINETerminalRuleCall_0_1()); 
    }
)
    |    this_SINGLE_LINE_COMMENT_2=RULE_SINGLE_LINE_COMMENT    {
		$current.merge(this_SINGLE_LINE_COMMENT_2);
    }

    { 
    newLeafNode(this_SINGLE_LINE_COMMENT_2, grammarAccess.getInputSectionPartAccess().getSINGLE_LINE_COMMENTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleInputElement
entryRuleInputElement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputElementRule()); } 
	 iv_ruleInputElement=ruleInputElement 
	 { $current=$iv_ruleInputElement.current.getText(); }  
	 EOF 
;

// Rule InputElement
ruleInputElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WHITE_SPACE_0=RULE_WHITE_SPACE    {
		$current.merge(this_WHITE_SPACE_0);
    }

    { 
    newLeafNode(this_WHITE_SPACE_0, grammarAccess.getInputElementAccess().getWHITE_SPACETerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getInputElementAccess().getCommentParserRuleCall_1()); 
    }
    this_Comment_1=ruleComment    {
		$current.merge(this_Comment_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInputElementAccess().getTokenParserRuleCall_2()); 
    }
    this_Token_2=ruleToken    {
		$current.merge(this_Token_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleToken
entryRuleToken returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTokenRule()); } 
	 iv_ruleToken=ruleToken 
	 { $current=$iv_ruleToken.current.getText(); }  
	 EOF 
;

// Rule Token
ruleToken returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getIdentifierParserRuleCall_0()); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getKeywordsParserRuleCall_1()); 
    }
    this_Keywords_1=ruleKeywords    {
		$current.merge(this_Keywords_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getIntegerLiteralParserRuleCall_2()); 
    }
    this_IntegerLiteral_2=ruleIntegerLiteral    {
		$current.merge(this_IntegerLiteral_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleKeywords
entryRuleKeywords returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordsRule()); } 
	 iv_ruleKeywords=ruleKeywords 
	 { $current=$iv_ruleKeywords.current.getText(); }  
	 EOF 
;

// Rule Keywords
ruleKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getAbstractKeyword_0()); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getAsKeyword_1()); 
    }

    |
	kw='base' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getBaseKeyword_2()); 
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getBoolKeyword_3()); 
    }

    |
	kw='break' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getBreakKeyword_4()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getByteKeyword_5()); 
    }

    |
	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getCaseKeyword_6()); 
    }

    |
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getCatchKeyword_7()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getCharKeyword_8()); 
    }

    |
	kw='checked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getCheckedKeyword_9()); 
    }

    |
	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getClassKeyword_10()); 
    }

    |
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getConstKeyword_11()); 
    }

    |
	kw='continue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getContinueKeyword_12()); 
    }

    |
	kw='decimal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDecimalKeyword_13()); 
    }

    |
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDefaultKeyword_14()); 
    }

    |
	kw='delegate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDelegateKeyword_15()); 
    }

    |
	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDoKeyword_16()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getDoubleKeyword_17()); 
    }

    |
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getElseKeyword_18()); 
    }

    |
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getEnumKeyword_19()); 
    }

    |
	kw='event' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getEventKeyword_20()); 
    }

    |
	kw='explicit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getExplicitKeyword_21()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getExternKeyword_22()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getFalseKeyword_23()); 
    }

    |
	kw='finally' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getFinallyKeyword_24()); 
    }

    |
	kw='fixed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getFixedKeyword_25()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getFloatKeyword_26()); 
    }

    |
	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getForKeyword_27()); 
    }

    |
	kw='foreach' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getForeachKeyword_28()); 
    }

    |
	kw='goto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getGotoKeyword_29()); 
    }

    |
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getIfKeyword_30()); 
    }

    |
	kw='implicit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getImplicitKeyword_31()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getInKeyword_32()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getIntKeyword_33()); 
    }

    |
	kw='interface' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getInterfaceKeyword_34()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getInternalKeyword_35()); 
    }

    |
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getIsKeyword_36()); 
    }

    |
	kw='lock' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getLockKeyword_37()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getLongKeyword_38()); 
    }

    |
	kw='namespace' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getNamespaceKeyword_39()); 
    }

    |
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getNewKeyword_40()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getNullKeyword_41()); 
    }

    |
	kw='object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getObjectKeyword_42()); 
    }

    |
	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getOperatorKeyword_43()); 
    }

    |
	kw='out' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getOutKeyword_44()); 
    }

    |
	kw='override' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getOverrideKeyword_45()); 
    }

    |
	kw='params' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getParamsKeyword_46()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getPrivateKeyword_47()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getProtectedKeyword_48()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getPublicKeyword_49()); 
    }

    |
	kw='readonly' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getReadonlyKeyword_50()); 
    }

    |
	kw='ref' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getRefKeyword_51()); 
    }

    |
	kw='return' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getReturnKeyword_52()); 
    }

    |
	kw='sbyte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getSbyteKeyword_53()); 
    }

    |
	kw='sealed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getSealedKeyword_54()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getShortKeyword_55()); 
    }

    |
	kw='sizeof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getSizeofKeyword_56()); 
    }

    |
	kw='stackalloc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getStackallocKeyword_57()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getStaticKeyword_58()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getStringKeyword_59()); 
    }

    |
	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getStructKeyword_60()); 
    }

    |
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getSwitchKeyword_61()); 
    }

    |
	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getThisKeyword_62()); 
    }

    |
	kw='throw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getThrowKeyword_63()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getTrueKeyword_64()); 
    }

    |
	kw='try' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getTryKeyword_65()); 
    }

    |
	kw='typeof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getTypeofKeyword_66()); 
    }

    |
	kw='uint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUintKeyword_67()); 
    }

    |
	kw='ulong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUlongKeyword_68()); 
    }

    |
	kw='unchecked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUncheckedKeyword_69()); 
    }

    |
	kw='unsafe' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUnsafeKeyword_70()); 
    }

    |
	kw='ushort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUshortKeyword_71()); 
    }

    |
	kw='using' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getUsingKeyword_72()); 
    }

    |
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getVirtualKeyword_73()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getVoidKeyword_74()); 
    }

    |
	kw='volatile' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getVolatileKeyword_75()); 
    }

    |
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordsAccess().getWhileKeyword_76()); 
    }
)
    ;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); } 
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current.getText(); }  
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((    this_DECIMAL_DIGIT_0=RULE_DECIMAL_DIGIT    {
		$current.merge(this_DECIMAL_DIGIT_0);
    }

    { 
    newLeafNode(this_DECIMAL_DIGIT_0, grammarAccess.getIntegerLiteralAccess().getDECIMAL_DIGITTerminalRuleCall_0_0()); 
    }
)+(    this_INTEGER_TYPE_SUFFIX_1=RULE_INTEGER_TYPE_SUFFIX    {
		$current.merge(this_INTEGER_TYPE_SUFFIX_1);
    }

    { 
    newLeafNode(this_INTEGER_TYPE_SUFFIX_1, grammarAccess.getIntegerLiteralAccess().getINTEGER_TYPE_SUFFIXTerminalRuleCall_0_1()); 
    }
)?)
    |(
	kw='0x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerLiteralAccess().getXKeyword_1_0()); 
    }
(    this_HEX_DIGIT_3=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_3);
    }

    { 
    newLeafNode(this_HEX_DIGIT_3, grammarAccess.getIntegerLiteralAccess().getHEX_DIGITTerminalRuleCall_1_1()); 
    }
)+    this_INTEGER_TYPE_SUFFIX_4=RULE_INTEGER_TYPE_SUFFIX    {
		$current.merge(this_INTEGER_TYPE_SUFFIX_4);
    }

    { 
    newLeafNode(this_INTEGER_TYPE_SUFFIX_4, grammarAccess.getIntegerLiteralAccess().getINTEGER_TYPE_SUFFIXTerminalRuleCall_1_2()); 
    }
)
    |(
	kw='0X' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerLiteralAccess().getXKeyword_2_0()); 
    }
(    this_HEX_DIGIT_6=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_6);
    }

    { 
    newLeafNode(this_HEX_DIGIT_6, grammarAccess.getIntegerLiteralAccess().getHEX_DIGITTerminalRuleCall_2_1()); 
    }
)+(    this_INTEGER_TYPE_SUFFIX_7=RULE_INTEGER_TYPE_SUFFIX    {
		$current.merge(this_INTEGER_TYPE_SUFFIX_7);
    }

    { 
    newLeafNode(this_INTEGER_TYPE_SUFFIX_7, grammarAccess.getIntegerLiteralAccess().getINTEGER_TYPE_SUFFIXTerminalRuleCall_2_2()); 
    }
)?))
    ;





// Entry rule entryRuleComment
entryRuleComment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); } 
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current.getText(); }  
	 EOF 
;

// Rule Comment
ruleComment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SINGLE_LINE_COMMENT_0=RULE_SINGLE_LINE_COMMENT    {
		$current.merge(this_SINGLE_LINE_COMMENT_0);
    }

    { 
    newLeafNode(this_SINGLE_LINE_COMMENT_0, grammarAccess.getCommentAccess().getSINGLE_LINE_COMMENTTerminalRuleCall_0()); 
    }

    |    this_DELIMITED_COMMENT_1=RULE_DELIMITED_COMMENT    {
		$current.merge(this_DELIMITED_COMMENT_1);
    }

    { 
    newLeafNode(this_DELIMITED_COMMENT_1, grammarAccess.getCommentAccess().getDELIMITED_COMMENTTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleIntegralType
entryRuleIntegralType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegralTypeRule()); } 
	 iv_ruleIntegralType=ruleIntegralType 
	 { $current=$iv_ruleIntegralType.current.getText(); }  
	 EOF 
;

// Rule IntegralType
ruleIntegralType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='sbyte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getSbyteKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getByteKeyword_1()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getShortKeyword_2()); 
    }

    |
	kw='ushort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUshortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getIntKeyword_4()); 
    }

    |
	kw='uint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUintKeyword_5()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getLongKeyword_6()); 
    }

    |
	kw='ulong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUlongKeyword_7()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getCharKeyword_8()); 
    }
)
    ;









// Entry rule entryRuleRANK_SPECIFIER
entryRuleRANK_SPECIFIER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRANK_SPECIFIERRule()); } 
	 iv_ruleRANK_SPECIFIER=ruleRANK_SPECIFIER 
	 { $current=$iv_ruleRANK_SPECIFIER.current.getText(); }  
	 EOF 
;

// Rule RANK_SPECIFIER
ruleRANK_SPECIFIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRANK_SPECIFIERAccess().getLeftSquareBracketKeyword_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRANK_SPECIFIERAccess().getCommaKeyword_1()); 
    }
)*
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRANK_SPECIFIERAccess().getRightSquareBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleNonArrayType
entryRuleNonArrayType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonArrayTypeRule()); } 
	 iv_ruleNonArrayType=ruleNonArrayType 
	 { $current=$iv_ruleNonArrayType.current.getText(); }  
	 EOF 
;

// Rule NonArrayType
ruleNonArrayType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNonArrayTypeAccess().getBuiltInTypeParserRuleCall()); 
    }
    this_builtInType_0=rulebuiltInType    {
		$current.merge(this_builtInType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulebuiltInType
entryRulebuiltInType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInTypeRule()); } 
	 iv_rulebuiltInType=rulebuiltInType 
	 { $current=$iv_rulebuiltInType.current.getText(); }  
	 EOF 
;

// Rule builtInType
rulebuiltInType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBuiltInTypeAccess().getIntegralTypeParserRuleCall_0()); 
    }
    this_IntegralType_0=ruleIntegralType    {
		$current.merge(this_IntegralType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInTypeAccess().getBuiltInClassTypeParserRuleCall_1()); 
    }
    this_BuiltInClassType_1=ruleBuiltInClassType    {
		$current.merge(this_BuiltInClassType_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getBoolKeyword_2()); 
    }

    |
	kw='decimal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getDecimalKeyword_3()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getFloatKeyword_4()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getDoubleKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleBuiltInClassType
entryRuleBuiltInClassType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInClassTypeRule()); } 
	 iv_ruleBuiltInClassType=ruleBuiltInClassType 
	 { $current=$iv_ruleBuiltInClassType.current.getText(); }  
	 EOF 
;

// Rule BuiltInClassType
ruleBuiltInClassType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInClassTypeAccess().getObjectKeyword_0()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInClassTypeAccess().getStringKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEnumBody
entryRuleEnumBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumBodyRule()); } 
	 iv_ruleEnumBody=ruleEnumBody 
	 { $current=$iv_ruleEnumBody.current.getText(); }  
	 EOF 
;

// Rule EnumBody
ruleEnumBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getLeftCurlyBracketKeyword_0()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getRightCurlyBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleidentifier
entryRuleidentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleidentifier=ruleidentifier 
	 { $current=$iv_ruleidentifier.current.getText(); }  
	 EOF 
;

// Rule identifier
ruleidentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifierAccess().getNullKeyword()); 
    }

    ;





// Entry rule entryRuleEnumModifier
entryRuleEnumModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumModifierRule()); } 
	 iv_ruleEnumModifier=ruleEnumModifier 
	 { $current=$iv_ruleEnumModifier.current.getText(); }  
	 EOF 
;

// Rule EnumModifier
ruleEnumModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getPrivateKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleAttributes
entryRuleAttributes returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributesRule()); } 
	 iv_ruleAttributes=ruleAttributes 
	 { $current=$iv_ruleAttributes.current.getText(); }  
	 EOF 
;

// Rule Attributes
ruleAttributes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributesAccess().getNullKeyword()); 
    }

    ;





RULE_NEW_LINE : ('\n'|'\r');

RULE_WHITE_SPACE : (' '|'\t'|RULE_NEW_LINE)+;

RULE_SINGLE_LINE_COMMENT : '//' '/S'*;

RULE_DELIMITED_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_DECIMAL_DIGIT : '0'..'9';

RULE_INTEGER_TYPE_SUFFIX : ('U'|'u'|'L'|'l'|'UL'|'Ul'|'uL'|'ul'|'LU'|'Lu'|'lU'|'lu');

RULE_HEX_DIGIT : (RULE_DECIMAL_DIGIT|RULE_LETTER);

RULE_LETTER : ('A'..'F'|'a'..'f');


