/*
* generated by Xtext
*/
package org.xtext.example.myModel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CSharpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cInputsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInputsCompilationUnitParserRuleCall_0 = (RuleCall)cInputsAssignment.eContents().get(0);
		
		//Model:
		//	inputs+=CompilationUnit;
		public ParserRule getRule() { return rule; }

		//inputs+=CompilationUnit
		public Assignment getInputsAssignment() { return cInputsAssignment; }

		//CompilationUnit
		public RuleCall getInputsCompilationUnitParserRuleCall_0() { return cInputsCompilationUnitParserRuleCall_0; }
	}

	public class PredefinedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredefinedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCharKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDecimalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDoubleKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFloatKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIntKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLongKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cObjectKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cShortKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSbyteKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cStringKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cUintKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cUlongKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cUshortKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		
		//PredefinedType:
		//	"bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "short" | "sbyte" | "string"
		//	| "uint" | "ulong" "ushort";
		public ParserRule getRule() { return rule; }

		//"bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "short" | "sbyte" | "string" |
		//"uint" | "ulong" "ushort"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"char"
		public Keyword getCharKeyword_2() { return cCharKeyword_2; }

		//"decimal"
		public Keyword getDecimalKeyword_3() { return cDecimalKeyword_3; }

		//"double"
		public Keyword getDoubleKeyword_4() { return cDoubleKeyword_4; }

		//"float"
		public Keyword getFloatKeyword_5() { return cFloatKeyword_5; }

		//"int"
		public Keyword getIntKeyword_6() { return cIntKeyword_6; }

		//"long"
		public Keyword getLongKeyword_7() { return cLongKeyword_7; }

		//"object"
		public Keyword getObjectKeyword_8() { return cObjectKeyword_8; }

		//"short"
		public Keyword getShortKeyword_9() { return cShortKeyword_9; }

		//"sbyte"
		public Keyword getSbyteKeyword_10() { return cSbyteKeyword_10; }

		//"string"
		public Keyword getStringKeyword_11() { return cStringKeyword_11; }

		//"uint"
		public Keyword getUintKeyword_12() { return cUintKeyword_12; }

		//"ulong" "ushort"
		public Group getGroup_13() { return cGroup_13; }

		//"ulong"
		public Keyword getUlongKeyword_13_0() { return cUlongKeyword_13_0; }

		//"ushort"
		public Keyword getUshortKeyword_13_1() { return cUshortKeyword_13_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCharacterLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNullLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Literal:
		//	BooleanLiteral | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | NullLiteral;
		public ParserRule getRule() { return rule; }

		//BooleanLiteral | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | NullLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_1() { return cIntegerLiteralParserRuleCall_1; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_2() { return cRealLiteralParserRuleCall_2; }

		//CharacterLiteral
		public RuleCall getCharacterLiteralParserRuleCall_3() { return cCharacterLiteralParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_5() { return cNullLiteralParserRuleCall_5; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//NullLiteral:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IntegerLiteral:
		//	("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?;
		public ParserRule getRule() { return rule; }

		//("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?
		public Alternatives getAlternatives() { return cAlternatives; }

		//("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX
		public Group getGroup_0() { return cGroup_0; }

		//"0x" | "0X"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"0x"
		public Keyword getXKeyword_0_0_0() { return cXKeyword_0_0_0; }

		//"0X"
		public Keyword getXKeyword_0_0_1() { return cXKeyword_0_0_1; }

		//HEX_DIGIT+
		public RuleCall getHEX_DIGITTerminalRuleCall_0_1() { return cHEX_DIGITTerminalRuleCall_0_1; }

		//INTEGER_TYPE_SUFFIX
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2; }

		//INT INTEGER_TYPE_SUFFIX?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//INTEGER_TYPE_SUFFIX?
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExponentPartParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExponentPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//RealLiteral:
		//	INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX;
		public ParserRule getRule() { return rule; }

		//INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT "." INT ExponentPart? REAL_TYPE_SUFFIX?
		public Group getGroup_0() { return cGroup_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }

		//ExponentPart?
		public RuleCall getExponentPartParserRuleCall_0_3() { return cExponentPartParserRuleCall_0_3; }

		//REAL_TYPE_SUFFIX?
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_0_4() { return cREAL_TYPE_SUFFIXTerminalRuleCall_0_4; }

		//INT ExponentPart REAL_TYPE_SUFFIX?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//ExponentPart
		public RuleCall getExponentPartParserRuleCall_1_1() { return cExponentPartParserRuleCall_1_1; }

		//REAL_TYPE_SUFFIX?
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_1_2() { return cREAL_TYPE_SUFFIXTerminalRuleCall_1_2; }

		//INT REAL_TYPE_SUFFIX
		public Group getGroup_2() { return cGroup_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//REAL_TYPE_SUFFIX
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_2_1() { return cREAL_TYPE_SUFFIXTerminalRuleCall_2_1; }
	}

	public class ExponentPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExponentPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ExponentPart:
		//	"e" OPERATOR_OR_SIGN? INT | "E" OPERATOR_OR_SIGN? INT;
		public ParserRule getRule() { return rule; }

		//"e" OPERATOR_OR_SIGN? INT | "E" OPERATOR_OR_SIGN? INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"e" OPERATOR_OR_SIGN? INT
		public Group getGroup_0() { return cGroup_0; }

		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }

		//OPERATOR_OR_SIGN?
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_0_1() { return cOPERATOR_OR_SIGNTerminalRuleCall_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }

		//"E" OPERATOR_OR_SIGN? INT
		public Group getGroup_1() { return cGroup_1; }

		//"E"
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }

		//OPERATOR_OR_SIGN?
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_1_1() { return cOPERATOR_OR_SIGNTerminalRuleCall_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}

	public class CharacterLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharacterLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCharacterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CharacterLiteral:
		//	"\'" Character "\'";
		public ParserRule getRule() { return rule; }

		//"\'" Character "\'"
		public Group getGroup() { return cGroup; }

		//"\'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }

		//Character
		public RuleCall getCharacterParserRuleCall_1() { return cCharacterParserRuleCall_1; }

		//"\'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}

	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Character");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEscapeSequenceParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Character:
		//	SINGLE_CHARACTER | "\\" EscapeSequence;
		public ParserRule getRule() { return rule; }

		//SINGLE_CHARACTER | "\\" EscapeSequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//"\\" EscapeSequence
		public Group getGroup_1() { return cGroup_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_0() { return cReverseSolidusKeyword_1_0; }

		//EscapeSequence
		public RuleCall getEscapeSequenceParserRuleCall_1_1() { return cEscapeSequenceParserRuleCall_1_1; }
	}

	public class EscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapeSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cESCAPE_SEQUENCETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHexadecimalEscapeSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnicodeCharacterEscapeSequenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EscapeSequence:
		//	ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence;
		public ParserRule getRule() { return rule; }

		//ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//ESCAPE_SEQUENCE
		public RuleCall getESCAPE_SEQUENCETerminalRuleCall_0() { return cESCAPE_SEQUENCETerminalRuleCall_0; }

		//HexadecimalEscapeSequence
		public RuleCall getHexadecimalEscapeSequenceParserRuleCall_1() { return cHexadecimalEscapeSequenceParserRuleCall_1; }

		//UnicodeCharacterEscapeSequence
		public RuleCall getUnicodeCharacterEscapeSequenceParserRuleCall_2() { return cUnicodeCharacterEscapeSequenceParserRuleCall_2; }
	}

	public class UnicodeCharacterEscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnicodeCharacterEscapeSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_7 = (RuleCall)cGroup_1.eContents().get(7);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_8 = (RuleCall)cGroup_1.eContents().get(8);
		
		//UnicodeCharacterEscapeSequence:
		//	"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		//	HEX_DIGIT HEX_DIGIT;
		public ParserRule getRule() { return rule; }

		//"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		//HEX_DIGIT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup_0() { return cGroup_0; }

		//"u"
		public Keyword getUKeyword_0_0() { return cUKeyword_0_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_1() { return cHEX_DIGITTerminalRuleCall_0_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_2() { return cHEX_DIGITTerminalRuleCall_0_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_3() { return cHEX_DIGITTerminalRuleCall_0_3; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_4() { return cHEX_DIGITTerminalRuleCall_0_4; }

		//"U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup_1() { return cGroup_1; }

		//"U"
		public Keyword getUKeyword_1_0() { return cUKeyword_1_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_1() { return cHEX_DIGITTerminalRuleCall_1_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_2() { return cHEX_DIGITTerminalRuleCall_1_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_3() { return cHEX_DIGITTerminalRuleCall_1_3; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_4() { return cHEX_DIGITTerminalRuleCall_1_4; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_5() { return cHEX_DIGITTerminalRuleCall_1_5; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_6() { return cHEX_DIGITTerminalRuleCall_1_6; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_7() { return cHEX_DIGITTerminalRuleCall_1_7; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_8() { return cHEX_DIGITTerminalRuleCall_1_8; }
	}

	public class HexadecimalEscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexadecimalEscapeSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//HexadecimalEscapeSequence:
		//	"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?;
		public ParserRule getRule() { return rule; }

		//"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
		public Group getGroup() { return cGroup; }

		//"x"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1() { return cHEX_DIGITTerminalRuleCall_1; }

		//(HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
		public Group getGroup_2() { return cGroup_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2_0() { return cHEX_DIGITTerminalRuleCall_2_0; }

		//(HEX_DIGIT HEX_DIGIT?)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2_1_0() { return cHEX_DIGITTerminalRuleCall_2_1_0; }

		//HEX_DIGIT?
		public RuleCall getHEX_DIGITTerminalRuleCall_2_1_1() { return cHEX_DIGITTerminalRuleCall_2_1_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRegularStringCharacterParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVerbatimStringCharacterParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//StringLiteral:
		//	"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\"";
		public ParserRule getRule() { return rule; }

		//"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\""
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\"" RegularStringCharacter* "\""
		public Group getGroup_0() { return cGroup_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_0_0() { return cQuotationMarkKeyword_0_0; }

		//RegularStringCharacter*
		public RuleCall getRegularStringCharacterParserRuleCall_0_1() { return cRegularStringCharacterParserRuleCall_0_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_0_2() { return cQuotationMarkKeyword_0_2; }

		//"@" VerbatimStringCharacter* "\""
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//VerbatimStringCharacter*
		public RuleCall getVerbatimStringCharacterParserRuleCall_1_1() { return cVerbatimStringCharacterParserRuleCall_1_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_1_2() { return cQuotationMarkKeyword_1_2; }
	}

	public class VerbatimStringCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerbatimStringCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VerbatimStringCharacter: //Any character except "
		//	SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE;
		public ParserRule getRule() { return rule; }

		////Any character except "
		//SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		////Any character except "
		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//QUOTE_ESCAPE_SEQUENCE
		public RuleCall getQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1() { return cQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1; }
	}

	public class RegularStringCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularStringCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cESCAPE_SEQUENCETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//RegularStringCharacter: //Any character except " (U+0022), \ (U+005C), and new-line-character
		//	SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE;
		public ParserRule getRule() { return rule; }

		////Any character except " (U+0022), \ (U+005C), and new-line-character
		//SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		////Any character except " (U+0022), \ (U+005C), and new-line-character
		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//"\\" ESCAPE_SEQUENCE
		public Group getGroup_1() { return cGroup_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_0() { return cReverseSolidusKeyword_1_0; }

		//ESCAPE_SEQUENCE
		public RuleCall getESCAPE_SEQUENCETerminalRuleCall_1_1() { return cESCAPE_SEQUENCETerminalRuleCall_1_1; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cML_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Comment:
		//	SL_COMMENT | ML_COMMENT;
		public ParserRule getRule() { return rule; }

		//SL_COMMENT | ML_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_0() { return cSL_COMMENTTerminalRuleCall_0; }

		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_1() { return cML_COMMENTTerminalRuleCall_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIdentifierAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cAvailableIdentifierParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Identifier:
		//	{Identifier} AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER;
		public ParserRule getRule() { return rule; }

		//{Identifier} AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Identifier} AvailableIdentifier
		public Group getGroup_0() { return cGroup_0; }

		//{Identifier}
		public Action getIdentifierAction_0_0() { return cIdentifierAction_0_0; }

		//AvailableIdentifier
		public RuleCall getAvailableIdentifierParserRuleCall_0_1() { return cAvailableIdentifierParserRuleCall_0_1; }

		//"@" IDENTIFIER_START_CHARACTER
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//IDENTIFIER_START_CHARACTER
		public RuleCall getIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1() { return cIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1; }
	}

	public class AvailableIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AvailableIdentifier");
		private final RuleCall cIdentifierOrKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AvailableIdentifier:
		//	IdentifierOrKeyword;
		public ParserRule getRule() { return rule; }

		//IdentifierOrKeyword
		public RuleCall getIdentifierOrKeywordParserRuleCall() { return cIdentifierOrKeywordParserRuleCall; }
	}

	public class IdentifierOrKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierOrKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIER_START_CHARACTERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierPartCharacterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IdentifierOrKeyword:
		//	IDENTIFIER_START_CHARACTER IdentifierPartCharacter*;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER_START_CHARACTER IdentifierPartCharacter*
		public Group getGroup() { return cGroup; }

		//IDENTIFIER_START_CHARACTER
		public RuleCall getIDENTIFIER_START_CHARACTERTerminalRuleCall_0() { return cIDENTIFIER_START_CHARACTERTerminalRuleCall_0; }

		//IdentifierPartCharacter*
		public RuleCall getIdentifierPartCharacterParserRuleCall_1() { return cIdentifierPartCharacterParserRuleCall_1; }
	}

	public class IdentifierPartCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierPartCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IdentifierPartCharacter:
		//	LETTER | / *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT;
		public ParserRule getRule() { return rule; }

		//LETTER | / *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }

		/// *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUsingDirectivesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUsingDirectivesUsingDirectiveParserRuleCall_0_0 = (RuleCall)cUsingDirectivesAssignment_0.eContents().get(0);
		private final Assignment cGlobalAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGlobalAttGlobalAttributesParserRuleCall_1_0 = (RuleCall)cGlobalAttAssignment_1.eContents().get(0);
		private final Assignment cNameSpacesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSpacesNamespaceMemberDeclarationParserRuleCall_2_0 = (RuleCall)cNameSpacesAssignment_2.eContents().get(0);
		
		////FIM LEXICA 
		////SINTAXE
		//CompilationUnit:
		//	usingDirectives+=UsingDirective* globalAtt=GlobalAttributes nameSpaces+=NamespaceMemberDeclaration*;
		public ParserRule getRule() { return rule; }

		//usingDirectives+=UsingDirective* globalAtt=GlobalAttributes nameSpaces+=NamespaceMemberDeclaration*
		public Group getGroup() { return cGroup; }

		//usingDirectives+=UsingDirective*
		public Assignment getUsingDirectivesAssignment_0() { return cUsingDirectivesAssignment_0; }

		//UsingDirective
		public RuleCall getUsingDirectivesUsingDirectiveParserRuleCall_0_0() { return cUsingDirectivesUsingDirectiveParserRuleCall_0_0; }

		//globalAtt=GlobalAttributes
		public Assignment getGlobalAttAssignment_1() { return cGlobalAttAssignment_1; }

		//GlobalAttributes
		public RuleCall getGlobalAttGlobalAttributesParserRuleCall_1_0() { return cGlobalAttGlobalAttributesParserRuleCall_1_0; }

		//nameSpaces+=NamespaceMemberDeclaration*
		public Assignment getNameSpacesAssignment_2() { return cNameSpacesAssignment_2; }

		//NamespaceMemberDeclaration
		public RuleCall getNameSpacesNamespaceMemberDeclarationParserRuleCall_2_0() { return cNameSpacesNamespaceMemberDeclarationParserRuleCall_2_0; }
	}

	public class NamespaceMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNamespaceMemberDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameDeclaretionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameDeclaretionNamespaceDeclarationParserRuleCall_0_1_0 = (RuleCall)cNameDeclaretionAssignment_0_1.eContents().get(0);
		private final Assignment cTypeDeclarationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDeclarationTypeDeclarationParserRuleCall_1_0 = (RuleCall)cTypeDeclarationAssignment_1.eContents().get(0);
		
		//NamespaceMemberDeclaration:
		//	{NamespaceMemberDeclaration} nameDeclaretion=NamespaceDeclaration | typeDeclaration=TypeDeclaration;
		public ParserRule getRule() { return rule; }

		//{NamespaceMemberDeclaration} nameDeclaretion=NamespaceDeclaration | typeDeclaration=TypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NamespaceMemberDeclaration} nameDeclaretion=NamespaceDeclaration
		public Group getGroup_0() { return cGroup_0; }

		//{NamespaceMemberDeclaration}
		public Action getNamespaceMemberDeclarationAction_0_0() { return cNamespaceMemberDeclarationAction_0_0; }

		//nameDeclaretion=NamespaceDeclaration
		public Assignment getNameDeclaretionAssignment_0_1() { return cNameDeclaretionAssignment_0_1; }

		//NamespaceDeclaration
		public RuleCall getNameDeclaretionNamespaceDeclarationParserRuleCall_0_1_0() { return cNameDeclaretionNamespaceDeclarationParserRuleCall_0_1_0; }

		//typeDeclaration=TypeDeclaration
		public Assignment getTypeDeclarationAssignment_1() { return cTypeDeclarationAssignment_1; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationTypeDeclarationParserRuleCall_1_0() { return cTypeDeclarationTypeDeclarationParserRuleCall_1_0; }
	}

	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQIdQualifiedIdentifierParserRuleCall_1_0 = (RuleCall)cQIdAssignment_1.eContents().get(0);
		private final Assignment cNameBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameBodyNamespaceBodyParserRuleCall_2_0 = (RuleCall)cNameBodyAssignment_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//NamespaceDeclaration:
		//	"namespace" qId=QualifiedIdentifier nameBody=NamespaceBody SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//"namespace" qId=QualifiedIdentifier nameBody=NamespaceBody SEMICOLON?
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//qId=QualifiedIdentifier
		public Assignment getQIdAssignment_1() { return cQIdAssignment_1; }

		//QualifiedIdentifier
		public RuleCall getQIdQualifiedIdentifierParserRuleCall_1_0() { return cQIdQualifiedIdentifierParserRuleCall_1_0; }

		//nameBody=NamespaceBody
		public Assignment getNameBodyAssignment_2() { return cNameBodyAssignment_2; }

		//NamespaceBody
		public RuleCall getNameBodyNamespaceBodyParserRuleCall_2_0() { return cNameBodyNamespaceBodyParserRuleCall_2_0; }

		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class NamespaceBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamespaceBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUsingDirectivesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsingDirectivesUsingDirectiveParserRuleCall_2_0 = (RuleCall)cUsingDirectivesAssignment_2.eContents().get(0);
		private final Assignment cNameSpacesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSpacesNamespaceMemberDeclarationParserRuleCall_3_0 = (RuleCall)cNameSpacesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NamespaceBody:
		//	{NamespaceBody} "{" usingDirectives+=UsingDirective* nameSpaces+=NamespaceMemberDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//{NamespaceBody} "{" usingDirectives+=UsingDirective* nameSpaces+=NamespaceMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//{NamespaceBody}
		public Action getNamespaceBodyAction_0() { return cNamespaceBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//usingDirectives+=UsingDirective*
		public Assignment getUsingDirectivesAssignment_2() { return cUsingDirectivesAssignment_2; }

		//UsingDirective
		public RuleCall getUsingDirectivesUsingDirectiveParserRuleCall_2_0() { return cUsingDirectivesUsingDirectiveParserRuleCall_2_0; }

		//nameSpaces+=NamespaceMemberDeclaration*
		public Assignment getNameSpacesAssignment_3() { return cNameSpacesAssignment_3; }

		//NamespaceMemberDeclaration
		public RuleCall getNameSpacesNamespaceMemberDeclarationParserRuleCall_3_0() { return cNameSpacesNamespaceMemberDeclarationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClassDeclarationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cClassDeclarationClassDeclarationParserRuleCall_1_0_0 = (RuleCall)cClassDeclarationAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cModAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cModModifierParserRuleCall_1_1_0_0 = (RuleCall)cModAssignment_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cStructDeclarationAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cStructDeclarationStructDeclarationParserRuleCall_1_1_1_0_0 = (RuleCall)cStructDeclarationAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cInterfaceDeclarationAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cInterfaceDeclarationInterfaceDeclarationParserRuleCall_1_1_1_1_0 = (RuleCall)cInterfaceDeclarationAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cEnumDeclarationAssignment_1_1_1_2 = (Assignment)cAlternatives_1_1_1.eContents().get(2);
		private final RuleCall cEnumDeclarationEnumDeclarationParserRuleCall_1_1_1_2_0 = (RuleCall)cEnumDeclarationAssignment_1_1_1_2.eContents().get(0);
		private final Assignment cDelegateDeclarationAssignment_1_1_1_3 = (Assignment)cAlternatives_1_1_1.eContents().get(3);
		private final RuleCall cDelegateDeclarationDelegateDeclarationParserRuleCall_1_1_1_3_0 = (RuleCall)cDelegateDeclarationAssignment_1_1_1_3.eContents().get(0);
		
		//TypeDeclaration:
		//	{TypeDeclaration} (classDeclaration=ClassDeclaration | mod+=Modifier* (structDeclaration=StructDeclaration |
		//	interfaceDeclaration=InterfaceDeclaration | enumDeclaration=EnumDeclaration |
		//	delegateDeclaration=DelegateDeclaration));
		public ParserRule getRule() { return rule; }

		//{TypeDeclaration} (classDeclaration=ClassDeclaration | mod+=Modifier* (structDeclaration=StructDeclaration |
		//interfaceDeclaration=InterfaceDeclaration | enumDeclaration=EnumDeclaration |
		//delegateDeclaration=DelegateDeclaration))
		public Group getGroup() { return cGroup; }

		//{TypeDeclaration}
		public Action getTypeDeclarationAction_0() { return cTypeDeclarationAction_0; }

		//classDeclaration=ClassDeclaration | mod+=Modifier* (structDeclaration=StructDeclaration |
		//interfaceDeclaration=InterfaceDeclaration | enumDeclaration=EnumDeclaration | delegateDeclaration=DelegateDeclaration)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//classDeclaration=ClassDeclaration
		public Assignment getClassDeclarationAssignment_1_0() { return cClassDeclarationAssignment_1_0; }

		//ClassDeclaration
		public RuleCall getClassDeclarationClassDeclarationParserRuleCall_1_0_0() { return cClassDeclarationClassDeclarationParserRuleCall_1_0_0; }

		//mod+=Modifier* (structDeclaration=StructDeclaration | interfaceDeclaration=InterfaceDeclaration |
		//enumDeclaration=EnumDeclaration | delegateDeclaration=DelegateDeclaration)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//mod+=Modifier*
		public Assignment getModAssignment_1_1_0() { return cModAssignment_1_1_0; }

		//Modifier
		public RuleCall getModModifierParserRuleCall_1_1_0_0() { return cModModifierParserRuleCall_1_1_0_0; }

		//structDeclaration=StructDeclaration | interfaceDeclaration=InterfaceDeclaration | enumDeclaration=EnumDeclaration |
		//delegateDeclaration=DelegateDeclaration
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//structDeclaration=StructDeclaration
		public Assignment getStructDeclarationAssignment_1_1_1_0() { return cStructDeclarationAssignment_1_1_1_0; }

		//StructDeclaration
		public RuleCall getStructDeclarationStructDeclarationParserRuleCall_1_1_1_0_0() { return cStructDeclarationStructDeclarationParserRuleCall_1_1_1_0_0; }

		//interfaceDeclaration=InterfaceDeclaration
		public Assignment getInterfaceDeclarationAssignment_1_1_1_1() { return cInterfaceDeclarationAssignment_1_1_1_1; }

		//InterfaceDeclaration
		public RuleCall getInterfaceDeclarationInterfaceDeclarationParserRuleCall_1_1_1_1_0() { return cInterfaceDeclarationInterfaceDeclarationParserRuleCall_1_1_1_1_0; }

		//enumDeclaration=EnumDeclaration
		public Assignment getEnumDeclarationAssignment_1_1_1_2() { return cEnumDeclarationAssignment_1_1_1_2; }

		//EnumDeclaration
		public RuleCall getEnumDeclarationEnumDeclarationParserRuleCall_1_1_1_2_0() { return cEnumDeclarationEnumDeclarationParserRuleCall_1_1_1_2_0; }

		//delegateDeclaration=DelegateDeclaration
		public Assignment getDelegateDeclarationAssignment_1_1_1_3() { return cDelegateDeclarationAssignment_1_1_1_3; }

		//DelegateDeclaration
		public RuleCall getDelegateDeclarationDelegateDeclarationParserRuleCall_1_1_1_3_0() { return cDelegateDeclarationDelegateDeclarationParserRuleCall_1_1_1_3_0; }
	}

	public class DelegateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelegateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelegateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeOrVoidParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFormalParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFormalParametersFormalParameterListParserRuleCall_4_0 = (RuleCall)cFormalParametersAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cSEMICOLONTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//DelegateDeclaration:
		//	"delegate" TypeOrVoid name=Identifier "(" formalParameters=FormalParameterList? ")" SEMICOLON;
		public ParserRule getRule() { return rule; }

		//"delegate" TypeOrVoid name=Identifier "(" formalParameters=FormalParameterList? ")" SEMICOLON
		public Group getGroup() { return cGroup; }

		//"delegate"
		public Keyword getDelegateKeyword_0() { return cDelegateKeyword_0; }

		//TypeOrVoid
		public RuleCall getTypeOrVoidParserRuleCall_1() { return cTypeOrVoidParserRuleCall_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//formalParameters=FormalParameterList?
		public Assignment getFormalParametersAssignment_4() { return cFormalParametersAssignment_4; }

		//FormalParameterList
		public RuleCall getFormalParametersFormalParameterListParserRuleCall_4_0() { return cFormalParametersFormalParameterListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_6() { return cSEMICOLONTerminalRuleCall_6; }
	}

	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIntTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntTypeIntegralTypeParserRuleCall_2_1_0 = (RuleCall)cIntTypeAssignment_2_1.eContents().get(0);
		private final Assignment cEnumBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumBodyEnumBodyParserRuleCall_3_0 = (RuleCall)cEnumBodyAssignment_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//EnumDeclaration:
		//	"enum" name=Identifier (":" intType=IntegralType)? enumBody=EnumBody SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//"enum" name=Identifier (":" intType=IntegralType)? enumBody=EnumBody SEMICOLON?
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//(":" intType=IntegralType)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//intType=IntegralType
		public Assignment getIntTypeAssignment_2_1() { return cIntTypeAssignment_2_1; }

		//IntegralType
		public RuleCall getIntTypeIntegralTypeParserRuleCall_2_1_0() { return cIntTypeIntegralTypeParserRuleCall_2_1_0; }

		//enumBody=EnumBody
		public Assignment getEnumBodyAssignment_3() { return cEnumBodyAssignment_3; }

		//EnumBody
		public RuleCall getEnumBodyEnumBodyParserRuleCall_3_0() { return cEnumBodyEnumBodyParserRuleCall_3_0; }

		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
	}

	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cQIdentifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQIdentifiersQualifiedIdentifierListParserRuleCall_2_1_0 = (RuleCall)cQIdentifiersAssignment_2_1.eContents().get(0);
		private final Assignment cInterBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInterBodyInterfaceBodyParserRuleCall_3_0 = (RuleCall)cInterBodyAssignment_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//InterfaceDeclaration:
		//	"struct" name=Identifier (":" qIdentifiers=QualifiedIdentifierList)? interBody=InterfaceBody? SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//"struct" name=Identifier (":" qIdentifiers=QualifiedIdentifierList)? interBody=InterfaceBody? SEMICOLON?
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//(":" qIdentifiers=QualifiedIdentifierList)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//qIdentifiers=QualifiedIdentifierList
		public Assignment getQIdentifiersAssignment_2_1() { return cQIdentifiersAssignment_2_1; }

		//QualifiedIdentifierList
		public RuleCall getQIdentifiersQualifiedIdentifierListParserRuleCall_2_1_0() { return cQIdentifiersQualifiedIdentifierListParserRuleCall_2_1_0; }

		//interBody=InterfaceBody?
		public Assignment getInterBodyAssignment_3() { return cInterBodyAssignment_3; }

		//InterfaceBody
		public RuleCall getInterBodyInterfaceBodyParserRuleCall_3_0() { return cInterBodyInterfaceBodyParserRuleCall_3_0; }

		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Modifier:
		//	"new" | "public" | "protected" | "internal" | "private";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class InterfaceBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInterfaceMemberDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0 = (RuleCall)cInterfaceMemberDeclarationsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InterfaceBody:
		//	{InterfaceBody} "{" interfaceMemberDeclarations+=InterfaceMemberDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//{InterfaceBody} "{" interfaceMemberDeclarations+=InterfaceMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//{InterfaceBody}
		public Action getInterfaceBodyAction_0() { return cInterfaceBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//interfaceMemberDeclarations+=InterfaceMemberDeclaration*
		public Assignment getInterfaceMemberDeclarationsAssignment_2() { return cInterfaceMemberDeclarationsAssignment_2; }

		//InterfaceMemberDeclaration
		public RuleCall getInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0() { return cInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class InterfaceMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceMemberDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIntermethodDeclarationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIntermethodDeclarationInterfaceMethodDeclarationParserRuleCall_2_0_0 = (RuleCall)cIntermethodDeclarationAssignment_2_0.eContents().get(0);
		private final Assignment cInterEventDeclarationAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInterEventDeclarationInterfaceEventDeclarationParserRuleCall_2_1_0 = (RuleCall)cInterEventDeclarationAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cType1Assignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cType1TypeParserRuleCall_2_2_0_0 = (RuleCall)cType1Assignment_2_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1 = (Alternatives)cGroup_2_2.eContents().get(1);
		private final Assignment cInterfaceIndexerDeclaAssignment_2_2_1_0 = (Assignment)cAlternatives_2_2_1.eContents().get(0);
		private final RuleCall cInterfaceIndexerDeclaInterfaceIndexerDeclarationParserRuleCall_2_2_1_0_0 = (RuleCall)cInterfaceIndexerDeclaAssignment_2_2_1_0.eContents().get(0);
		private final Assignment cInterPropertyAssignment_2_2_1_1 = (Assignment)cAlternatives_2_2_1.eContents().get(1);
		private final RuleCall cInterPropertyInterfacePropertyDeclarationParserRuleCall_2_2_1_1_0 = (RuleCall)cInterPropertyAssignment_2_2_1_1.eContents().get(0);
		
		//InterfaceMemberDeclaration:
		//	{InterfaceMemberDeclaration} "new"? (intermethodDeclaration=InterfaceMethodDeclaration |
		//	interEventDeclaration=InterfaceEventDeclaration | type1=Type (interfaceIndexerDecla=InterfaceIndexerDeclaration |
		//	interProperty=InterfacePropertyDeclaration));
		public ParserRule getRule() { return rule; }

		//{InterfaceMemberDeclaration} "new"? (intermethodDeclaration=InterfaceMethodDeclaration |
		//interEventDeclaration=InterfaceEventDeclaration | type1=Type (interfaceIndexerDecla=InterfaceIndexerDeclaration |
		//interProperty=InterfacePropertyDeclaration))
		public Group getGroup() { return cGroup; }

		//{InterfaceMemberDeclaration}
		public Action getInterfaceMemberDeclarationAction_0() { return cInterfaceMemberDeclarationAction_0; }

		//"new"?
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//intermethodDeclaration=InterfaceMethodDeclaration | interEventDeclaration=InterfaceEventDeclaration | type1=Type
		//(interfaceIndexerDecla=InterfaceIndexerDeclaration | interProperty=InterfacePropertyDeclaration)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//intermethodDeclaration=InterfaceMethodDeclaration
		public Assignment getIntermethodDeclarationAssignment_2_0() { return cIntermethodDeclarationAssignment_2_0; }

		//InterfaceMethodDeclaration
		public RuleCall getIntermethodDeclarationInterfaceMethodDeclarationParserRuleCall_2_0_0() { return cIntermethodDeclarationInterfaceMethodDeclarationParserRuleCall_2_0_0; }

		//interEventDeclaration=InterfaceEventDeclaration
		public Assignment getInterEventDeclarationAssignment_2_1() { return cInterEventDeclarationAssignment_2_1; }

		//InterfaceEventDeclaration
		public RuleCall getInterEventDeclarationInterfaceEventDeclarationParserRuleCall_2_1_0() { return cInterEventDeclarationInterfaceEventDeclarationParserRuleCall_2_1_0; }

		//type1=Type (interfaceIndexerDecla=InterfaceIndexerDeclaration | interProperty=InterfacePropertyDeclaration)
		public Group getGroup_2_2() { return cGroup_2_2; }

		//type1=Type
		public Assignment getType1Assignment_2_2_0() { return cType1Assignment_2_2_0; }

		//Type
		public RuleCall getType1TypeParserRuleCall_2_2_0_0() { return cType1TypeParserRuleCall_2_2_0_0; }

		//interfaceIndexerDecla=InterfaceIndexerDeclaration | interProperty=InterfacePropertyDeclaration
		public Alternatives getAlternatives_2_2_1() { return cAlternatives_2_2_1; }

		//interfaceIndexerDecla=InterfaceIndexerDeclaration
		public Assignment getInterfaceIndexerDeclaAssignment_2_2_1_0() { return cInterfaceIndexerDeclaAssignment_2_2_1_0; }

		//InterfaceIndexerDeclaration
		public RuleCall getInterfaceIndexerDeclaInterfaceIndexerDeclarationParserRuleCall_2_2_1_0_0() { return cInterfaceIndexerDeclaInterfaceIndexerDeclarationParserRuleCall_2_2_1_0_0; }

		//interProperty=InterfacePropertyDeclaration
		public Assignment getInterPropertyAssignment_2_2_1_1() { return cInterPropertyAssignment_2_2_1_1; }

		//InterfacePropertyDeclaration
		public RuleCall getInterPropertyInterfacePropertyDeclarationParserRuleCall_2_2_1_1_0() { return cInterPropertyInterfacePropertyDeclarationParserRuleCall_2_2_1_1_0; }
	}

	public class InterfaceIndexerDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceIndexerDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceIndexerDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListFormalParameterListParserRuleCall_3_0 = (RuleCall)cParameterListAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInterAccessorsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInterAccessorsInterfaceAccessorsParserRuleCall_6_0 = (RuleCall)cInterAccessorsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InterfaceIndexerDeclaration:
		//	{InterfaceIndexerDeclaration} "this" "[" parameterList=FormalParameterList "]" "{" interAccessors=InterfaceAccessors
		//	"}";
		public ParserRule getRule() { return rule; }

		//{InterfaceIndexerDeclaration} "this" "[" parameterList=FormalParameterList "]" "{" interAccessors=InterfaceAccessors "}"
		public Group getGroup() { return cGroup; }

		//{InterfaceIndexerDeclaration}
		public Action getInterfaceIndexerDeclarationAction_0() { return cInterfaceIndexerDeclarationAction_0; }

		//"this"
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//parameterList=FormalParameterList
		public Assignment getParameterListAssignment_3() { return cParameterListAssignment_3; }

		//FormalParameterList
		public RuleCall getParameterListFormalParameterListParserRuleCall_3_0() { return cParameterListFormalParameterListParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//interAccessors=InterfaceAccessors
		public Assignment getInterAccessorsAssignment_6() { return cInterAccessorsAssignment_6; }

		//InterfaceAccessors
		public RuleCall getInterAccessorsInterfaceAccessorsParserRuleCall_6_0() { return cInterAccessorsInterfaceAccessorsParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class InterfaceEventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceEventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceEventDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//InterfaceEventDeclaration:
		//	{InterfaceEventDeclaration} "event" type=Type name=Identifier SEMICOLON;
		public ParserRule getRule() { return rule; }

		//{InterfaceEventDeclaration} "event" type=Type name=Identifier SEMICOLON
		public Group getGroup() { return cGroup; }

		//{InterfaceEventDeclaration}
		public Action getInterfaceEventDeclarationAction_0() { return cInterfaceEventDeclarationAction_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//name=Identifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_3_0() { return cNameIdentifierParserRuleCall_3_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
	}

	public class InterfacePropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfacePropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfacePropertyDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterAccessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInterAccessorInterfaceAccessorsParserRuleCall_3_0 = (RuleCall)cInterAccessorAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfacePropertyDeclaration:
		//	{InterfacePropertyDeclaration} name=Identifier "{" interAccessor=InterfaceAccessors "}";
		public ParserRule getRule() { return rule; }

		//{InterfacePropertyDeclaration} name=Identifier "{" interAccessor=InterfaceAccessors "}"
		public Group getGroup() { return cGroup; }

		//{InterfacePropertyDeclaration}
		public Action getInterfacePropertyDeclarationAction_0() { return cInterfacePropertyDeclarationAction_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//interAccessor=InterfaceAccessors
		public Assignment getInterAccessorAssignment_3() { return cInterAccessorAssignment_3; }

		//InterfaceAccessors
		public RuleCall getInterAccessorInterfaceAccessorsParserRuleCall_3_0() { return cInterAccessorInterfaceAccessorsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InterfaceAccessorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceAccessors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttAttributesParserRuleCall_0_0 = (RuleCall)cAttAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGetKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Assignment cNewAttAssignment_1_0_2_0 = (Assignment)cGroup_1_0_2.eContents().get(0);
		private final RuleCall cNewAttAttributesParserRuleCall_1_0_2_0_0 = (RuleCall)cNewAttAssignment_1_0_2_0.eContents().get(0);
		private final Keyword cSetKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_2_2 = (RuleCall)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSetKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Assignment cOtherAttAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final RuleCall cOtherAttAttributesParserRuleCall_1_1_2_0_0 = (RuleCall)cOtherAttAssignment_1_1_2_0.eContents().get(0);
		private final Keyword cGetKeyword_1_1_2_1 = (Keyword)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_2_2 = (RuleCall)cGroup_1_1_2.eContents().get(2);
		
		//InterfaceAccessors:
		//	att=Attributes ("get" SEMICOLON (newAtt=Attributes "set" SEMICOLON)? | "set" SEMICOLON (otherAtt=Attributes "get"
		//	SEMICOLON)?);
		public ParserRule getRule() { return rule; }

		//att=Attributes ("get" SEMICOLON (newAtt=Attributes "set" SEMICOLON)? | "set" SEMICOLON (otherAtt=Attributes "get"
		//SEMICOLON)?)
		public Group getGroup() { return cGroup; }

		//att=Attributes
		public Assignment getAttAssignment_0() { return cAttAssignment_0; }

		//Attributes
		public RuleCall getAttAttributesParserRuleCall_0_0() { return cAttAttributesParserRuleCall_0_0; }

		//"get" SEMICOLON (newAtt=Attributes "set" SEMICOLON)? | "set" SEMICOLON (otherAtt=Attributes "get" SEMICOLON)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"get" SEMICOLON (newAtt=Attributes "set" SEMICOLON)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"get"
		public Keyword getGetKeyword_1_0_0() { return cGetKeyword_1_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_1() { return cSEMICOLONTerminalRuleCall_1_0_1; }

		//(newAtt=Attributes "set" SEMICOLON)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//newAtt=Attributes
		public Assignment getNewAttAssignment_1_0_2_0() { return cNewAttAssignment_1_0_2_0; }

		//Attributes
		public RuleCall getNewAttAttributesParserRuleCall_1_0_2_0_0() { return cNewAttAttributesParserRuleCall_1_0_2_0_0; }

		//"set"
		public Keyword getSetKeyword_1_0_2_1() { return cSetKeyword_1_0_2_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_2_2() { return cSEMICOLONTerminalRuleCall_1_0_2_2; }

		//"set" SEMICOLON (otherAtt=Attributes "get" SEMICOLON)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"set"
		public Keyword getSetKeyword_1_1_0() { return cSetKeyword_1_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_1() { return cSEMICOLONTerminalRuleCall_1_1_1; }

		//(otherAtt=Attributes "get" SEMICOLON)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//otherAtt=Attributes
		public Assignment getOtherAttAssignment_1_1_2_0() { return cOtherAttAssignment_1_1_2_0; }

		//Attributes
		public RuleCall getOtherAttAttributesParserRuleCall_1_1_2_0_0() { return cOtherAttAttributesParserRuleCall_1_1_2_0_0; }

		//"get"
		public Keyword getGetKeyword_1_1_2_1() { return cGetKeyword_1_1_2_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_2_2() { return cSEMICOLONTerminalRuleCall_1_1_2_2; }
	}

	public class InterfaceMethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeOrVoidParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListFormalParameterListParserRuleCall_3_0 = (RuleCall)cParameterListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//InterfaceMethodDeclaration:
		//	type=TypeOrVoid name=Identifier "(" parameterList=FormalParameterList? ")" SEMICOLON;
		public ParserRule getRule() { return rule; }

		//type=TypeOrVoid name=Identifier "(" parameterList=FormalParameterList? ")" SEMICOLON
		public Group getGroup() { return cGroup; }

		//type=TypeOrVoid
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeOrVoid
		public RuleCall getTypeTypeOrVoidParserRuleCall_0_0() { return cTypeTypeOrVoidParserRuleCall_0_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameterList=FormalParameterList?
		public Assignment getParameterListAssignment_3() { return cParameterListAssignment_3; }

		//FormalParameterList
		public RuleCall getParameterListFormalParameterListParserRuleCall_3_0() { return cParameterListFormalParameterListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5() { return cSEMICOLONTerminalRuleCall_5; }
	}

	public class StructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cQualIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQualIdQualifiedIdentifierListParserRuleCall_2_1_0 = (RuleCall)cQualIdAssignment_2_1.eContents().get(0);
		private final Assignment cStructbodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStructbodyStructBodyParserRuleCall_3_0 = (RuleCall)cStructbodyAssignment_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//StructDeclaration:
		//	"struct" name=Identifier (":" qualId=QualifiedIdentifierList)? structbody=StructBody SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//"struct" name=Identifier (":" qualId=QualifiedIdentifierList)? structbody=StructBody SEMICOLON?
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//(":" qualId=QualifiedIdentifierList)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//qualId=QualifiedIdentifierList
		public Assignment getQualIdAssignment_2_1() { return cQualIdAssignment_2_1; }

		//QualifiedIdentifierList
		public RuleCall getQualIdQualifiedIdentifierListParserRuleCall_2_1_0() { return cQualIdQualifiedIdentifierListParserRuleCall_2_1_0; }

		//structbody=StructBody
		public Assignment getStructbodyAssignment_3() { return cStructbodyAssignment_3; }

		//StructBody
		public RuleCall getStructbodyStructBodyParserRuleCall_3_0() { return cStructbodyStructBodyParserRuleCall_3_0; }

		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
	}

	public class StructBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructMemberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructMemberStructMemberDeclarationParserRuleCall_1_0 = (RuleCall)cStructMemberAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StructBody:
		//	"{" structMember+=StructMemberDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"{" structMember+=StructMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//structMember+=StructMemberDeclaration*
		public Assignment getStructMemberAssignment_1() { return cStructMemberAssignment_1; }

		//StructMemberDeclaration
		public RuleCall getStructMemberStructMemberDeclarationParserRuleCall_1_0() { return cStructMemberStructMemberDeclarationParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class StructMemberDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructMemberDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStructMemberDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStructMember2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructMember2StructMemberDeclarations2ParserRuleCall_1_0 = (RuleCall)cStructMember2Assignment_1.eContents().get(0);
		
		//StructMemberDeclarations:
		//	StructMemberDeclaration structMember2+=StructMemberDeclarations2*;
		public ParserRule getRule() { return rule; }

		//StructMemberDeclaration structMember2+=StructMemberDeclarations2*
		public Group getGroup() { return cGroup; }

		//StructMemberDeclaration
		public RuleCall getStructMemberDeclarationParserRuleCall_0() { return cStructMemberDeclarationParserRuleCall_0; }

		//structMember2+=StructMemberDeclarations2*
		public Assignment getStructMember2Assignment_1() { return cStructMember2Assignment_1; }

		//StructMemberDeclarations2
		public RuleCall getStructMember2StructMemberDeclarations2ParserRuleCall_1_0() { return cStructMember2StructMemberDeclarations2ParserRuleCall_1_0; }
	}

	public class StructMemberDeclarations2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructMemberDeclarations2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStructMemberDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStructMember2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructMember2StructMemberDeclarations2ParserRuleCall_1_0 = (RuleCall)cStructMember2Assignment_1.eContents().get(0);
		
		//StructMemberDeclarations2:
		//	StructMemberDeclaration structMember2+=StructMemberDeclarations2;
		public ParserRule getRule() { return rule; }

		//StructMemberDeclaration structMember2+=StructMemberDeclarations2
		public Group getGroup() { return cGroup; }

		//StructMemberDeclaration
		public RuleCall getStructMemberDeclarationParserRuleCall_0() { return cStructMemberDeclarationParserRuleCall_0; }

		//structMember2+=StructMemberDeclarations2
		public Assignment getStructMember2Assignment_1() { return cStructMember2Assignment_1; }

		//StructMemberDeclarations2
		public RuleCall getStructMember2StructMemberDeclarations2ParserRuleCall_1_0() { return cStructMember2StructMemberDeclarations2ParserRuleCall_1_0; }
	}

	public class StructMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEventDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIndexerDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOperatorDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cConstructorDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStaticConstructorDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTypeDeclarationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//StructMemberDeclaration:
		//	ConstantDeclaration | FieldDeclaration | MethodDeclaration | PropertyDeclaration | EventDeclaration |
		//	IndexerDeclaration | OperatorDeclaration | ConstructorDeclaration | StaticConstructorDeclaration | TypeDeclaration;
		public ParserRule getRule() { return rule; }

		//ConstantDeclaration | FieldDeclaration | MethodDeclaration | PropertyDeclaration | EventDeclaration | IndexerDeclaration
		//| OperatorDeclaration | ConstructorDeclaration | StaticConstructorDeclaration | TypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstantDeclaration
		public RuleCall getConstantDeclarationParserRuleCall_0() { return cConstantDeclarationParserRuleCall_0; }

		//FieldDeclaration
		public RuleCall getFieldDeclarationParserRuleCall_1() { return cFieldDeclarationParserRuleCall_1; }

		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_2() { return cMethodDeclarationParserRuleCall_2; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_3() { return cPropertyDeclarationParserRuleCall_3; }

		//EventDeclaration
		public RuleCall getEventDeclarationParserRuleCall_4() { return cEventDeclarationParserRuleCall_4; }

		//IndexerDeclaration
		public RuleCall getIndexerDeclarationParserRuleCall_5() { return cIndexerDeclarationParserRuleCall_5; }

		//OperatorDeclaration
		public RuleCall getOperatorDeclarationParserRuleCall_6() { return cOperatorDeclarationParserRuleCall_6; }

		//ConstructorDeclaration
		public RuleCall getConstructorDeclarationParserRuleCall_7() { return cConstructorDeclarationParserRuleCall_7; }

		//StaticConstructorDeclaration
		public RuleCall getStaticConstructorDeclarationParserRuleCall_8() { return cStaticConstructorDeclarationParserRuleCall_8; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_9() { return cTypeDeclarationParserRuleCall_9; }
	}

	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cClassModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassModifierClassModifierParserRuleCall_1_0 = (RuleCall)cClassModifierAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNameIdentifierParserRuleCall_3_0 = (RuleCall)cClassNameAssignment_3.eContents().get(0);
		private final Assignment cClassBaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassBaseClassBaseParserRuleCall_4_0 = (RuleCall)cClassBaseAssignment_4.eContents().get(0);
		private final Assignment cClassBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassBodyClassBodyParserRuleCall_5_0 = (RuleCall)cClassBodyAssignment_5.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//ClassDeclaration:
		//	{ClassDeclaration} classModifier+=ClassModifier* "class" className=Identifier classBase=ClassBase?
		//	classBody=ClassBody SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//{ClassDeclaration} classModifier+=ClassModifier* "class" className=Identifier classBase=ClassBase? classBody=ClassBody
		//SEMICOLON?
		public Group getGroup() { return cGroup; }

		//{ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }

		//classModifier+=ClassModifier*
		public Assignment getClassModifierAssignment_1() { return cClassModifierAssignment_1; }

		//ClassModifier
		public RuleCall getClassModifierClassModifierParserRuleCall_1_0() { return cClassModifierClassModifierParserRuleCall_1_0; }

		//"class"
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }

		//className=Identifier
		public Assignment getClassNameAssignment_3() { return cClassNameAssignment_3; }

		//Identifier
		public RuleCall getClassNameIdentifierParserRuleCall_3_0() { return cClassNameIdentifierParserRuleCall_3_0; }

		//classBase=ClassBase?
		public Assignment getClassBaseAssignment_4() { return cClassBaseAssignment_4; }

		//ClassBase
		public RuleCall getClassBaseClassBaseParserRuleCall_4_0() { return cClassBaseClassBaseParserRuleCall_4_0; }

		//classBody=ClassBody
		public Assignment getClassBodyAssignment_5() { return cClassBodyAssignment_5; }

		//ClassBody
		public RuleCall getClassBodyClassBodyParserRuleCall_5_0() { return cClassBodyClassBodyParserRuleCall_5_0; }

		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_6() { return cSEMICOLONTerminalRuleCall_6; }
	}

	public class ClassBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassDeclarationClassMemberDeclarationParserRuleCall_2_0 = (RuleCall)cClassDeclarationAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassBody:
		//	{ClassBody} "{" classDeclaration+=ClassMemberDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//{ClassBody} "{" classDeclaration+=ClassMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//{ClassBody}
		public Action getClassBodyAction_0() { return cClassBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//classDeclaration+=ClassMemberDeclaration*
		public Assignment getClassDeclarationAssignment_2() { return cClassDeclarationAssignment_2; }

		//ClassMemberDeclaration
		public RuleCall getClassDeclarationClassMemberDeclarationParserRuleCall_2_0() { return cClassDeclarationClassMemberDeclarationParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClassMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cClassAttAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassAttAttributesParserRuleCall_1_0_0 = (RuleCall)cClassAttAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cConstDeclarationAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cConstDeclarationConstantDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cConstDeclarationAssignment_1_1_0.eContents().get(0);
		private final Assignment cFieldDeclarationAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cFieldDeclarationFieldDeclarationParserRuleCall_1_1_1_0 = (RuleCall)cFieldDeclarationAssignment_1_1_1.eContents().get(0);
		private final Assignment cPropertyDeclarationAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cPropertyDeclarationPropertyDeclarationParserRuleCall_1_1_2_0 = (RuleCall)cPropertyDeclarationAssignment_1_1_2.eContents().get(0);
		private final Assignment cEventDeclarationAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cEventDeclarationEventDeclarationParserRuleCall_1_1_3_0 = (RuleCall)cEventDeclarationAssignment_1_1_3.eContents().get(0);
		private final Assignment cIndexDeclarationAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cIndexDeclarationIndexerDeclarationParserRuleCall_1_1_4_0 = (RuleCall)cIndexDeclarationAssignment_1_1_4.eContents().get(0);
		private final Assignment cOpDeclarationAssignment_1_1_5 = (Assignment)cAlternatives_1_1.eContents().get(5);
		private final RuleCall cOpDeclarationOperatorDeclarationParserRuleCall_1_1_5_0 = (RuleCall)cOpDeclarationAssignment_1_1_5.eContents().get(0);
		private final Assignment cConstructorDeclarationAssignment_1_1_6 = (Assignment)cAlternatives_1_1.eContents().get(6);
		private final RuleCall cConstructorDeclarationConstructorDeclarationParserRuleCall_1_1_6_0 = (RuleCall)cConstructorDeclarationAssignment_1_1_6.eContents().get(0);
		private final Assignment cDestructorDeclarationAssignment_1_1_7 = (Assignment)cAlternatives_1_1.eContents().get(7);
		private final RuleCall cDestructorDeclarationDestructorDeclarationParserRuleCall_1_1_7_0 = (RuleCall)cDestructorDeclarationAssignment_1_1_7.eContents().get(0);
		private final Assignment cStaticDeclarationAssignment_1_1_8 = (Assignment)cAlternatives_1_1.eContents().get(8);
		private final RuleCall cStaticDeclarationStaticConstructorDeclarationParserRuleCall_1_1_8_0 = (RuleCall)cStaticDeclarationAssignment_1_1_8.eContents().get(0);
		private final Assignment cTypeDeclarationAssignment_1_1_9 = (Assignment)cAlternatives_1_1.eContents().get(9);
		private final RuleCall cTypeDeclarationTypeDeclarationParserRuleCall_1_1_9_0 = (RuleCall)cTypeDeclarationAssignment_1_1_9.eContents().get(0);
		
		//ClassMemberDeclaration:
		//	MethodDeclaration | classAtt=Attributes (constDeclaration=ConstantDeclaration | fieldDeclaration=FieldDeclaration |
		//	propertyDeclaration=PropertyDeclaration | eventDeclaration=EventDeclaration | indexDeclaration=IndexerDeclaration |
		//	opDeclaration=OperatorDeclaration | constructorDeclaration=ConstructorDeclaration |
		//	destructorDeclaration=DestructorDeclaration | staticDeclaration=StaticConstructorDeclaration |
		//	typeDeclaration=TypeDeclaration);
		public ParserRule getRule() { return rule; }

		//MethodDeclaration | classAtt=Attributes (constDeclaration=ConstantDeclaration | fieldDeclaration=FieldDeclaration |
		//propertyDeclaration=PropertyDeclaration | eventDeclaration=EventDeclaration | indexDeclaration=IndexerDeclaration |
		//opDeclaration=OperatorDeclaration | constructorDeclaration=ConstructorDeclaration |
		//destructorDeclaration=DestructorDeclaration | staticDeclaration=StaticConstructorDeclaration |
		//typeDeclaration=TypeDeclaration)
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_0() { return cMethodDeclarationParserRuleCall_0; }

		//classAtt=Attributes (constDeclaration=ConstantDeclaration | fieldDeclaration=FieldDeclaration |
		//propertyDeclaration=PropertyDeclaration | eventDeclaration=EventDeclaration | indexDeclaration=IndexerDeclaration |
		//opDeclaration=OperatorDeclaration | constructorDeclaration=ConstructorDeclaration |
		//destructorDeclaration=DestructorDeclaration | staticDeclaration=StaticConstructorDeclaration |
		//typeDeclaration=TypeDeclaration)
		public Group getGroup_1() { return cGroup_1; }

		//classAtt=Attributes
		public Assignment getClassAttAssignment_1_0() { return cClassAttAssignment_1_0; }

		//Attributes
		public RuleCall getClassAttAttributesParserRuleCall_1_0_0() { return cClassAttAttributesParserRuleCall_1_0_0; }

		//constDeclaration=ConstantDeclaration | fieldDeclaration=FieldDeclaration | propertyDeclaration=PropertyDeclaration |
		//eventDeclaration=EventDeclaration | indexDeclaration=IndexerDeclaration | opDeclaration=OperatorDeclaration |
		//constructorDeclaration=ConstructorDeclaration | destructorDeclaration=DestructorDeclaration |
		//staticDeclaration=StaticConstructorDeclaration | typeDeclaration=TypeDeclaration
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//constDeclaration=ConstantDeclaration
		public Assignment getConstDeclarationAssignment_1_1_0() { return cConstDeclarationAssignment_1_1_0; }

		//ConstantDeclaration
		public RuleCall getConstDeclarationConstantDeclarationParserRuleCall_1_1_0_0() { return cConstDeclarationConstantDeclarationParserRuleCall_1_1_0_0; }

		//fieldDeclaration=FieldDeclaration
		public Assignment getFieldDeclarationAssignment_1_1_1() { return cFieldDeclarationAssignment_1_1_1; }

		//FieldDeclaration
		public RuleCall getFieldDeclarationFieldDeclarationParserRuleCall_1_1_1_0() { return cFieldDeclarationFieldDeclarationParserRuleCall_1_1_1_0; }

		//propertyDeclaration=PropertyDeclaration
		public Assignment getPropertyDeclarationAssignment_1_1_2() { return cPropertyDeclarationAssignment_1_1_2; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationPropertyDeclarationParserRuleCall_1_1_2_0() { return cPropertyDeclarationPropertyDeclarationParserRuleCall_1_1_2_0; }

		//eventDeclaration=EventDeclaration
		public Assignment getEventDeclarationAssignment_1_1_3() { return cEventDeclarationAssignment_1_1_3; }

		//EventDeclaration
		public RuleCall getEventDeclarationEventDeclarationParserRuleCall_1_1_3_0() { return cEventDeclarationEventDeclarationParserRuleCall_1_1_3_0; }

		//indexDeclaration=IndexerDeclaration
		public Assignment getIndexDeclarationAssignment_1_1_4() { return cIndexDeclarationAssignment_1_1_4; }

		//IndexerDeclaration
		public RuleCall getIndexDeclarationIndexerDeclarationParserRuleCall_1_1_4_0() { return cIndexDeclarationIndexerDeclarationParserRuleCall_1_1_4_0; }

		//opDeclaration=OperatorDeclaration
		public Assignment getOpDeclarationAssignment_1_1_5() { return cOpDeclarationAssignment_1_1_5; }

		//OperatorDeclaration
		public RuleCall getOpDeclarationOperatorDeclarationParserRuleCall_1_1_5_0() { return cOpDeclarationOperatorDeclarationParserRuleCall_1_1_5_0; }

		//constructorDeclaration=ConstructorDeclaration
		public Assignment getConstructorDeclarationAssignment_1_1_6() { return cConstructorDeclarationAssignment_1_1_6; }

		//ConstructorDeclaration
		public RuleCall getConstructorDeclarationConstructorDeclarationParserRuleCall_1_1_6_0() { return cConstructorDeclarationConstructorDeclarationParserRuleCall_1_1_6_0; }

		//destructorDeclaration=DestructorDeclaration
		public Assignment getDestructorDeclarationAssignment_1_1_7() { return cDestructorDeclarationAssignment_1_1_7; }

		//DestructorDeclaration
		public RuleCall getDestructorDeclarationDestructorDeclarationParserRuleCall_1_1_7_0() { return cDestructorDeclarationDestructorDeclarationParserRuleCall_1_1_7_0; }

		//staticDeclaration=StaticConstructorDeclaration
		public Assignment getStaticDeclarationAssignment_1_1_8() { return cStaticDeclarationAssignment_1_1_8; }

		//StaticConstructorDeclaration
		public RuleCall getStaticDeclarationStaticConstructorDeclarationParserRuleCall_1_1_8_0() { return cStaticDeclarationStaticConstructorDeclarationParserRuleCall_1_1_8_0; }

		//typeDeclaration=TypeDeclaration
		public Assignment getTypeDeclarationAssignment_1_1_9() { return cTypeDeclarationAssignment_1_1_9; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationTypeDeclarationParserRuleCall_1_1_9_0() { return cTypeDeclarationTypeDeclarationParserRuleCall_1_1_9_0; }
	}

	public class StaticConstructorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticConstructorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticCosntModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStaticCosntModifierStaticConstructorModifiersParserRuleCall_0_0 = (RuleCall)cStaticCosntModifierAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEmptyBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEmptyBlockMaybeEmptyBlockParserRuleCall_4_0 = (RuleCall)cEmptyBlockAssignment_4.eContents().get(0);
		
		//StaticConstructorDeclaration:
		//	staticCosntModifier=StaticConstructorModifiers name=Identifier "(" ")" emptyBlock=MaybeEmptyBlock;
		public ParserRule getRule() { return rule; }

		//staticCosntModifier=StaticConstructorModifiers name=Identifier "(" ")" emptyBlock=MaybeEmptyBlock
		public Group getGroup() { return cGroup; }

		//staticCosntModifier=StaticConstructorModifiers
		public Assignment getStaticCosntModifierAssignment_0() { return cStaticCosntModifierAssignment_0; }

		//StaticConstructorModifiers
		public RuleCall getStaticCosntModifierStaticConstructorModifiersParserRuleCall_0_0() { return cStaticCosntModifierStaticConstructorModifiersParserRuleCall_0_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//emptyBlock=MaybeEmptyBlock
		public Assignment getEmptyBlockAssignment_4() { return cEmptyBlockAssignment_4; }

		//MaybeEmptyBlock
		public RuleCall getEmptyBlockMaybeEmptyBlockParserRuleCall_4_0() { return cEmptyBlockMaybeEmptyBlockParserRuleCall_4_0; }
	}

	public class StaticConstructorModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticConstructorModifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExternKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cStaticKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStaticKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cExternKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StaticConstructorModifiers:
		//	"extern"? "static" | "static" "extern";
		public ParserRule getRule() { return rule; }

		//"extern"? "static" | "static" "extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"extern"? "static"
		public Group getGroup_0() { return cGroup_0; }

		//"extern"?
		public Keyword getExternKeyword_0_0() { return cExternKeyword_0_0; }

		//"static"
		public Keyword getStaticKeyword_0_1() { return cStaticKeyword_0_1; }

		//"static" "extern"
		public Group getGroup_1() { return cGroup_1; }

		//"static"
		public Keyword getStaticKeyword_1_0() { return cStaticKeyword_1_0; }

		//"extern"
		public Keyword getExternKeyword_1_1() { return cExternKeyword_1_1; }
	}

	public class DestructorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DestructorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEmptyBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEmptyBlockMaybeEmptyBlockParserRuleCall_5_0 = (RuleCall)cEmptyBlockAssignment_5.eContents().get(0);
		
		//DestructorDeclaration:
		//	"extern"? "~" name=Identifier "(" ")" emptyBlock=MaybeEmptyBlock;
		public ParserRule getRule() { return rule; }

		//"extern"? "~" name=Identifier "(" ")" emptyBlock=MaybeEmptyBlock
		public Group getGroup() { return cGroup; }

		//"extern"?
		public Keyword getExternKeyword_0() { return cExternKeyword_0; }

		//"~"
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//emptyBlock=MaybeEmptyBlock
		public Assignment getEmptyBlockAssignment_5() { return cEmptyBlockAssignment_5; }

		//MaybeEmptyBlock
		public RuleCall getEmptyBlockMaybeEmptyBlockParserRuleCall_5_0() { return cEmptyBlockMaybeEmptyBlockParserRuleCall_5_0; }
	}

	public class ConstructorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstModifierConstructorModifierParserRuleCall_0_0 = (RuleCall)cConstModifierAssignment_0.eContents().get(0);
		private final Assignment cConstrDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstrDeclaratorConstructorDeclaratorParserRuleCall_1_0 = (RuleCall)cConstrDeclaratorAssignment_1.eContents().get(0);
		private final Assignment cEmptyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmptyBlockMaybeEmptyBlockParserRuleCall_2_0 = (RuleCall)cEmptyBlockAssignment_2.eContents().get(0);
		
		//ConstructorDeclaration:
		//	constModifier+=ConstructorModifier* constrDeclarator=ConstructorDeclarator emptyBlock=MaybeEmptyBlock;
		public ParserRule getRule() { return rule; }

		//constModifier+=ConstructorModifier* constrDeclarator=ConstructorDeclarator emptyBlock=MaybeEmptyBlock
		public Group getGroup() { return cGroup; }

		//constModifier+=ConstructorModifier*
		public Assignment getConstModifierAssignment_0() { return cConstModifierAssignment_0; }

		//ConstructorModifier
		public RuleCall getConstModifierConstructorModifierParserRuleCall_0_0() { return cConstModifierConstructorModifierParserRuleCall_0_0; }

		//constrDeclarator=ConstructorDeclarator
		public Assignment getConstrDeclaratorAssignment_1() { return cConstrDeclaratorAssignment_1; }

		//ConstructorDeclarator
		public RuleCall getConstrDeclaratorConstructorDeclaratorParserRuleCall_1_0() { return cConstrDeclaratorConstructorDeclaratorParserRuleCall_1_0; }

		//emptyBlock=MaybeEmptyBlock
		public Assignment getEmptyBlockAssignment_2() { return cEmptyBlockAssignment_2; }

		//MaybeEmptyBlock
		public RuleCall getEmptyBlockMaybeEmptyBlockParserRuleCall_2_0() { return cEmptyBlockMaybeEmptyBlockParserRuleCall_2_0; }
	}

	public class ConstructorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalListFormalParameterListParserRuleCall_2_0 = (RuleCall)cFormalListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstInitializerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstInitializerConstructorInitializerParserRuleCall_4_0 = (RuleCall)cConstInitializerAssignment_4.eContents().get(0);
		
		//ConstructorDeclarator:
		//	Identifier "(" formalList=FormalParameterList? ")" constInitializer=ConstructorInitializer?;
		public ParserRule getRule() { return rule; }

		//Identifier "(" formalList=FormalParameterList? ")" constInitializer=ConstructorInitializer?
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//formalList=FormalParameterList?
		public Assignment getFormalListAssignment_2() { return cFormalListAssignment_2; }

		//FormalParameterList
		public RuleCall getFormalListFormalParameterListParserRuleCall_2_0() { return cFormalListFormalParameterListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//constInitializer=ConstructorInitializer?
		public Assignment getConstInitializerAssignment_4() { return cConstInitializerAssignment_4; }

		//ConstructorInitializer
		public RuleCall getConstInitializerConstructorInitializerParserRuleCall_4_0() { return cConstInitializerConstructorInitializerParserRuleCall_4_0; }
	}

	public class ConstructorInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cBaseKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cArgumentListParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cThisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cArgumentListParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ConstructorInitializer:
		//	":" "base" "(" ArgumentList ")" | ":" "this" "(" ArgumentList ")";
		public ParserRule getRule() { return rule; }

		//":" "base" "(" ArgumentList ")" | ":" "this" "(" ArgumentList ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" "base" "(" ArgumentList ")"
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//"base"
		public Keyword getBaseKeyword_0_1() { return cBaseKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_0_3() { return cArgumentListParserRuleCall_0_3; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//":" "this" "(" ArgumentList ")"
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//"this"
		public Keyword getThisKeyword_1_1() { return cThisKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_1_3() { return cArgumentListParserRuleCall_1_3; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgArgumentParserRuleCall_1_0_0 = (RuleCall)cArgAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ArgumentList:
		//	{ArgumentList} (arg+=Argument ",")*;
		public ParserRule getRule() { return rule; }

		//{ArgumentList} (arg+=Argument ",")*
		public Group getGroup() { return cGroup; }

		//{ArgumentList}
		public Action getArgumentListAction_0() { return cArgumentListAction_0; }

		//(arg+=Argument ",")*
		public Group getGroup_1() { return cGroup_1; }

		//arg+=Argument
		public Assignment getArgAssignment_1_0() { return cArgAssignment_1_0; }

		//Argument
		public RuleCall getArgArgumentParserRuleCall_1_0_0() { return cArgArgumentParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRefOrOutParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Argument:
		//	RefOrOut? Expression;
		public ParserRule getRule() { return rule; }

		//RefOrOut? Expression
		public Group getGroup() { return cGroup; }

		//RefOrOut?
		public RuleCall getRefOrOutParserRuleCall_0() { return cRefOrOutParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class RefOrOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefOrOut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//RefOrOut:
		//	"ref" | "out";
		public ParserRule getRule() { return rule; }

		//"ref" | "out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//"out"
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }
	}

	public class ConstructorModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProtectedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInternalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPrivateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExternKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ConstructorModifier:
		//	"public" | "protected" | "internal" | "private" | "extern";
		public ParserRule getRule() { return rule; }

		//"public" | "protected" | "internal" | "private" | "extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"protected"
		public Keyword getProtectedKeyword_1() { return cProtectedKeyword_1; }

		//"internal"
		public Keyword getInternalKeyword_2() { return cInternalKeyword_2; }

		//"private"
		public Keyword getPrivateKeyword_3() { return cPrivateKeyword_3; }

		//"extern"
		public Keyword getExternKeyword_4() { return cExternKeyword_4; }
	}

	public class OperatorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpModifierOperatorModifierParserRuleCall_0_0 = (RuleCall)cOpModifierAssignment_0.eContents().get(0);
		private final Assignment cOpDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpDeclaratorOperatorDeclaratorParserRuleCall_1_0 = (RuleCall)cOpDeclaratorAssignment_1.eContents().get(0);
		private final Assignment cEmptyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmptyBlockMaybeEmptyBlockParserRuleCall_2_0 = (RuleCall)cEmptyBlockAssignment_2.eContents().get(0);
		
		//OperatorDeclaration:
		//	opModifier+=OperatorModifier+ opDeclarator=OperatorDeclarator emptyBlock=MaybeEmptyBlock;
		public ParserRule getRule() { return rule; }

		//opModifier+=OperatorModifier+ opDeclarator=OperatorDeclarator emptyBlock=MaybeEmptyBlock
		public Group getGroup() { return cGroup; }

		//opModifier+=OperatorModifier+
		public Assignment getOpModifierAssignment_0() { return cOpModifierAssignment_0; }

		//OperatorModifier
		public RuleCall getOpModifierOperatorModifierParserRuleCall_0_0() { return cOpModifierOperatorModifierParserRuleCall_0_0; }

		//opDeclarator=OperatorDeclarator
		public Assignment getOpDeclaratorAssignment_1() { return cOpDeclaratorAssignment_1; }

		//OperatorDeclarator
		public RuleCall getOpDeclaratorOperatorDeclaratorParserRuleCall_1_0() { return cOpDeclaratorOperatorDeclaratorParserRuleCall_1_0; }

		//emptyBlock=MaybeEmptyBlock
		public Assignment getEmptyBlockAssignment_2() { return cEmptyBlockAssignment_2; }

		//MaybeEmptyBlock
		public RuleCall getEmptyBlockMaybeEmptyBlockParserRuleCall_2_0() { return cEmptyBlockMaybeEmptyBlockParserRuleCall_2_0; }
	}

	public class OperatorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorDeclarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryOperatorDeclaratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryOperatorDeclaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConversionOperatorDeclaratorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OperatorDeclarator:
		//	UnaryOperatorDeclarator | BinaryOperatorDeclarator | ConversionOperatorDeclarator;
		public ParserRule getRule() { return rule; }

		//UnaryOperatorDeclarator | BinaryOperatorDeclarator | ConversionOperatorDeclarator
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnaryOperatorDeclarator
		public RuleCall getUnaryOperatorDeclaratorParserRuleCall_0() { return cUnaryOperatorDeclaratorParserRuleCall_0; }

		//BinaryOperatorDeclarator
		public RuleCall getBinaryOperatorDeclaratorParserRuleCall_1() { return cBinaryOperatorDeclaratorParserRuleCall_1; }

		//ConversionOperatorDeclarator
		public RuleCall getConversionOperatorDeclaratorParserRuleCall_2() { return cConversionOperatorDeclaratorParserRuleCall_2; }
	}

	public class ConversionOperatorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConversionOperatorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConversionKindParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstTypeTypeParserRuleCall_2_0 = (RuleCall)cFirstTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cConversionNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConversionNameIdentifierParserRuleCall_5_0 = (RuleCall)cConversionNameAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConversionOperatorDeclarator:
		//	ConversionKind "operator" firstType=Type "(" type=Type conversionName=Identifier ")";
		public ParserRule getRule() { return rule; }

		//ConversionKind "operator" firstType=Type "(" type=Type conversionName=Identifier ")"
		public Group getGroup() { return cGroup; }

		//ConversionKind
		public RuleCall getConversionKindParserRuleCall_0() { return cConversionKindParserRuleCall_0; }

		//"operator"
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }

		//firstType=Type
		public Assignment getFirstTypeAssignment_2() { return cFirstTypeAssignment_2; }

		//Type
		public RuleCall getFirstTypeTypeParserRuleCall_2_0() { return cFirstTypeTypeParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }

		//conversionName=Identifier
		public Assignment getConversionNameAssignment_5() { return cConversionNameAssignment_5; }

		//Identifier
		public RuleCall getConversionNameIdentifierParserRuleCall_5_0() { return cConversionNameIdentifierParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ConversionKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConversionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cImplicitKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExplicitKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ConversionKind:
		//	"implicit" | "explicit";
		public ParserRule getRule() { return rule; }

		//"implicit" | "explicit"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"implicit"
		public Keyword getImplicitKeyword_0() { return cImplicitKeyword_0; }

		//"explicit"
		public Keyword getExplicitKeyword_1() { return cExplicitKeyword_1; }
	}

	public class BinaryOperatorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperatorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBinTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBinTypeTypeParserRuleCall_0_0 = (RuleCall)cBinTypeAssignment_0.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOverBinOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOverBinOperatorOverloadableBinaryOperatorParserRuleCall_2_0 = (RuleCall)cOverBinOperatorAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cOtherNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOtherNameIdentifierParserRuleCall_5_0 = (RuleCall)cOtherNameAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSecondTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSecondTypeTypeParserRuleCall_7_0 = (RuleCall)cSecondTypeAssignment_7.eContents().get(0);
		private final Assignment cSecondNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSecondNameIdentifierParserRuleCall_8_0 = (RuleCall)cSecondNameAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BinaryOperatorDeclarator:
		//	binType=Type "operator" overBinOperator=OverloadableBinaryOperator "(" type=Type otherName=Identifier ","
		//	secondType=Type secondName=Identifier ")";
		public ParserRule getRule() { return rule; }

		//binType=Type "operator" overBinOperator=OverloadableBinaryOperator "(" type=Type otherName=Identifier ","
		//secondType=Type secondName=Identifier ")"
		public Group getGroup() { return cGroup; }

		//binType=Type
		public Assignment getBinTypeAssignment_0() { return cBinTypeAssignment_0; }

		//Type
		public RuleCall getBinTypeTypeParserRuleCall_0_0() { return cBinTypeTypeParserRuleCall_0_0; }

		//"operator"
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }

		//overBinOperator=OverloadableBinaryOperator
		public Assignment getOverBinOperatorAssignment_2() { return cOverBinOperatorAssignment_2; }

		//OverloadableBinaryOperator
		public RuleCall getOverBinOperatorOverloadableBinaryOperatorParserRuleCall_2_0() { return cOverBinOperatorOverloadableBinaryOperatorParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }

		//otherName=Identifier
		public Assignment getOtherNameAssignment_5() { return cOtherNameAssignment_5; }

		//Identifier
		public RuleCall getOtherNameIdentifierParserRuleCall_5_0() { return cOtherNameIdentifierParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//secondType=Type
		public Assignment getSecondTypeAssignment_7() { return cSecondTypeAssignment_7; }

		//Type
		public RuleCall getSecondTypeTypeParserRuleCall_7_0() { return cSecondTypeTypeParserRuleCall_7_0; }

		//secondName=Identifier
		public Assignment getSecondNameAssignment_8() { return cSecondNameAssignment_8; }

		//Identifier
		public RuleCall getSecondNameIdentifierParserRuleCall_8_0() { return cSecondNameIdentifierParserRuleCall_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class OverloadableBinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverloadableBinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final RuleCall cAMPERSANDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBARTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Keyword cCircumflexAccentKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignLessThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cEqualsSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExclamationMarkEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final RuleCall cGREATER_THANTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLESS_THANTerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final Keyword cGreaterThanSignEqualsSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cLessThanSignEqualsSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//OverloadableBinaryOperator:
		//	OPERATOR_OR_SIGN | "*" | "/" | "%" | AMPERSAND | BAR | "^" | "<<" | ">>" | "==" | "!=" | GREATER_THAN | LESS_THAN |
		//	">=" | "<=";
		public ParserRule getRule() { return rule; }

		//OPERATOR_OR_SIGN | "*" | "/" | "%" | AMPERSAND | BAR | "^" | "<<" | ">>" | "==" | "!=" | GREATER_THAN | LESS_THAN | ">="
		//| "<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//OPERATOR_OR_SIGN
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_0() { return cOPERATOR_OR_SIGNTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//"%"
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }

		//AMPERSAND
		public RuleCall getAMPERSANDTerminalRuleCall_4() { return cAMPERSANDTerminalRuleCall_4; }

		//BAR
		public RuleCall getBARTerminalRuleCall_5() { return cBARTerminalRuleCall_5; }

		//"^"
		public Keyword getCircumflexAccentKeyword_6() { return cCircumflexAccentKeyword_6; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_7() { return cLessThanSignLessThanSignKeyword_7; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_8() { return cGreaterThanSignGreaterThanSignKeyword_8; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_9() { return cEqualsSignEqualsSignKeyword_9; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_10() { return cExclamationMarkEqualsSignKeyword_10; }

		//GREATER_THAN
		public RuleCall getGREATER_THANTerminalRuleCall_11() { return cGREATER_THANTerminalRuleCall_11; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_12() { return cLESS_THANTerminalRuleCall_12; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_13() { return cGreaterThanSignEqualsSignKeyword_13; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_14() { return cLessThanSignEqualsSignKeyword_14; }
	}

	public class UnaryOperatorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperatorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cOverloadableUnaryOperatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOtherTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOtherTypeTypeParserRuleCall_4_0 = (RuleCall)cOtherTypeAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnaryOperatorDeclarator:
		//	type=Type "operator" OverloadableUnaryOperator "(" otherType=Type name=Identifier ")";
		public ParserRule getRule() { return rule; }

		//type=Type "operator" OverloadableUnaryOperator "(" otherType=Type name=Identifier ")"
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//"operator"
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }

		//OverloadableUnaryOperator
		public RuleCall getOverloadableUnaryOperatorParserRuleCall_2() { return cOverloadableUnaryOperatorParserRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//otherType=Type
		public Assignment getOtherTypeAssignment_4() { return cOtherTypeAssignment_4; }

		//Type
		public RuleCall getOtherTypeTypeParserRuleCall_4_0() { return cOtherTypeTypeParserRuleCall_4_0; }

		//name=Identifier
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class OverloadableUnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverloadableUnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINCREMENT_DECREMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTrueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFalseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OverloadableUnaryOperator:
		//	OPERATOR_OR_SIGN | INCREMENT_DECREMENT | "!" | "~" | "true" | "false";
		public ParserRule getRule() { return rule; }

		//OPERATOR_OR_SIGN | INCREMENT_DECREMENT | "!" | "~" | "true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OPERATOR_OR_SIGN
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_0() { return cOPERATOR_OR_SIGNTerminalRuleCall_0; }

		//INCREMENT_DECREMENT
		public RuleCall getINCREMENT_DECREMENTTerminalRuleCall_1() { return cINCREMENT_DECREMENTTerminalRuleCall_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }

		//"~"
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }

		//"true"
		public Keyword getTrueKeyword_4() { return cTrueKeyword_4; }

		//"false"
		public Keyword getFalseKeyword_5() { return cFalseKeyword_5; }
	}

	public class OperatorModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStaticKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExternKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OperatorModifier:
		//	"public" | "static" | "extern";
		public ParserRule getRule() { return rule; }

		//"public" | "static" | "extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"static"
		public Keyword getStaticKeyword_1() { return cStaticKeyword_1; }

		//"extern"
		public Keyword getExternKeyword_2() { return cExternKeyword_2; }
	}

	public class IndexerDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexerDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdModifierIndexerModifierParserRuleCall_0_0 = (RuleCall)cIdModifierAssignment_0.eContents().get(0);
		private final Assignment cIndexerDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexerDeclaratorIndexerDeclaratorParserRuleCall_1_0 = (RuleCall)cIndexerDeclaratorAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAccDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAccDeclarationAccessorDeclarationsParserRuleCall_3_0 = (RuleCall)cAccDeclarationAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IndexerDeclaration:
		//	idModifier+=IndexerModifier* indexerDeclarator=IndexerDeclarator "{" accDeclaration=AccessorDeclarations "}";
		public ParserRule getRule() { return rule; }

		//idModifier+=IndexerModifier* indexerDeclarator=IndexerDeclarator "{" accDeclaration=AccessorDeclarations "}"
		public Group getGroup() { return cGroup; }

		//idModifier+=IndexerModifier*
		public Assignment getIdModifierAssignment_0() { return cIdModifierAssignment_0; }

		//IndexerModifier
		public RuleCall getIdModifierIndexerModifierParserRuleCall_0_0() { return cIdModifierIndexerModifierParserRuleCall_0_0; }

		//indexerDeclarator=IndexerDeclarator
		public Assignment getIndexerDeclaratorAssignment_1() { return cIndexerDeclaratorAssignment_1; }

		//IndexerDeclarator
		public RuleCall getIndexerDeclaratorIndexerDeclaratorParserRuleCall_1_0() { return cIndexerDeclaratorIndexerDeclaratorParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//accDeclaration=AccessorDeclarations
		public Assignment getAccDeclarationAssignment_3() { return cAccDeclarationAssignment_3; }

		//AccessorDeclarations
		public RuleCall getAccDeclarationAccessorDeclarationsParserRuleCall_3_0() { return cAccDeclarationAccessorDeclarationsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class IndexerDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexerDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cThisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFormalListAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cFormalListFormalParameterListParserRuleCall_1_0_2_0 = (RuleCall)cFormalListAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cQualifiedIdAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cQualifiedIdQualifiedIdentifierParserRuleCall_1_1_0_0 = (RuleCall)cQualifiedIdAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cThisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cFormalListAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cFormalListFormalParameterListParserRuleCall_1_1_4_0 = (RuleCall)cFormalListAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		//IndexerDeclarator:
		//	type=Type ("this" "[" formalList=FormalParameterList "]" | qualifiedId=QualifiedIdentifier "." "this" "["
		//	formalList=FormalParameterList "]");
		public ParserRule getRule() { return rule; }

		//type=Type ("this" "[" formalList=FormalParameterList "]" | qualifiedId=QualifiedIdentifier "." "this" "["
		//formalList=FormalParameterList "]")
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//"this" "[" formalList=FormalParameterList "]" | qualifiedId=QualifiedIdentifier "." "this" "["
		//formalList=FormalParameterList "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"this" "[" formalList=FormalParameterList "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"this"
		public Keyword getThisKeyword_1_0_0() { return cThisKeyword_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_1() { return cLeftSquareBracketKeyword_1_0_1; }

		//formalList=FormalParameterList
		public Assignment getFormalListAssignment_1_0_2() { return cFormalListAssignment_1_0_2; }

		//FormalParameterList
		public RuleCall getFormalListFormalParameterListParserRuleCall_1_0_2_0() { return cFormalListFormalParameterListParserRuleCall_1_0_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_3() { return cRightSquareBracketKeyword_1_0_3; }

		//qualifiedId=QualifiedIdentifier "." "this" "[" formalList=FormalParameterList "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//qualifiedId=QualifiedIdentifier
		public Assignment getQualifiedIdAssignment_1_1_0() { return cQualifiedIdAssignment_1_1_0; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdQualifiedIdentifierParserRuleCall_1_1_0_0() { return cQualifiedIdQualifiedIdentifierParserRuleCall_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//"this"
		public Keyword getThisKeyword_1_1_2() { return cThisKeyword_1_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_3() { return cLeftSquareBracketKeyword_1_1_3; }

		//formalList=FormalParameterList
		public Assignment getFormalListAssignment_1_1_4() { return cFormalListAssignment_1_1_4; }

		//FormalParameterList
		public RuleCall getFormalListFormalParameterListParserRuleCall_1_1_4_0() { return cFormalListFormalParameterListParserRuleCall_1_1_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_5() { return cRightSquareBracketKeyword_1_1_5; }
	}

	public class IndexerModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexerModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cVirtualKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSealedKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOverrideKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAbstractKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cExternKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//IndexerModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"virtual"
		public Keyword getVirtualKeyword_5() { return cVirtualKeyword_5; }

		//"sealed"
		public Keyword getSealedKeyword_6() { return cSealedKeyword_6; }

		//"override"
		public Keyword getOverrideKeyword_7() { return cOverrideKeyword_7; }

		//"abstract"
		public Keyword getAbstractKeyword_8() { return cAbstractKeyword_8; }

		//"extern"
		public Keyword getExternKeyword_9() { return cExternKeyword_9; }
	}

	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEventModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cGroup_3_0.eContents().get(0);
		private final Assignment cVariableDeclaratorAssignment_3_0_0_0 = (Assignment)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cVariableDeclaratorVariableDeclaratorParserRuleCall_3_0_0_0_0 = (RuleCall)cVariableDeclaratorAssignment_3_0_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cQIdentAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cQIdentQualifiedIdentifierParserRuleCall_3_1_0_0 = (RuleCall)cQIdentAssignment_3_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cEventAccessorDeclarationsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cEventAccessorDeclarationsEventAccessorDeclarationsParserRuleCall_3_1_2_0 = (RuleCall)cEventAccessorDeclarationsAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		
		//EventDeclaration:
		//	EventModifier* "event" Type ((variableDeclarator+=VariableDeclarator ",")+ SEMICOLON | qIdent=QualifiedIdentifier "{"
		//	eventAccessorDeclarations=EventAccessorDeclarations "}");
		public ParserRule getRule() { return rule; }

		//EventModifier* "event" Type ((variableDeclarator+=VariableDeclarator ",")+ SEMICOLON | qIdent=QualifiedIdentifier "{"
		//eventAccessorDeclarations=EventAccessorDeclarations "}")
		public Group getGroup() { return cGroup; }

		//EventModifier*
		public RuleCall getEventModifierParserRuleCall_0() { return cEventModifierParserRuleCall_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }

		//(variableDeclarator+=VariableDeclarator ",")+ SEMICOLON | qIdent=QualifiedIdentifier "{"
		//eventAccessorDeclarations=EventAccessorDeclarations "}"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//(variableDeclarator+=VariableDeclarator ",")+ SEMICOLON
		public Group getGroup_3_0() { return cGroup_3_0; }

		//(variableDeclarator+=VariableDeclarator ",")+
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//variableDeclarator+=VariableDeclarator
		public Assignment getVariableDeclaratorAssignment_3_0_0_0() { return cVariableDeclaratorAssignment_3_0_0_0; }

		//VariableDeclarator
		public RuleCall getVariableDeclaratorVariableDeclaratorParserRuleCall_3_0_0_0_0() { return cVariableDeclaratorVariableDeclaratorParserRuleCall_3_0_0_0_0; }

		//","
		public Keyword getCommaKeyword_3_0_0_1() { return cCommaKeyword_3_0_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_0_1() { return cSEMICOLONTerminalRuleCall_3_0_1; }

		//qIdent=QualifiedIdentifier "{" eventAccessorDeclarations=EventAccessorDeclarations "}"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//qIdent=QualifiedIdentifier
		public Assignment getQIdentAssignment_3_1_0() { return cQIdentAssignment_3_1_0; }

		//QualifiedIdentifier
		public RuleCall getQIdentQualifiedIdentifierParserRuleCall_3_1_0_0() { return cQIdentQualifiedIdentifierParserRuleCall_3_1_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_1() { return cLeftCurlyBracketKeyword_3_1_1; }

		//eventAccessorDeclarations=EventAccessorDeclarations
		public Assignment getEventAccessorDeclarationsAssignment_3_1_2() { return cEventAccessorDeclarationsAssignment_3_1_2; }

		//EventAccessorDeclarations
		public RuleCall getEventAccessorDeclarationsEventAccessorDeclarationsParserRuleCall_3_1_2_0() { return cEventAccessorDeclarationsEventAccessorDeclarationsParserRuleCall_3_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_3() { return cRightCurlyBracketKeyword_3_1_3; }
	}

	public class EventAccessorDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventAccessorDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtt1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtt1AttributesParserRuleCall_0_0 = (RuleCall)cAtt1Assignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAddAccessorAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAddAccessorAddAccessorDeclarationParserRuleCall_1_0_0_0 = (RuleCall)cAddAccessorAssignment_1_0_0.eContents().get(0);
		private final Assignment cAttAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAttAttributesParserRuleCall_1_0_1_0 = (RuleCall)cAttAssignment_1_0_1.eContents().get(0);
		private final Assignment cRemovAccessorAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRemovAccessorRemoveAccessorDeclarationParserRuleCall_1_0_2_0 = (RuleCall)cRemovAccessorAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cRemovAccessorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cRemovAccessorRemoveAccessorDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cRemovAccessorAssignment_1_1_0.eContents().get(0);
		private final Assignment cAttAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAttAttributesParserRuleCall_1_1_1_0 = (RuleCall)cAttAssignment_1_1_1.eContents().get(0);
		private final Assignment cAddAccessorAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cAddAccessorAddAccessorDeclarationParserRuleCall_1_1_2_0 = (RuleCall)cAddAccessorAssignment_1_1_2.eContents().get(0);
		
		//EventAccessorDeclarations:
		//	att1=Attributes (addAccessor=AddAccessorDeclaration att=Attributes removAccessor=RemoveAccessorDeclaration |
		//	removAccessor=RemoveAccessorDeclaration att=Attributes addAccessor=AddAccessorDeclaration);
		public ParserRule getRule() { return rule; }

		//att1=Attributes (addAccessor=AddAccessorDeclaration att=Attributes removAccessor=RemoveAccessorDeclaration |
		//removAccessor=RemoveAccessorDeclaration att=Attributes addAccessor=AddAccessorDeclaration)
		public Group getGroup() { return cGroup; }

		//att1=Attributes
		public Assignment getAtt1Assignment_0() { return cAtt1Assignment_0; }

		//Attributes
		public RuleCall getAtt1AttributesParserRuleCall_0_0() { return cAtt1AttributesParserRuleCall_0_0; }

		//addAccessor=AddAccessorDeclaration att=Attributes removAccessor=RemoveAccessorDeclaration |
		//removAccessor=RemoveAccessorDeclaration att=Attributes addAccessor=AddAccessorDeclaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//addAccessor=AddAccessorDeclaration att=Attributes removAccessor=RemoveAccessorDeclaration
		public Group getGroup_1_0() { return cGroup_1_0; }

		//addAccessor=AddAccessorDeclaration
		public Assignment getAddAccessorAssignment_1_0_0() { return cAddAccessorAssignment_1_0_0; }

		//AddAccessorDeclaration
		public RuleCall getAddAccessorAddAccessorDeclarationParserRuleCall_1_0_0_0() { return cAddAccessorAddAccessorDeclarationParserRuleCall_1_0_0_0; }

		//att=Attributes
		public Assignment getAttAssignment_1_0_1() { return cAttAssignment_1_0_1; }

		//Attributes
		public RuleCall getAttAttributesParserRuleCall_1_0_1_0() { return cAttAttributesParserRuleCall_1_0_1_0; }

		//removAccessor=RemoveAccessorDeclaration
		public Assignment getRemovAccessorAssignment_1_0_2() { return cRemovAccessorAssignment_1_0_2; }

		//RemoveAccessorDeclaration
		public RuleCall getRemovAccessorRemoveAccessorDeclarationParserRuleCall_1_0_2_0() { return cRemovAccessorRemoveAccessorDeclarationParserRuleCall_1_0_2_0; }

		//removAccessor=RemoveAccessorDeclaration att=Attributes addAccessor=AddAccessorDeclaration
		public Group getGroup_1_1() { return cGroup_1_1; }

		//removAccessor=RemoveAccessorDeclaration
		public Assignment getRemovAccessorAssignment_1_1_0() { return cRemovAccessorAssignment_1_1_0; }

		//RemoveAccessorDeclaration
		public RuleCall getRemovAccessorRemoveAccessorDeclarationParserRuleCall_1_1_0_0() { return cRemovAccessorRemoveAccessorDeclarationParserRuleCall_1_1_0_0; }

		//att=Attributes
		public Assignment getAttAssignment_1_1_1() { return cAttAssignment_1_1_1; }

		//Attributes
		public RuleCall getAttAttributesParserRuleCall_1_1_1_0() { return cAttAttributesParserRuleCall_1_1_1_0; }

		//addAccessor=AddAccessorDeclaration
		public Assignment getAddAccessorAssignment_1_1_2() { return cAddAccessorAssignment_1_1_2; }

		//AddAccessorDeclaration
		public RuleCall getAddAccessorAddAccessorDeclarationParserRuleCall_1_1_2_0() { return cAddAccessorAddAccessorDeclarationParserRuleCall_1_1_2_0; }
	}

	public class RemoveAccessorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveAccessorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RemoveAccessorDeclaration:
		//	"remove" Block;
		public ParserRule getRule() { return rule; }

		//"remove" Block
		public Group getGroup() { return cGroup; }

		//"remove"
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }

		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
	}

	public class AddAccessorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddAccessorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AddAccessorDeclaration:
		//	"add" Block;
		public ParserRule getRule() { return rule; }

		//"add" Block
		public Group getGroup() { return cGroup; }

		//"add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }

		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
	}

	public class EventModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVirtualKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSealedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOverrideKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAbstractKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExternKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//EventModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//	"extern";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//"extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//"virtual"
		public Keyword getVirtualKeyword_6() { return cVirtualKeyword_6; }

		//"sealed"
		public Keyword getSealedKeyword_7() { return cSealedKeyword_7; }

		//"override"
		public Keyword getOverrideKeyword_8() { return cOverrideKeyword_8; }

		//"abstract"
		public Keyword getAbstractKeyword_9() { return cAbstractKeyword_9; }

		//"extern"
		public Keyword getExternKeyword_10() { return cExternKeyword_10; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cQualifiedIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualifiedIdQualifiedIdentifierParserRuleCall_2_0 = (RuleCall)cQualifiedIdAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAccDeclarateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAccDeclarateAccessorDeclarationsParserRuleCall_4_0 = (RuleCall)cAccDeclarateAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyDeclaration:
		//	PropertyModifier* Type qualifiedId=QualifiedIdentifier "{" accDeclarate=AccessorDeclarations "}";
		public ParserRule getRule() { return rule; }

		//PropertyModifier* Type qualifiedId=QualifiedIdentifier "{" accDeclarate=AccessorDeclarations "}"
		public Group getGroup() { return cGroup; }

		//PropertyModifier*
		public RuleCall getPropertyModifierParserRuleCall_0() { return cPropertyModifierParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//qualifiedId=QualifiedIdentifier
		public Assignment getQualifiedIdAssignment_2() { return cQualifiedIdAssignment_2; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdQualifiedIdentifierParserRuleCall_2_0() { return cQualifiedIdQualifiedIdentifierParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//accDeclarate=AccessorDeclarations
		public Assignment getAccDeclarateAssignment_4() { return cAccDeclarateAssignment_4; }

		//AccessorDeclarations
		public RuleCall getAccDeclarateAccessorDeclarationsParserRuleCall_4_0() { return cAccDeclarateAccessorDeclarationsParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AccessorDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessorDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttAttributesParserRuleCall_0_0 = (RuleCall)cAttAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cGetAccAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cGetAccGetAccessorDeclarationParserRuleCall_1_0_0_0 = (RuleCall)cGetAccAssignment_1_0_0.eContents().get(0);
		private final Assignment cAtt2Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAtt2AttributesParserRuleCall_1_0_1_0 = (RuleCall)cAtt2Assignment_1_0_1.eContents().get(0);
		private final Assignment cSetAccAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSetAccSetAccessorDeclarationParserRuleCall_1_0_2_0 = (RuleCall)cSetAccAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSetAccAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cSetAccSetAccessorDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cSetAccAssignment_1_1_0.eContents().get(0);
		private final Assignment cAtt2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAtt2AttributesParserRuleCall_1_1_1_0 = (RuleCall)cAtt2Assignment_1_1_1.eContents().get(0);
		private final Assignment cGetAccAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cGetAccGetAccessorDeclarationParserRuleCall_1_1_2_0 = (RuleCall)cGetAccAssignment_1_1_2.eContents().get(0);
		
		//AccessorDeclarations:
		//	att=Attributes (getAcc=GetAccessorDeclaration att2=Attributes setAcc=SetAccessorDeclaration? |
		//	setAcc=SetAccessorDeclaration att2=Attributes getAcc=GetAccessorDeclaration?);
		public ParserRule getRule() { return rule; }

		//att=Attributes (getAcc=GetAccessorDeclaration att2=Attributes setAcc=SetAccessorDeclaration? |
		//setAcc=SetAccessorDeclaration att2=Attributes getAcc=GetAccessorDeclaration?)
		public Group getGroup() { return cGroup; }

		//att=Attributes
		public Assignment getAttAssignment_0() { return cAttAssignment_0; }

		//Attributes
		public RuleCall getAttAttributesParserRuleCall_0_0() { return cAttAttributesParserRuleCall_0_0; }

		//getAcc=GetAccessorDeclaration att2=Attributes setAcc=SetAccessorDeclaration? | setAcc=SetAccessorDeclaration
		//att2=Attributes getAcc=GetAccessorDeclaration?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//getAcc=GetAccessorDeclaration att2=Attributes setAcc=SetAccessorDeclaration?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//getAcc=GetAccessorDeclaration
		public Assignment getGetAccAssignment_1_0_0() { return cGetAccAssignment_1_0_0; }

		//GetAccessorDeclaration
		public RuleCall getGetAccGetAccessorDeclarationParserRuleCall_1_0_0_0() { return cGetAccGetAccessorDeclarationParserRuleCall_1_0_0_0; }

		//att2=Attributes
		public Assignment getAtt2Assignment_1_0_1() { return cAtt2Assignment_1_0_1; }

		//Attributes
		public RuleCall getAtt2AttributesParserRuleCall_1_0_1_0() { return cAtt2AttributesParserRuleCall_1_0_1_0; }

		//setAcc=SetAccessorDeclaration?
		public Assignment getSetAccAssignment_1_0_2() { return cSetAccAssignment_1_0_2; }

		//SetAccessorDeclaration
		public RuleCall getSetAccSetAccessorDeclarationParserRuleCall_1_0_2_0() { return cSetAccSetAccessorDeclarationParserRuleCall_1_0_2_0; }

		//setAcc=SetAccessorDeclaration att2=Attributes getAcc=GetAccessorDeclaration?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//setAcc=SetAccessorDeclaration
		public Assignment getSetAccAssignment_1_1_0() { return cSetAccAssignment_1_1_0; }

		//SetAccessorDeclaration
		public RuleCall getSetAccSetAccessorDeclarationParserRuleCall_1_1_0_0() { return cSetAccSetAccessorDeclarationParserRuleCall_1_1_0_0; }

		//att2=Attributes
		public Assignment getAtt2Assignment_1_1_1() { return cAtt2Assignment_1_1_1; }

		//Attributes
		public RuleCall getAtt2AttributesParserRuleCall_1_1_1_0() { return cAtt2AttributesParserRuleCall_1_1_1_0; }

		//getAcc=GetAccessorDeclaration?
		public Assignment getGetAccAssignment_1_1_2() { return cGetAccAssignment_1_1_2; }

		//GetAccessorDeclaration
		public RuleCall getGetAccGetAccessorDeclarationParserRuleCall_1_1_2_0() { return cGetAccGetAccessorDeclarationParserRuleCall_1_1_2_0; }
	}

	public class SetAccessorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetAccessorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMaybeEmptyBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SetAccessorDeclaration:
		//	"set" MaybeEmptyBlock;
		public ParserRule getRule() { return rule; }

		//"set" MaybeEmptyBlock
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//MaybeEmptyBlock
		public RuleCall getMaybeEmptyBlockParserRuleCall_1() { return cMaybeEmptyBlockParserRuleCall_1; }
	}

	public class GetAccessorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetAccessorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMaybeEmptyBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GetAccessorDeclaration:
		//	"get" MaybeEmptyBlock;
		public ParserRule getRule() { return rule; }

		//"get" MaybeEmptyBlock
		public Group getGroup() { return cGroup; }

		//"get"
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }

		//MaybeEmptyBlock
		public RuleCall getMaybeEmptyBlockParserRuleCall_1() { return cMaybeEmptyBlockParserRuleCall_1; }
	}

	public class PropertyModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVirtualKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSealedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOverrideKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAbstractKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExternKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//PropertyModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//	"extern";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//"extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//"virtual"
		public Keyword getVirtualKeyword_6() { return cVirtualKeyword_6; }

		//"sealed"
		public Keyword getSealedKeyword_7() { return cSealedKeyword_7; }

		//"override"
		public Keyword getOverrideKeyword_8() { return cOverrideKeyword_8; }

		//"abstract"
		public Keyword getAbstractKeyword_9() { return cAbstractKeyword_9; }

		//"extern"
		public Keyword getExternKeyword_10() { return cExternKeyword_10; }
	}

	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMethodHeaderMethodHeaderParserRuleCall_0_0 = (RuleCall)cMethodHeaderAssignment_0.eContents().get(0);
		private final Assignment cMaybeEmptyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaybeEmptyMaybeEmptyBlockParserRuleCall_1_0 = (RuleCall)cMaybeEmptyAssignment_1.eContents().get(0);
		
		//MethodDeclaration:
		//	methodHeader=MethodHeader maybeEmpty=MaybeEmptyBlock;
		public ParserRule getRule() { return rule; }

		//methodHeader=MethodHeader maybeEmpty=MaybeEmptyBlock
		public Group getGroup() { return cGroup; }

		//methodHeader=MethodHeader
		public Assignment getMethodHeaderAssignment_0() { return cMethodHeaderAssignment_0; }

		//MethodHeader
		public RuleCall getMethodHeaderMethodHeaderParserRuleCall_0_0() { return cMethodHeaderMethodHeaderParserRuleCall_0_0; }

		//maybeEmpty=MaybeEmptyBlock
		public Assignment getMaybeEmptyAssignment_1() { return cMaybeEmptyAssignment_1; }

		//MaybeEmptyBlock
		public RuleCall getMaybeEmptyMaybeEmptyBlockParserRuleCall_1_0() { return cMaybeEmptyMaybeEmptyBlockParserRuleCall_1_0; }
	}

	public class MethodHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMethodModifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeOrVoidAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOrVoidTypeOrVoidParserRuleCall_2_0 = (RuleCall)cTypeOrVoidAssignment_2.eContents().get(0);
		private final Assignment cQualifiedIDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQualifiedIDQualifiedIdentifierParserRuleCall_3_0 = (RuleCall)cQualifiedIDAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFormalParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFormalParametersFormalParameterListParserRuleCall_5_0 = (RuleCall)cFormalParametersAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MethodHeader:
		//	Attributes MethodModifier* typeOrVoid=TypeOrVoid qualifiedID=QualifiedIdentifier "("
		//	formalParameters=FormalParameterList? ")";
		public ParserRule getRule() { return rule; }

		//Attributes MethodModifier* typeOrVoid=TypeOrVoid qualifiedID=QualifiedIdentifier "("
		//formalParameters=FormalParameterList? ")"
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//MethodModifier*
		public RuleCall getMethodModifierParserRuleCall_1() { return cMethodModifierParserRuleCall_1; }

		//typeOrVoid=TypeOrVoid
		public Assignment getTypeOrVoidAssignment_2() { return cTypeOrVoidAssignment_2; }

		//TypeOrVoid
		public RuleCall getTypeOrVoidTypeOrVoidParserRuleCall_2_0() { return cTypeOrVoidTypeOrVoidParserRuleCall_2_0; }

		//qualifiedID=QualifiedIdentifier
		public Assignment getQualifiedIDAssignment_3() { return cQualifiedIDAssignment_3; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIDQualifiedIdentifierParserRuleCall_3_0() { return cQualifiedIDQualifiedIdentifierParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//formalParameters=FormalParameterList?
		public Assignment getFormalParametersAssignment_5() { return cFormalParametersAssignment_5; }

		//FormalParameterList
		public RuleCall getFormalParametersFormalParameterListParserRuleCall_5_0() { return cFormalParametersFormalParameterListParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class FormalParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFixedParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cParameterArrayAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParameterArrayParameterArrayParserRuleCall_1_0_1_0 = (RuleCall)cParameterArrayAssignment_1_0_1.eContents().get(0);
		private final Assignment cParameterArrayAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cParameterArrayParameterArrayParserRuleCall_1_1_0 = (RuleCall)cParameterArrayAssignment_1_1.eContents().get(0);
		
		//FormalParameterList:
		//	FixedParameters ("," parameterArray=ParameterArray | parameterArray=ParameterArray);
		public ParserRule getRule() { return rule; }

		//FixedParameters ("," parameterArray=ParameterArray | parameterArray=ParameterArray)
		public Group getGroup() { return cGroup; }

		//FixedParameters
		public RuleCall getFixedParametersParserRuleCall_0() { return cFixedParametersParserRuleCall_0; }

		//"," parameterArray=ParameterArray | parameterArray=ParameterArray
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"," parameterArray=ParameterArray
		public Group getGroup_1_0() { return cGroup_1_0; }

		//","
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }

		//parameterArray=ParameterArray
		public Assignment getParameterArrayAssignment_1_0_1() { return cParameterArrayAssignment_1_0_1; }

		//ParameterArray
		public RuleCall getParameterArrayParameterArrayParserRuleCall_1_0_1_0() { return cParameterArrayParameterArrayParserRuleCall_1_0_1_0; }

		//parameterArray=ParameterArray
		public Assignment getParameterArrayAssignment_1_1() { return cParameterArrayAssignment_1_1; }

		//ParameterArray
		public RuleCall getParameterArrayParameterArrayParserRuleCall_1_1_0() { return cParameterArrayParameterArrayParserRuleCall_1_1_0; }
	}

	public class ParameterArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttAttributesParserRuleCall_1_0 = (RuleCall)cAttAssignment_1.eContents().get(0);
		private final Keyword cParamsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArrayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArrayArrayTypeParserRuleCall_3_0 = (RuleCall)cArrayAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIdentifierParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//ParameterArray:
		//	{ParameterArray} att=Attributes "params" array=ArrayType name=Identifier;
		public ParserRule getRule() { return rule; }

		//{ParameterArray} att=Attributes "params" array=ArrayType name=Identifier
		public Group getGroup() { return cGroup; }

		//{ParameterArray}
		public Action getParameterArrayAction_0() { return cParameterArrayAction_0; }

		//att=Attributes
		public Assignment getAttAssignment_1() { return cAttAssignment_1; }

		//Attributes
		public RuleCall getAttAttributesParserRuleCall_1_0() { return cAttAttributesParserRuleCall_1_0; }

		//"params"
		public Keyword getParamsKeyword_2() { return cParamsKeyword_2; }

		//array=ArrayType
		public Assignment getArrayAssignment_3() { return cArrayAssignment_3; }

		//ArrayType
		public RuleCall getArrayArrayTypeParserRuleCall_3_0() { return cArrayArrayTypeParserRuleCall_3_0; }

		//name=Identifier
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_4_0() { return cNameIdentifierParserRuleCall_4_0; }
	}

	public class FixedParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFixParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFixParametersFixedParameterParserRuleCall_0_0 = (RuleCall)cFixParametersAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FixedParameters:
		//	(fixParameters+=FixedParameter ",")+;
		public ParserRule getRule() { return rule; }

		//(fixParameters+=FixedParameter ",")+
		public Group getGroup() { return cGroup; }

		//fixParameters+=FixedParameter
		public Assignment getFixParametersAssignment_0() { return cFixParametersAssignment_0; }

		//FixedParameter
		public RuleCall getFixParametersFixedParameterParserRuleCall_0_0() { return cFixParametersFixedParameterParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class FixedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FixedParameter:
		//	ParameterModifier? type=Type name=Identifier;
		public ParserRule getRule() { return rule; }

		//ParameterModifier? type=Type name=Identifier
		public Group getGroup() { return cGroup; }

		//ParameterModifier?
		public RuleCall getParameterModifierParserRuleCall_0() { return cParameterModifierParserRuleCall_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }
	}

	public class ParameterModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ParameterModifier:
		//	"ref" | "out";
		public ParserRule getRule() { return rule; }

		//"ref" | "out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//"out"
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }
	}

	public class TypeOrVoidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeOrVoid");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeOrVoidAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVoidAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVoidKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//TypeOrVoid:
		//	{TypeOrVoid} type=Type | {Void} "void";
		public ParserRule getRule() { return rule; }

		//{TypeOrVoid} type=Type | {Void} "void"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TypeOrVoid} type=Type
		public Group getGroup_0() { return cGroup_0; }

		//{TypeOrVoid}
		public Action getTypeOrVoidAction_0_0() { return cTypeOrVoidAction_0_0; }

		//type=Type
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_1_0() { return cTypeTypeParserRuleCall_0_1_0; }

		//{Void} "void"
		public Group getGroup_1() { return cGroup_1; }

		//{Void}
		public Action getVoidAction_1_0() { return cVoidAction_1_0; }

		//"void"
		public Keyword getVoidKeyword_1_1() { return cVoidKeyword_1_1; }
	}

	public class MethodModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVirtualKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSealedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOverrideKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAbstractKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExternKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//MethodModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//	"extern";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//"extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//"virtual"
		public Keyword getVirtualKeyword_6() { return cVirtualKeyword_6; }

		//"sealed"
		public Keyword getSealedKeyword_7() { return cSealedKeyword_7; }

		//"override"
		public Keyword getOverrideKeyword_8() { return cOverrideKeyword_8; }

		//"abstract"
		public Keyword getAbstractKeyword_9() { return cAbstractKeyword_9; }

		//"extern"
		public Keyword getExternKeyword_10() { return cExternKeyword_10; }
	}

	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFieldModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariablesVariableDeclaratorParserRuleCall_2_0_0 = (RuleCall)cVariablesAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FieldDeclaration:
		//	FieldModifier* Type (variables+=VariableDeclarator ",")+ SEMICOLON;
		public ParserRule getRule() { return rule; }

		//FieldModifier* Type (variables+=VariableDeclarator ",")+ SEMICOLON
		public Group getGroup() { return cGroup; }

		//FieldModifier*
		public RuleCall getFieldModifierParserRuleCall_0() { return cFieldModifierParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//(variables+=VariableDeclarator ",")+
		public Group getGroup_2() { return cGroup_2; }

		//variables+=VariableDeclarator
		public Assignment getVariablesAssignment_2_0() { return cVariablesAssignment_2_0; }

		//VariableDeclarator
		public RuleCall getVariablesVariableDeclaratorParserRuleCall_2_0_0() { return cVariablesVariableDeclaratorParserRuleCall_2_0_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class VariableDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableVariableInitializerParserRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		
		//VariableDeclarator:
		//	name=Identifier ("=" variable=VariableInitializer)?;
		public ParserRule getRule() { return rule; }

		//name=Identifier ("=" variable=VariableInitializer)?
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//("=" variable=VariableInitializer)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//variable=VariableInitializer
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }

		//VariableInitializer
		public RuleCall getVariableVariableInitializerParserRuleCall_1_1_0() { return cVariableVariableInitializerParserRuleCall_1_1_0; }
	}

	public class VariableInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableInitializer:
		//	Expression | ArrayInitializer;
		public ParserRule getRule() { return rule; }

		//Expression | ArrayInitializer
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//ArrayInitializer
		public RuleCall getArrayInitializerParserRuleCall_1() { return cArrayInitializerParserRuleCall_1; }
	}

	public class ArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArrayInitializerAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cVariableInitalizersAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cVariableInitalizersVariableInitializerParserRuleCall_1_1_0_0 = (RuleCall)cVariableInitalizersAssignment_1_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ArrayInitializer:
		//	{ArrayInitializer} "{" "}" | "{" (variableInitalizers+=VariableInitializer ",")+ ","? "}";
		public ParserRule getRule() { return rule; }

		//{ArrayInitializer} "{" "}" | "{" (variableInitalizers+=VariableInitializer ",")+ ","? "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ArrayInitializer} "{" "}"
		public Group getGroup_0() { return cGroup_0; }

		//{ArrayInitializer}
		public Action getArrayInitializerAction_0_0() { return cArrayInitializerAction_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }

		//"{" (variableInitalizers+=VariableInitializer ",")+ ","? "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(variableInitalizers+=VariableInitializer ",")+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//variableInitalizers+=VariableInitializer
		public Assignment getVariableInitalizersAssignment_1_1_0() { return cVariableInitalizersAssignment_1_1_0; }

		//VariableInitializer
		public RuleCall getVariableInitalizersVariableInitializerParserRuleCall_1_1_0_0() { return cVariableInitalizersVariableInitializerParserRuleCall_1_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class FieldModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cReadonlyKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cVolatileKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//FieldModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//"readonly"
		public Keyword getReadonlyKeyword_6() { return cReadonlyKeyword_6; }

		//"volatile"
		public Keyword getVolatileKeyword_7() { return cVolatileKeyword_7; }
	}

	public class ConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstantModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cConstDeclaratorsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cConstDeclaratorsConstantDeclaratorParserRuleCall_3_0_0 = (RuleCall)cConstDeclaratorsAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ConstantDeclaration:
		//	ConstantModifier* "const" Type (constDeclarators+=ConstantDeclarator ",")+ SEMICOLON;
		public ParserRule getRule() { return rule; }

		//ConstantModifier* "const" Type (constDeclarators+=ConstantDeclarator ",")+ SEMICOLON
		public Group getGroup() { return cGroup; }

		//ConstantModifier*
		public RuleCall getConstantModifierParserRuleCall_0() { return cConstantModifierParserRuleCall_0; }

		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }

		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }

		//(constDeclarators+=ConstantDeclarator ",")+
		public Group getGroup_3() { return cGroup_3; }

		//constDeclarators+=ConstantDeclarator
		public Assignment getConstDeclaratorsAssignment_3_0() { return cConstDeclaratorsAssignment_3_0; }

		//ConstantDeclarator
		public RuleCall getConstDeclaratorsConstantDeclaratorParserRuleCall_3_0_0() { return cConstDeclaratorsConstantDeclaratorParserRuleCall_3_0_0; }

		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
	}

	public class ConstantModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ConstantModifier:
		//	"new" | "public" | "protected" | "internal" | "private";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class ConstantDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//ConstantDeclarator:
		//	{ConstantDeclarator} name=Identifier "=" exp=Expression;
		public ParserRule getRule() { return rule; }

		//{ConstantDeclarator} name=Identifier "=" exp=Expression
		public Group getGroup() { return cGroup; }

		//{ConstantDeclarator}
		public Action getConstantDeclaratorAction_0() { return cConstantDeclaratorAction_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
	}

	public class ClassBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cQualifiedIdentifierListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cBuiltInClassTypeParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cQualifiedIdentifierListParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		
		//ClassBase:
		//	":" (QualifiedIdentifierList | BuiltInClassType ("," QualifiedIdentifierList)?);
		public ParserRule getRule() { return rule; }

		//":" (QualifiedIdentifierList | BuiltInClassType ("," QualifiedIdentifierList)?)
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//QualifiedIdentifierList | BuiltInClassType ("," QualifiedIdentifierList)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//QualifiedIdentifierList
		public RuleCall getQualifiedIdentifierListParserRuleCall_1_0() { return cQualifiedIdentifierListParserRuleCall_1_0; }

		//BuiltInClassType ("," QualifiedIdentifierList)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//BuiltInClassType
		public RuleCall getBuiltInClassTypeParserRuleCall_1_1_0() { return cBuiltInClassTypeParserRuleCall_1_1_0; }

		//("," QualifiedIdentifierList)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//QualifiedIdentifierList
		public RuleCall getQualifiedIdentifierListParserRuleCall_1_1_1_1() { return cQualifiedIdentifierListParserRuleCall_1_1_1_1; }
	}

	public class QualifiedIdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdsQualifiedIdentifierParserRuleCall_0_0 = (RuleCall)cIdsAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedIdentifierList:
		//	(ids+=QualifiedIdentifier ",")+;
		public ParserRule getRule() { return rule; }

		//(ids+=QualifiedIdentifier ",")+
		public Group getGroup() { return cGroup; }

		//ids+=QualifiedIdentifier
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }

		//QualifiedIdentifier
		public RuleCall getIdsQualifiedIdentifierParserRuleCall_0_0() { return cIdsQualifiedIdentifierParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class ClassModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAbstractKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSealedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ClassModifier:
		//	Modifier | "abstract" | "sealed";
		public ParserRule getRule() { return rule; }

		//Modifier | "abstract" | "sealed"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Modifier
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//"abstract"
		public Keyword getAbstractKeyword_1() { return cAbstractKeyword_1; }

		//"sealed"
		public Keyword getSealedKeyword_2() { return cSealedKeyword_2; }
	}

	public class GlobalAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalAttributesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGlobalAttSectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGlobalAttSectionsGlobalAttributeSectionParserRuleCall_1_0 = (RuleCall)cGlobalAttSectionsAssignment_1.eContents().get(0);
		
		//GlobalAttributes:
		//	{GlobalAttributes} globalAttSections+=GlobalAttributeSection*;
		public ParserRule getRule() { return rule; }

		//{GlobalAttributes} globalAttSections+=GlobalAttributeSection*
		public Group getGroup() { return cGroup; }

		//{GlobalAttributes}
		public Action getGlobalAttributesAction_0() { return cGlobalAttributesAction_0; }

		//globalAttSections+=GlobalAttributeSection*
		public Assignment getGlobalAttSectionsAssignment_1() { return cGlobalAttSectionsAssignment_1; }

		//GlobalAttributeSection
		public RuleCall getGlobalAttSectionsGlobalAttributeSectionParserRuleCall_1_0() { return cGlobalAttSectionsGlobalAttributeSectionParserRuleCall_1_0; }
	}

	public class GlobalAttributeSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalAttributeSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAssemblyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAttributeListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GlobalAttributeSection:
		//	"[" "assembly" ":" AttributeList ","? "]";
		public ParserRule getRule() { return rule; }

		//"[" "assembly" ":" AttributeList ","? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"assembly"
		public Keyword getAssemblyKeyword_1() { return cAssemblyKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//AttributeList
		public RuleCall getAttributeListParserRuleCall_3() { return cAttributeListParserRuleCall_3; }

		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeSectionParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//Attributes:
		//	{Attributes} attributes+=AttributeSection*;
		public ParserRule getRule() { return rule; }

		//{Attributes} attributes+=AttributeSection*
		public Group getGroup() { return cGroup; }

		//{Attributes}
		public Action getAttributesAction_0() { return cAttributesAction_0; }

		//attributes+=AttributeSection*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttributeSection
		public RuleCall getAttributesAttributeSectionParserRuleCall_1_0() { return cAttributesAttributeSectionParserRuleCall_1_0; }
	}

	public class AttributeSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cAttributeTargetParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cAttributeListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AttributeSection:
		//	"[" (AttributeTarget ":")? AttributeList ","? "]";
		public ParserRule getRule() { return rule; }

		//"[" (AttributeTarget ":")? AttributeList ","? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(AttributeTarget ":")?
		public Group getGroup_1() { return cGroup_1; }

		//AttributeTarget
		public RuleCall getAttributeTargetParserRuleCall_1_0() { return cAttributeTargetParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//AttributeList
		public RuleCall getAttributeListParserRuleCall_2() { return cAttributeListParserRuleCall_2; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class AttributeTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMethodKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModuleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cParamKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPropertyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cReturnKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cTypeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//AttributeTarget:
		//	"field" | "event" | "method" | "module" | "param" | "property" | "return" | "type";
		public ParserRule getRule() { return rule; }

		//"field" | "event" | "method" | "module" | "param" | "property" | "return" | "type"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//"method"
		public Keyword getMethodKeyword_2() { return cMethodKeyword_2; }

		//"module"
		public Keyword getModuleKeyword_3() { return cModuleKeyword_3; }

		//"param"
		public Keyword getParamKeyword_4() { return cParamKeyword_4; }

		//"property"
		public Keyword getPropertyKeyword_5() { return cPropertyKeyword_5; }

		//"return"
		public Keyword getReturnKeyword_6() { return cReturnKeyword_6; }

		//"type"
		public Keyword getTypeKeyword_7() { return cTypeKeyword_7; }
	}

	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_1_0_0 = (RuleCall)cAttributesAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//AttributeList:
		//	{AttributeList} (attributes+=Attribute ",")+;
		public ParserRule getRule() { return rule; }

		//{AttributeList} (attributes+=Attribute ",")+
		public Group getGroup() { return cGroup; }

		//{AttributeList}
		public Action getAttributeListAction_0() { return cAttributeListAction_0; }

		//(attributes+=Attribute ",")+
		public Group getGroup_1() { return cGroup_1; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_1_0() { return cAttributesAssignment_1_0; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_0_0() { return cAttributesAttributeParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttNameAttributeNameParserRuleCall_0_0 = (RuleCall)cAttNameAssignment_0.eContents().get(0);
		private final Assignment cAttArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttArgumentsAttributeArgumentsParserRuleCall_1_0 = (RuleCall)cAttArgumentsAssignment_1.eContents().get(0);
		
		//Attribute:
		//	attName=AttributeName attArguments=AttributeArguments?;
		public ParserRule getRule() { return rule; }

		//attName=AttributeName attArguments=AttributeArguments?
		public Group getGroup() { return cGroup; }

		//attName=AttributeName
		public Assignment getAttNameAssignment_0() { return cAttNameAssignment_0; }

		//AttributeName
		public RuleCall getAttNameAttributeNameParserRuleCall_0_0() { return cAttNameAttributeNameParserRuleCall_0_0; }

		//attArguments=AttributeArguments?
		public Assignment getAttArgumentsAssignment_1() { return cAttArgumentsAssignment_1; }

		//AttributeArguments
		public RuleCall getAttArgumentsAttributeArgumentsParserRuleCall_1_0() { return cAttArgumentsAttributeArgumentsParserRuleCall_1_0; }
	}

	public class AttributeArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpresionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpresionsExpressionListParserRuleCall_2_0 = (RuleCall)cExpresionsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributeArguments:
		//	{AttributeArguments} "(" expresions+=ExpressionList? ")";
		public ParserRule getRule() { return rule; }

		//{AttributeArguments} "(" expresions+=ExpressionList? ")"
		public Group getGroup() { return cGroup; }

		//{AttributeArguments}
		public Action getAttributeArgumentsAction_0() { return cAttributeArgumentsAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expresions+=ExpressionList?
		public Assignment getExpresionsAssignment_2() { return cExpresionsAssignment_2; }

		//ExpressionList
		public RuleCall getExpresionsExpressionListParserRuleCall_2_0() { return cExpresionsExpressionListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpresionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpresionsExpressionParserRuleCall_0_0 = (RuleCall)cExpresionsAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionList:
		//	(expresions+=Expression ",")+;
		public ParserRule getRule() { return rule; }

		//(expresions+=Expression ",")+
		public Group getGroup() { return cGroup; }

		//expresions+=Expression
		public Assignment getExpresionsAssignment_0() { return cExpresionsAssignment_0; }

		//Expression
		public RuleCall getExpresionsExpressionParserRuleCall_0_0() { return cExpresionsExpressionParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cUnaryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnaryUnaryExpressionParserRuleCall_1_0 = (RuleCall)cUnaryAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExp2Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExp2Expression2ParserRuleCall_2_0_0 = (RuleCall)cExp2Assignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cBARTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cExpAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExpAssignment_2_1_1.eContents().get(0);
		private final Assignment cOtherExp2Assignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cOtherExp2Expression2ParserRuleCall_2_1_2_0 = (RuleCall)cOtherExp2Assignment_2_1_2.eContents().get(0);
		
		//Expression:
		//	{Expression} unary=UnaryExpression (exp2=Expression2 | BAR exp=Expression otherExp2=Expression2);
		public ParserRule getRule() { return rule; }

		//{Expression} unary=UnaryExpression (exp2=Expression2 | BAR exp=Expression otherExp2=Expression2)
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//unary=UnaryExpression
		public Assignment getUnaryAssignment_1() { return cUnaryAssignment_1; }

		//UnaryExpression
		public RuleCall getUnaryUnaryExpressionParserRuleCall_1_0() { return cUnaryUnaryExpressionParserRuleCall_1_0; }

		//exp2=Expression2 | BAR exp=Expression otherExp2=Expression2
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//exp2=Expression2
		public Assignment getExp2Assignment_2_0() { return cExp2Assignment_2_0; }

		//Expression2
		public RuleCall getExp2Expression2ParserRuleCall_2_0_0() { return cExp2Expression2ParserRuleCall_2_0_0; }

		//BAR exp=Expression otherExp2=Expression2
		public Group getGroup_2_1() { return cGroup_2_1; }

		//BAR
		public RuleCall getBARTerminalRuleCall_2_1_0() { return cBARTerminalRuleCall_2_1_0; }

		//exp=Expression
		public Assignment getExpAssignment_2_1_1() { return cExpAssignment_2_1_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_1_1_0() { return cExpExpressionParserRuleCall_2_1_1_0; }

		//otherExp2=Expression2
		public Assignment getOtherExp2Assignment_2_1_2() { return cOtherExp2Assignment_2_1_2; }

		//Expression2
		public RuleCall getOtherExp2Expression2ParserRuleCall_2_1_2_0() { return cOtherExp2Expression2ParserRuleCall_2_1_2_0; }
	}

	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpression2Action_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cInternalExpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cInternalExpExpressionParserRuleCall_1_0_1_0 = (RuleCall)cInternalExpAssignment_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cExpAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_1_0_3_0 = (RuleCall)cExpAssignment_1_0_3.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_0_4_0 = (RuleCall)cInternalExp2Assignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpAssignment_1_1_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_1_2_0 = (RuleCall)cInternalExp2Assignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExpAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExpAssignment_1_2_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_2_2_0 = (RuleCall)cInternalExp2Assignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cBARTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Assignment cExpAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_3_1_0 = (RuleCall)cExpAssignment_1_3_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_3_2_0 = (RuleCall)cInternalExp2Assignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cCircumflexAccentKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cExpAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_4_1_0 = (RuleCall)cExpAssignment_1_4_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_4_2_0 = (RuleCall)cInternalExp2Assignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final RuleCall cAMPERSANDTerminalRuleCall_1_5_0 = (RuleCall)cGroup_1_5.eContents().get(0);
		private final Assignment cExpAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_5_1_0 = (RuleCall)cExpAssignment_1_5_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_5_2_0 = (RuleCall)cInternalExp2Assignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final RuleCall cEXPRESSION_EQUALITY_OPERATORTerminalRuleCall_1_6_0 = (RuleCall)cGroup_1_6.eContents().get(0);
		private final Assignment cExpAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_6_1_0 = (RuleCall)cExpAssignment_1_6_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_6_2_0 = (RuleCall)cInternalExp2Assignment_1_6_2.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final RuleCall cExpressionRelationalOperatorParserRuleCall_1_7_0 = (RuleCall)cGroup_1_7.eContents().get(0);
		private final Assignment cExpAssignment_1_7_1 = (Assignment)cGroup_1_7.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_7_1_0 = (RuleCall)cExpAssignment_1_7_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_7_2_0 = (RuleCall)cInternalExp2Assignment_1_7_2.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cAlternatives_1.eContents().get(8);
		private final Keyword cIsKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Assignment cBuildInTypeAssignment_1_8_1 = (Assignment)cGroup_1_8.eContents().get(1);
		private final RuleCall cBuildInTypeBuiltInTypeParserRuleCall_1_8_1_0 = (RuleCall)cBuildInTypeAssignment_1_8_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_8_2_0 = (RuleCall)cInternalExp2Assignment_1_8_2.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cAlternatives_1.eContents().get(9);
		private final RuleCall cExpressionShiftOperatorParserRuleCall_1_9_0 = (RuleCall)cGroup_1_9.eContents().get(0);
		private final Assignment cExpAssignment_1_9_1 = (Assignment)cGroup_1_9.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_9_1_0 = (RuleCall)cExpAssignment_1_9_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_9_2 = (Assignment)cGroup_1_9.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_9_2_0 = (RuleCall)cInternalExp2Assignment_1_9_2.eContents().get(0);
		private final Group cGroup_1_10 = (Group)cAlternatives_1.eContents().get(10);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_1_10_0 = (RuleCall)cGroup_1_10.eContents().get(0);
		private final Assignment cExpAssignment_1_10_1 = (Assignment)cGroup_1_10.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_10_1_0 = (RuleCall)cExpAssignment_1_10_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_10_2 = (Assignment)cGroup_1_10.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_10_2_0 = (RuleCall)cInternalExp2Assignment_1_10_2.eContents().get(0);
		private final Group cGroup_1_11 = (Group)cAlternatives_1.eContents().get(11);
		private final Keyword cAsteriskKeyword_1_11_0 = (Keyword)cGroup_1_11.eContents().get(0);
		private final Assignment cExpAssignment_1_11_1 = (Assignment)cGroup_1_11.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_11_1_0 = (RuleCall)cExpAssignment_1_11_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_11_2 = (Assignment)cGroup_1_11.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_11_2_0 = (RuleCall)cInternalExp2Assignment_1_11_2.eContents().get(0);
		private final Group cGroup_1_12 = (Group)cAlternatives_1.eContents().get(12);
		private final Keyword cSolidusKeyword_1_12_0 = (Keyword)cGroup_1_12.eContents().get(0);
		private final Assignment cExpAssignment_1_12_1 = (Assignment)cGroup_1_12.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_12_1_0 = (RuleCall)cExpAssignment_1_12_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_12_2 = (Assignment)cGroup_1_12.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_12_2_0 = (RuleCall)cInternalExp2Assignment_1_12_2.eContents().get(0);
		private final Group cGroup_1_13 = (Group)cAlternatives_1.eContents().get(13);
		private final Keyword cPercentSignKeyword_1_13_0 = (Keyword)cGroup_1_13.eContents().get(0);
		private final Assignment cExpAssignment_1_13_1 = (Assignment)cGroup_1_13.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_13_1_0 = (RuleCall)cExpAssignment_1_13_1.eContents().get(0);
		private final Assignment cInternalExp2Assignment_1_13_2 = (Assignment)cGroup_1_13.eContents().get(2);
		private final RuleCall cInternalExp2Expression2ParserRuleCall_1_13_2_0 = (RuleCall)cInternalExp2Assignment_1_13_2.eContents().get(0);
		
		//Expression2:
		//	{Expression2} ("?" internalExp+=Expression ":" exp+=Expression internalExp2+=Expression2 | "||" exp+=Expression
		//	internalExp2+=Expression2 | "&&" exp+=Expression internalExp2+=Expression2 | BAR exp+=Expression
		//	internalExp2+=Expression2 | "^" exp+=Expression internalExp2+=Expression2 | AMPERSAND exp+=Expression
		//	internalExp2+=Expression2 | EXPRESSION_EQUALITY_OPERATOR exp+=Expression internalExp2+=Expression2 |
		//	ExpressionRelationalOperator exp+=Expression internalExp2+=Expression2 | "is" buildInType+=BuiltInType
		//	internalExp2+=Expression2 | ExpressionShiftOperator exp+=Expression internalExp2+=Expression2 | OPERATOR_OR_SIGN
		//	exp+=Expression internalExp2+=Expression2 | "*" exp+=Expression internalExp2+=Expression2 | "/" exp+=Expression
		//	internalExp2+=Expression2 | "%" exp+=Expression internalExp2+=Expression2)*;
		public ParserRule getRule() { return rule; }

		//{Expression2} ("?" internalExp+=Expression ":" exp+=Expression internalExp2+=Expression2 | "||" exp+=Expression
		//internalExp2+=Expression2 | "&&" exp+=Expression internalExp2+=Expression2 | BAR exp+=Expression
		//internalExp2+=Expression2 | "^" exp+=Expression internalExp2+=Expression2 | AMPERSAND exp+=Expression
		//internalExp2+=Expression2 | EXPRESSION_EQUALITY_OPERATOR exp+=Expression internalExp2+=Expression2 |
		//ExpressionRelationalOperator exp+=Expression internalExp2+=Expression2 | "is" buildInType+=BuiltInType
		//internalExp2+=Expression2 | ExpressionShiftOperator exp+=Expression internalExp2+=Expression2 | OPERATOR_OR_SIGN
		//exp+=Expression internalExp2+=Expression2 | "*" exp+=Expression internalExp2+=Expression2 | "/" exp+=Expression
		//internalExp2+=Expression2 | "%" exp+=Expression internalExp2+=Expression2)*
		public Group getGroup() { return cGroup; }

		//{Expression2}
		public Action getExpression2Action_0() { return cExpression2Action_0; }

		//("?" internalExp+=Expression ":" exp+=Expression internalExp2+=Expression2 | "||" exp+=Expression
		//internalExp2+=Expression2 | "&&" exp+=Expression internalExp2+=Expression2 | BAR exp+=Expression
		//internalExp2+=Expression2 | "^" exp+=Expression internalExp2+=Expression2 | AMPERSAND exp+=Expression
		//internalExp2+=Expression2 | EXPRESSION_EQUALITY_OPERATOR exp+=Expression internalExp2+=Expression2 |
		//ExpressionRelationalOperator exp+=Expression internalExp2+=Expression2 | "is" buildInType+=BuiltInType
		//internalExp2+=Expression2 | ExpressionShiftOperator exp+=Expression internalExp2+=Expression2 | OPERATOR_OR_SIGN
		//exp+=Expression internalExp2+=Expression2 | "*" exp+=Expression internalExp2+=Expression2 | "/" exp+=Expression
		//internalExp2+=Expression2 | "%" exp+=Expression internalExp2+=Expression2)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"?" internalExp+=Expression ":" exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_0() { return cQuestionMarkKeyword_1_0_0; }

		//internalExp+=Expression
		public Assignment getInternalExpAssignment_1_0_1() { return cInternalExpAssignment_1_0_1; }

		//Expression
		public RuleCall getInternalExpExpressionParserRuleCall_1_0_1_0() { return cInternalExpExpressionParserRuleCall_1_0_1_0; }

		//":"
		public Keyword getColonKeyword_1_0_2() { return cColonKeyword_1_0_2; }

		//exp+=Expression
		public Assignment getExpAssignment_1_0_3() { return cExpAssignment_1_0_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0_3_0() { return cExpExpressionParserRuleCall_1_0_3_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_0_4() { return cInternalExp2Assignment_1_0_4; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_0_4_0() { return cInternalExp2Expression2ParserRuleCall_1_0_4_0; }

		//"||" exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_0() { return cVerticalLineVerticalLineKeyword_1_1_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_1_1() { return cExpAssignment_1_1_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_1_0() { return cExpExpressionParserRuleCall_1_1_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_1_2() { return cInternalExp2Assignment_1_1_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_1_2_0() { return cInternalExp2Expression2ParserRuleCall_1_1_2_0; }

		//"&&" exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_2_0() { return cAmpersandAmpersandKeyword_1_2_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_2_1() { return cExpAssignment_1_2_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_2_1_0() { return cExpExpressionParserRuleCall_1_2_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_2_2() { return cInternalExp2Assignment_1_2_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_2_2_0() { return cInternalExp2Expression2ParserRuleCall_1_2_2_0; }

		//BAR exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_3() { return cGroup_1_3; }

		//BAR
		public RuleCall getBARTerminalRuleCall_1_3_0() { return cBARTerminalRuleCall_1_3_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_3_1() { return cExpAssignment_1_3_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_3_1_0() { return cExpExpressionParserRuleCall_1_3_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_3_2() { return cInternalExp2Assignment_1_3_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_3_2_0() { return cInternalExp2Expression2ParserRuleCall_1_3_2_0; }

		//"^" exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_4_0() { return cCircumflexAccentKeyword_1_4_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_4_1() { return cExpAssignment_1_4_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_4_1_0() { return cExpExpressionParserRuleCall_1_4_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_4_2() { return cInternalExp2Assignment_1_4_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_4_2_0() { return cInternalExp2Expression2ParserRuleCall_1_4_2_0; }

		//AMPERSAND exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_5() { return cGroup_1_5; }

		//AMPERSAND
		public RuleCall getAMPERSANDTerminalRuleCall_1_5_0() { return cAMPERSANDTerminalRuleCall_1_5_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_5_1() { return cExpAssignment_1_5_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_5_1_0() { return cExpExpressionParserRuleCall_1_5_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_5_2() { return cInternalExp2Assignment_1_5_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_5_2_0() { return cInternalExp2Expression2ParserRuleCall_1_5_2_0; }

		//EXPRESSION_EQUALITY_OPERATOR exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_6() { return cGroup_1_6; }

		//EXPRESSION_EQUALITY_OPERATOR
		public RuleCall getEXPRESSION_EQUALITY_OPERATORTerminalRuleCall_1_6_0() { return cEXPRESSION_EQUALITY_OPERATORTerminalRuleCall_1_6_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_6_1() { return cExpAssignment_1_6_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_6_1_0() { return cExpExpressionParserRuleCall_1_6_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_6_2() { return cInternalExp2Assignment_1_6_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_6_2_0() { return cInternalExp2Expression2ParserRuleCall_1_6_2_0; }

		//ExpressionRelationalOperator exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_7() { return cGroup_1_7; }

		//ExpressionRelationalOperator
		public RuleCall getExpressionRelationalOperatorParserRuleCall_1_7_0() { return cExpressionRelationalOperatorParserRuleCall_1_7_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_7_1() { return cExpAssignment_1_7_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_7_1_0() { return cExpExpressionParserRuleCall_1_7_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_7_2() { return cInternalExp2Assignment_1_7_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_7_2_0() { return cInternalExp2Expression2ParserRuleCall_1_7_2_0; }

		//"is" buildInType+=BuiltInType internalExp2+=Expression2
		public Group getGroup_1_8() { return cGroup_1_8; }

		//"is"
		public Keyword getIsKeyword_1_8_0() { return cIsKeyword_1_8_0; }

		//buildInType+=BuiltInType
		public Assignment getBuildInTypeAssignment_1_8_1() { return cBuildInTypeAssignment_1_8_1; }

		//BuiltInType
		public RuleCall getBuildInTypeBuiltInTypeParserRuleCall_1_8_1_0() { return cBuildInTypeBuiltInTypeParserRuleCall_1_8_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_8_2() { return cInternalExp2Assignment_1_8_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_8_2_0() { return cInternalExp2Expression2ParserRuleCall_1_8_2_0; }

		//ExpressionShiftOperator exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_9() { return cGroup_1_9; }

		//ExpressionShiftOperator
		public RuleCall getExpressionShiftOperatorParserRuleCall_1_9_0() { return cExpressionShiftOperatorParserRuleCall_1_9_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_9_1() { return cExpAssignment_1_9_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_9_1_0() { return cExpExpressionParserRuleCall_1_9_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_9_2() { return cInternalExp2Assignment_1_9_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_9_2_0() { return cInternalExp2Expression2ParserRuleCall_1_9_2_0; }

		//OPERATOR_OR_SIGN exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_10() { return cGroup_1_10; }

		//OPERATOR_OR_SIGN
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_1_10_0() { return cOPERATOR_OR_SIGNTerminalRuleCall_1_10_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_10_1() { return cExpAssignment_1_10_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_10_1_0() { return cExpExpressionParserRuleCall_1_10_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_10_2() { return cInternalExp2Assignment_1_10_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_10_2_0() { return cInternalExp2Expression2ParserRuleCall_1_10_2_0; }

		//"*" exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_11() { return cGroup_1_11; }

		//"*"
		public Keyword getAsteriskKeyword_1_11_0() { return cAsteriskKeyword_1_11_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_11_1() { return cExpAssignment_1_11_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_11_1_0() { return cExpExpressionParserRuleCall_1_11_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_11_2() { return cInternalExp2Assignment_1_11_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_11_2_0() { return cInternalExp2Expression2ParserRuleCall_1_11_2_0; }

		//"/" exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_12() { return cGroup_1_12; }

		//"/"
		public Keyword getSolidusKeyword_1_12_0() { return cSolidusKeyword_1_12_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_12_1() { return cExpAssignment_1_12_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_12_1_0() { return cExpExpressionParserRuleCall_1_12_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_12_2() { return cInternalExp2Assignment_1_12_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_12_2_0() { return cInternalExp2Expression2ParserRuleCall_1_12_2_0; }

		//"%" exp+=Expression internalExp2+=Expression2
		public Group getGroup_1_13() { return cGroup_1_13; }

		//"%"
		public Keyword getPercentSignKeyword_1_13_0() { return cPercentSignKeyword_1_13_0; }

		//exp+=Expression
		public Assignment getExpAssignment_1_13_1() { return cExpAssignment_1_13_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_13_1_0() { return cExpExpressionParserRuleCall_1_13_1_0; }

		//internalExp2+=Expression2
		public Assignment getInternalExp2Assignment_1_13_2() { return cInternalExp2Assignment_1_13_2; }

		//Expression2
		public RuleCall getInternalExp2Expression2ParserRuleCall_1_13_2_0() { return cInternalExp2Expression2ParserRuleCall_1_13_2_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cExpUnaryOperatorAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cExpUnaryOperatorExpressionUnaryOperatorParserRuleCall_0_1_0_0 = (RuleCall)cExpUnaryOperatorAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_1_1_0 = (RuleCall)cTypeAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_1_2 = (Keyword)cGroup_0_1_1.eContents().get(2);
		private final Assignment cUnaryExpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cUnaryExpUnaryExpressionParserRuleCall_0_2_0 = (RuleCall)cUnaryExpAssignment_0_2.eContents().get(0);
		private final Assignment cPrimaryExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryExpPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cPrimaryExpAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//	{UnaryExpression} (expUnaryOperator=ExpressionUnaryOperator | "(" type=Type ")") unaryExp=UnaryExpression |
		//	primaryExp=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{UnaryExpression} (expUnaryOperator=ExpressionUnaryOperator | "(" type=Type ")") unaryExp=UnaryExpression |
		//primaryExp=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpression} (expUnaryOperator=ExpressionUnaryOperator | "(" type=Type ")") unaryExp=UnaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_0_0() { return cUnaryExpressionAction_0_0; }

		//expUnaryOperator=ExpressionUnaryOperator | "(" type=Type ")"
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//expUnaryOperator=ExpressionUnaryOperator
		public Assignment getExpUnaryOperatorAssignment_0_1_0() { return cExpUnaryOperatorAssignment_0_1_0; }

		//ExpressionUnaryOperator
		public RuleCall getExpUnaryOperatorExpressionUnaryOperatorParserRuleCall_0_1_0_0() { return cExpUnaryOperatorExpressionUnaryOperatorParserRuleCall_0_1_0_0; }

		//"(" type=Type ")"
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_1_0() { return cLeftParenthesisKeyword_0_1_1_0; }

		//type=Type
		public Assignment getTypeAssignment_0_1_1_1() { return cTypeAssignment_0_1_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_1_1_1_0() { return cTypeTypeParserRuleCall_0_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_1_2() { return cRightParenthesisKeyword_0_1_1_2; }

		//unaryExp=UnaryExpression
		public Assignment getUnaryExpAssignment_0_2() { return cUnaryExpAssignment_0_2; }

		//UnaryExpression
		public RuleCall getUnaryExpUnaryExpressionParserRuleCall_0_2_0() { return cUnaryExpUnaryExpressionParserRuleCall_0_2_0; }

		//primaryExp=PrimaryExpression
		public Assignment getPrimaryExpAssignment_1() { return cPrimaryExpAssignment_1; }

		//PrimaryExpression
		public RuleCall getPrimaryExpPrimaryExpressionParserRuleCall_1_0() { return cPrimaryExpPrimaryExpressionParserRuleCall_1_0; }
	}

	public class ExpressionUnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionUnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOPERATOR_OR_PUNCTUATORTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINCREMENT_DECREMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAsteriskKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ExpressionUnaryOperator:
		//	OPERATOR_OR_PUNCTUATOR | INCREMENT_DECREMENT | "!" | "~" | "*";
		public ParserRule getRule() { return rule; }

		//OPERATOR_OR_PUNCTUATOR | INCREMENT_DECREMENT | "!" | "~" | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OPERATOR_OR_PUNCTUATOR
		public RuleCall getOPERATOR_OR_PUNCTUATORTerminalRuleCall_0() { return cOPERATOR_OR_PUNCTUATORTerminalRuleCall_0; }

		//INCREMENT_DECREMENT
		public RuleCall getINCREMENT_DECREMENTTerminalRuleCall_1() { return cINCREMENT_DECREMENTTerminalRuleCall_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }

		//"~"
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }

		//"*"
		public Keyword getAsteriskKeyword_4() { return cAsteriskKeyword_4; }
	}

	public class ExpressionShiftOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExpressionShiftOperator:
		//	"<<" | ">>";
		public ParserRule getRule() { return rule; }

		//"<<" | ">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignKeyword_1; }
	}

	public class ExpressionRelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionRelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLESS_THANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGREATER_THANTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ExpressionRelationalOperator:
		//	LESS_THAN | GREATER_THAN | "<=" | ">=" | "is" | "as";
		public ParserRule getRule() { return rule; }

		//LESS_THAN | GREATER_THAN | "<=" | ">=" | "is" | "as"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0() { return cLESS_THANTerminalRuleCall_0; }

		//GREATER_THAN
		public RuleCall getGREATER_THANTerminalRuleCall_1() { return cGREATER_THANTerminalRuleCall_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"is"
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }

		//"as"
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQualifiedIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiedIdQualifiedIdentifierParserRuleCall_1_0 = (RuleCall)cQualifiedIdAssignment_1.eContents().get(0);
		
		//AttributeName:
		//	{AttributeName} qualifiedId=QualifiedIdentifier;
		public ParserRule getRule() { return rule; }

		//{AttributeName} qualifiedId=QualifiedIdentifier
		public Group getGroup() { return cGroup; }

		//{AttributeName}
		public Action getAttributeNameAction_0() { return cAttributeNameAction_0; }

		//qualifiedId=QualifiedIdentifier
		public Assignment getQualifiedIdAssignment_1() { return cQualifiedIdAssignment_1; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdQualifiedIdentifierParserRuleCall_1_0() { return cQualifiedIdQualifiedIdentifierParserRuleCall_1_0; }
	}

	public class UsingDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsingDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUsingDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cUsingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUsingsQualifiedIdentifierParserRuleCall_3_0 = (RuleCall)cUsingsAssignment_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//UsingDirective:
		//	{UsingDirective} "using" (name=Identifier "=")? usings=QualifiedIdentifier SEMICOLON;
		public ParserRule getRule() { return rule; }

		//{UsingDirective} "using" (name=Identifier "=")? usings=QualifiedIdentifier SEMICOLON
		public Group getGroup() { return cGroup; }

		//{UsingDirective}
		public Action getUsingDirectiveAction_0() { return cUsingDirectiveAction_0; }

		//"using"
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }

		//(name=Identifier "=")?
		public Group getGroup_2() { return cGroup_2; }

		//name=Identifier
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0_0() { return cNameIdentifierParserRuleCall_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//usings=QualifiedIdentifier
		public Assignment getUsingsAssignment_3() { return cUsingsAssignment_3; }

		//QualifiedIdentifier
		public RuleCall getUsingsQualifiedIdentifierParserRuleCall_3_0() { return cUsingsQualifiedIdentifierParserRuleCall_3_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNonArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNonArrayNonArrayTypeParserRuleCall_1_0 = (RuleCall)cNonArrayAssignment_1.eContents().get(0);
		private final RuleCall cRANK_SPECIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Type:
		//	{Type} nonArray=NonArrayType RANK_SPECIFIER*;
		public ParserRule getRule() { return rule; }

		//{Type} nonArray=NonArrayType RANK_SPECIFIER*
		public Group getGroup() { return cGroup; }

		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }

		//nonArray=NonArrayType
		public Assignment getNonArrayAssignment_1() { return cNonArrayAssignment_1; }

		//NonArrayType
		public RuleCall getNonArrayNonArrayTypeParserRuleCall_1_0() { return cNonArrayNonArrayTypeParserRuleCall_1_0; }

		//RANK_SPECIFIER*
		public RuleCall getRANK_SPECIFIERTerminalRuleCall_2() { return cRANK_SPECIFIERTerminalRuleCall_2; }
	}

	public class IntegralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegralTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSbyteKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cShortKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUshortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUintKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUlongKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCharKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//IntegralType:
		//	{IntegralType} "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char";
		public ParserRule getRule() { return rule; }

		//{IntegralType} "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntegralType} "sbyte"
		public Group getGroup_0() { return cGroup_0; }

		//{IntegralType}
		public Action getIntegralTypeAction_0_0() { return cIntegralTypeAction_0_0; }

		//"sbyte"
		public Keyword getSbyteKeyword_0_1() { return cSbyteKeyword_0_1; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"short"
		public Keyword getShortKeyword_2() { return cShortKeyword_2; }

		//"ushort"
		public Keyword getUshortKeyword_3() { return cUshortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"uint"
		public Keyword getUintKeyword_5() { return cUintKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"ulong"
		public Keyword getUlongKeyword_7() { return cUlongKeyword_7; }

		//"char"
		public Keyword getCharKeyword_8() { return cCharKeyword_8; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonArrayTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRANK_SPECIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ArrayType:
		//	NonArrayType RANK_SPECIFIER+;
		public ParserRule getRule() { return rule; }

		//NonArrayType RANK_SPECIFIER+
		public Group getGroup() { return cGroup; }

		//NonArrayType
		public RuleCall getNonArrayTypeParserRuleCall_0() { return cNonArrayTypeParserRuleCall_0; }

		//RANK_SPECIFIER+
		public RuleCall getRANK_SPECIFIERTerminalRuleCall_1() { return cRANK_SPECIFIERTerminalRuleCall_1; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEnumModifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEnumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeIntegralTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Assignment cEnumBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnumBodyEnumBodyParserRuleCall_5_0 = (RuleCall)cEnumBodyAssignment_5.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//EnumType:
		//	Attributes EnumModifier* "enum" ID (":" type=IntegralType)? enumBody=EnumBody SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//Attributes EnumModifier* "enum" ID (":" type=IntegralType)? enumBody=EnumBody SEMICOLON?
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//EnumModifier*
		public RuleCall getEnumModifierParserRuleCall_1() { return cEnumModifierParserRuleCall_1; }

		//"enum"
		public Keyword getEnumKeyword_2() { return cEnumKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//(":" type=IntegralType)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//type=IntegralType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//IntegralType
		public RuleCall getTypeIntegralTypeParserRuleCall_4_1_0() { return cTypeIntegralTypeParserRuleCall_4_1_0; }

		//enumBody=EnumBody
		public Assignment getEnumBodyAssignment_5() { return cEnumBodyAssignment_5; }

		//EnumBody
		public RuleCall getEnumBodyEnumBodyParserRuleCall_5_0() { return cEnumBodyEnumBodyParserRuleCall_5_0; }

		//SEMICOLON?
		public RuleCall getSEMICOLONTerminalRuleCall_6() { return cSEMICOLONTerminalRuleCall_6; }
	}

	public class NonArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNonArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cQualifiedAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cQualifiedQualifiedIdentifierParserRuleCall_1_0_0 = (RuleCall)cQualifiedAssignment_1_0.eContents().get(0);
		private final Assignment cBuiltTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cBuiltTypeBuiltInTypeParserRuleCall_1_1_0 = (RuleCall)cBuiltTypeAssignment_1_1.eContents().get(0);
		
		//NonArrayType:
		//	{NonArrayType} (qualified=QualifiedIdentifier | builtType=BuiltInType);
		public ParserRule getRule() { return rule; }

		//{NonArrayType} (qualified=QualifiedIdentifier | builtType=BuiltInType)
		public Group getGroup() { return cGroup; }

		//{NonArrayType}
		public Action getNonArrayTypeAction_0() { return cNonArrayTypeAction_0; }

		//qualified=QualifiedIdentifier | builtType=BuiltInType
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//qualified=QualifiedIdentifier
		public Assignment getQualifiedAssignment_1_0() { return cQualifiedAssignment_1_0; }

		//QualifiedIdentifier
		public RuleCall getQualifiedQualifiedIdentifierParserRuleCall_1_0_0() { return cQualifiedQualifiedIdentifierParserRuleCall_1_0_0; }

		//builtType=BuiltInType
		public Assignment getBuiltTypeAssignment_1_1() { return cBuiltTypeAssignment_1_1; }

		//BuiltInType
		public RuleCall getBuiltTypeBuiltInTypeParserRuleCall_1_1_0() { return cBuiltTypeBuiltInTypeParserRuleCall_1_1_0; }
	}

	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQualifiedIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdsIdentifierParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedIdentifier:
		//	{QualifiedIdentifier} (ids+=Identifier ".")+;
		public ParserRule getRule() { return rule; }

		//{QualifiedIdentifier} (ids+=Identifier ".")+
		public Group getGroup() { return cGroup; }

		//{QualifiedIdentifier}
		public Action getQualifiedIdentifierAction_0() { return cQualifiedIdentifierAction_0; }

		//(ids+=Identifier ".")+
		public Group getGroup_1() { return cGroup_1; }

		//ids+=Identifier
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }

		//Identifier
		public RuleCall getIdsIdentifierParserRuleCall_1_0_0() { return cIdsIdentifierParserRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
	}

	public class BuiltInTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBuiltInTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cBuiltInClassTypeParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cBoolKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDecimalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFloatKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDoubleKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//BuiltInType:
		//	{BuiltInType} BuiltInClassType | "bool" | "decimal" | "float" | "double";
		public ParserRule getRule() { return rule; }

		//{BuiltInType} BuiltInClassType | "bool" | "decimal" | "float" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BuiltInType} BuiltInClassType
		public Group getGroup_0() { return cGroup_0; }

		//{BuiltInType}
		public Action getBuiltInTypeAction_0_0() { return cBuiltInTypeAction_0_0; }

		//BuiltInClassType
		public RuleCall getBuiltInClassTypeParserRuleCall_0_1() { return cBuiltInClassTypeParserRuleCall_0_1; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }

		//"decimal"
		public Keyword getDecimalKeyword_2() { return cDecimalKeyword_2; }

		//"float"
		public Keyword getFloatKeyword_3() { return cFloatKeyword_3; }

		//"double"
		public Keyword getDoubleKeyword_4() { return cDoubleKeyword_4; }
	}

	public class BuiltInClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInClassType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BuiltInClassType:
		//	"object" | "string";
		public ParserRule getRule() { return rule; }

		//"object" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class EnumBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEnumBodyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cEnumDeclarationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cEnumDeclarationsEnumMemberDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cEnumDeclarationsAssignment_1_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//EnumBody:
		//	{EnumBody} "{" "}" | "{" (enumDeclarations+=EnumMemberDeclaration ",")+ ","? "}";
		public ParserRule getRule() { return rule; }

		//{EnumBody} "{" "}" | "{" (enumDeclarations+=EnumMemberDeclaration ",")+ ","? "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EnumBody} "{" "}"
		public Group getGroup_0() { return cGroup_0; }

		//{EnumBody}
		public Action getEnumBodyAction_0_0() { return cEnumBodyAction_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }

		//"{" (enumDeclarations+=EnumMemberDeclaration ",")+ ","? "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(enumDeclarations+=EnumMemberDeclaration ",")+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//enumDeclarations+=EnumMemberDeclaration
		public Assignment getEnumDeclarationsAssignment_1_1_0() { return cEnumDeclarationsAssignment_1_1_0; }

		//EnumMemberDeclaration
		public RuleCall getEnumDeclarationsEnumMemberDeclarationParserRuleCall_1_1_0_0() { return cEnumDeclarationsEnumMemberDeclarationParserRuleCall_1_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class EnumMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttAttributesParserRuleCall_0_0 = (RuleCall)cAttAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_2_1_0 = (RuleCall)cExpAssignment_2_1.eContents().get(0);
		
		//EnumMemberDeclaration:
		//	att=Attributes name=Identifier ("=" exp=Expression)?;
		public ParserRule getRule() { return rule; }

		//att=Attributes name=Identifier ("=" exp=Expression)?
		public Group getGroup() { return cGroup; }

		//att=Attributes
		public Assignment getAttAssignment_0() { return cAttAssignment_0; }

		//Attributes
		public RuleCall getAttAttributesParserRuleCall_0_0() { return cAttAttributesParserRuleCall_0_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//("=" exp=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//exp=Expression
		public Assignment getExpAssignment_2_1() { return cExpAssignment_2_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_1_0() { return cExpExpressionParserRuleCall_2_1_0; }
	}

	public class EnumModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//EnumModifier:
		//	"new" | "public" | "protected" | "internal" | "private";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLabelStatAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelStatLabeledStatementParserRuleCall_0_1_0 = (RuleCall)cLabelStatAssignment_0_1.eContents().get(0);
		private final Assignment cDeclareStatAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclareStatDeclarationStatementParserRuleCall_1_0 = (RuleCall)cDeclareStatAssignment_1.eContents().get(0);
		private final Assignment cEmbeddedStatAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEmbeddedStatEmbeddedStatementParserRuleCall_2_0 = (RuleCall)cEmbeddedStatAssignment_2.eContents().get(0);
		
		//Statement:
		//	{Statement} labelStat=LabeledStatement | declareStat=DeclarationStatement | embeddedStat=EmbeddedStatement;
		public ParserRule getRule() { return rule; }

		//{Statement} labelStat=LabeledStatement | declareStat=DeclarationStatement | embeddedStat=EmbeddedStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Statement} labelStat=LabeledStatement
		public Group getGroup_0() { return cGroup_0; }

		//{Statement}
		public Action getStatementAction_0_0() { return cStatementAction_0_0; }

		//labelStat=LabeledStatement
		public Assignment getLabelStatAssignment_0_1() { return cLabelStatAssignment_0_1; }

		//LabeledStatement
		public RuleCall getLabelStatLabeledStatementParserRuleCall_0_1_0() { return cLabelStatLabeledStatementParserRuleCall_0_1_0; }

		//declareStat=DeclarationStatement
		public Assignment getDeclareStatAssignment_1() { return cDeclareStatAssignment_1; }

		//DeclarationStatement
		public RuleCall getDeclareStatDeclarationStatementParserRuleCall_1_0() { return cDeclareStatDeclarationStatementParserRuleCall_1_0; }

		//embeddedStat=EmbeddedStatement
		public Assignment getEmbeddedStatAssignment_2() { return cEmbeddedStatAssignment_2; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatEmbeddedStatementParserRuleCall_2_0() { return cEmbeddedStatEmbeddedStatementParserRuleCall_2_0; }
	}

	public class DeclarationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclarationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLocalVariableDeclarationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cLocalVariableDeclarationAssignment_1_0.eContents().get(0);
		private final Assignment cLocalCOnstantAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLocalCOnstantLocalConstantDeclarationParserRuleCall_1_1_0 = (RuleCall)cLocalCOnstantAssignment_1_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DeclarationStatement returns DeclarationStatment:
		//	{DeclarationStatment} (localVariableDeclaration=LocalVariableDeclaration | localCOnstant=LocalConstantDeclaration)
		//	SEMICOLON;
		public ParserRule getRule() { return rule; }

		//{DeclarationStatment} (localVariableDeclaration=LocalVariableDeclaration | localCOnstant=LocalConstantDeclaration)
		//SEMICOLON
		public Group getGroup() { return cGroup; }

		//{DeclarationStatment}
		public Action getDeclarationStatmentAction_0() { return cDeclarationStatmentAction_0; }

		//localVariableDeclaration=LocalVariableDeclaration | localCOnstant=LocalConstantDeclaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//localVariableDeclaration=LocalVariableDeclaration
		public Assignment getLocalVariableDeclarationAssignment_1_0() { return cLocalVariableDeclarationAssignment_1_0; }

		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_1_0_0() { return cLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_1_0_0; }

		//localCOnstant=LocalConstantDeclaration
		public Assignment getLocalCOnstantAssignment_1_1() { return cLocalCOnstantAssignment_1_1; }

		//LocalConstantDeclaration
		public RuleCall getLocalCOnstantLocalConstantDeclarationParserRuleCall_1_1_0() { return cLocalCOnstantLocalConstantDeclarationParserRuleCall_1_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2() { return cSEMICOLONTerminalRuleCall_2; }
	}

	public class LocalConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalconstantDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoTypeParserRuleCall_2_0 = (RuleCall)cTipoAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cConstDeclaratorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cConstDeclaratorConstantDeclaratorParserRuleCall_3_0_0 = (RuleCall)cConstDeclaratorAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//LocalConstantDeclaration returns LocalconstantDeclaration:
		//	{LocalconstantDeclaration} "const" tipo=Type (constDeclarator+=ConstantDeclarator ",")+;
		public ParserRule getRule() { return rule; }

		//{LocalconstantDeclaration} "const" tipo=Type (constDeclarator+=ConstantDeclarator ",")+
		public Group getGroup() { return cGroup; }

		//{LocalconstantDeclaration}
		public Action getLocalconstantDeclarationAction_0() { return cLocalconstantDeclarationAction_0; }

		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }

		//tipo=Type
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }

		//Type
		public RuleCall getTipoTypeParserRuleCall_2_0() { return cTipoTypeParserRuleCall_2_0; }

		//(constDeclarator+=ConstantDeclarator ",")+
		public Group getGroup_3() { return cGroup_3; }

		//constDeclarator+=ConstantDeclarator
		public Assignment getConstDeclaratorAssignment_3_0() { return cConstDeclaratorAssignment_3_0; }

		//ConstantDeclarator
		public RuleCall getConstDeclaratorConstantDeclaratorParserRuleCall_3_0_0() { return cConstDeclaratorConstantDeclaratorParserRuleCall_3_0_0; }

		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
	}

	public class LabeledStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabeledStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabeledStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatStatementParserRuleCall_3_0 = (RuleCall)cStatAssignment_3.eContents().get(0);
		
		//LabeledStatement:
		//	{LabeledStatement} id=Identifier ":" stat=Statement;
		public ParserRule getRule() { return rule; }

		//{LabeledStatement} id=Identifier ":" stat=Statement
		public Group getGroup() { return cGroup; }

		//{LabeledStatement}
		public Action getLabeledStatementAction_0() { return cLabeledStatementAction_0; }

		//id=Identifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0() { return cIdIdentifierParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//stat=Statement
		public Assignment getStatAssignment_3() { return cStatAssignment_3; }

		//Statement
		public RuleCall getStatStatementParserRuleCall_3_0() { return cStatStatementParserRuleCall_3_0; }
	}

	public class EmbeddedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmbeddedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmbeddedStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMaybeEmptyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cMaybeEmptyMaybeEmptyBlockParserRuleCall_1_0_0 = (RuleCall)cMaybeEmptyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cStatExpAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cStatExpStatementExpressionParserRuleCall_1_1_0_0 = (RuleCall)cStatExpAssignment_1_1_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cSelectionStatAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cSelectionStatSelectionStatementParserRuleCall_1_2_0 = (RuleCall)cSelectionStatAssignment_1_2.eContents().get(0);
		private final Assignment cIterationStatAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cIterationStatIterationStatementParserRuleCall_1_3_0 = (RuleCall)cIterationStatAssignment_1_3.eContents().get(0);
		private final Assignment cJumpStatAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cJumpStatJumpStatementParserRuleCall_1_4_0 = (RuleCall)cJumpStatAssignment_1_4.eContents().get(0);
		private final Assignment cTryStatAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cTryStatTryStatementParserRuleCall_1_5_0 = (RuleCall)cTryStatAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Alternatives cAlternatives_1_6_0 = (Alternatives)cGroup_1_6.eContents().get(0);
		private final Keyword cCheckedKeyword_1_6_0_0 = (Keyword)cAlternatives_1_6_0.eContents().get(0);
		private final Keyword cUncheckedKeyword_1_6_0_1 = (Keyword)cAlternatives_1_6_0.eContents().get(1);
		private final Assignment cBlockAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_6_1_0 = (RuleCall)cBlockAssignment_1_6_1.eContents().get(0);
		private final Assignment cLockStatAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cLockStatLockStatementParserRuleCall_1_7_0 = (RuleCall)cLockStatAssignment_1_7.eContents().get(0);
		private final Assignment cUsingStatAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cUsingStatUsingStatementParserRuleCall_1_8_0 = (RuleCall)cUsingStatAssignment_1_8.eContents().get(0);
		
		//EmbeddedStatement:
		//	{EmbeddedStatement} (maybeEmpty=MaybeEmptyBlock | statExp=StatementExpression SEMICOLON |
		//	selectionStat=SelectionStatement | iterationStat=IterationStatement | jumpStat=JumpStatement | tryStat=TryStatement |
		//	("checked" | "unchecked") block=Block | lockStat=LockStatement | usingStat=UsingStatement);
		public ParserRule getRule() { return rule; }

		//{EmbeddedStatement} (maybeEmpty=MaybeEmptyBlock | statExp=StatementExpression SEMICOLON |
		//selectionStat=SelectionStatement | iterationStat=IterationStatement | jumpStat=JumpStatement | tryStat=TryStatement |
		//("checked" | "unchecked") block=Block | lockStat=LockStatement | usingStat=UsingStatement)
		public Group getGroup() { return cGroup; }

		//{EmbeddedStatement}
		public Action getEmbeddedStatementAction_0() { return cEmbeddedStatementAction_0; }

		//maybeEmpty=MaybeEmptyBlock | statExp=StatementExpression SEMICOLON | selectionStat=SelectionStatement |
		//iterationStat=IterationStatement | jumpStat=JumpStatement | tryStat=TryStatement | ("checked" | "unchecked")
		//block=Block | lockStat=LockStatement | usingStat=UsingStatement
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//maybeEmpty=MaybeEmptyBlock
		public Assignment getMaybeEmptyAssignment_1_0() { return cMaybeEmptyAssignment_1_0; }

		//MaybeEmptyBlock
		public RuleCall getMaybeEmptyMaybeEmptyBlockParserRuleCall_1_0_0() { return cMaybeEmptyMaybeEmptyBlockParserRuleCall_1_0_0; }

		//statExp=StatementExpression SEMICOLON
		public Group getGroup_1_1() { return cGroup_1_1; }

		//statExp=StatementExpression
		public Assignment getStatExpAssignment_1_1_0() { return cStatExpAssignment_1_1_0; }

		//StatementExpression
		public RuleCall getStatExpStatementExpressionParserRuleCall_1_1_0_0() { return cStatExpStatementExpressionParserRuleCall_1_1_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_1() { return cSEMICOLONTerminalRuleCall_1_1_1; }

		//selectionStat=SelectionStatement
		public Assignment getSelectionStatAssignment_1_2() { return cSelectionStatAssignment_1_2; }

		//SelectionStatement
		public RuleCall getSelectionStatSelectionStatementParserRuleCall_1_2_0() { return cSelectionStatSelectionStatementParserRuleCall_1_2_0; }

		//iterationStat=IterationStatement
		public Assignment getIterationStatAssignment_1_3() { return cIterationStatAssignment_1_3; }

		//IterationStatement
		public RuleCall getIterationStatIterationStatementParserRuleCall_1_3_0() { return cIterationStatIterationStatementParserRuleCall_1_3_0; }

		//jumpStat=JumpStatement
		public Assignment getJumpStatAssignment_1_4() { return cJumpStatAssignment_1_4; }

		//JumpStatement
		public RuleCall getJumpStatJumpStatementParserRuleCall_1_4_0() { return cJumpStatJumpStatementParserRuleCall_1_4_0; }

		//tryStat=TryStatement
		public Assignment getTryStatAssignment_1_5() { return cTryStatAssignment_1_5; }

		//TryStatement
		public RuleCall getTryStatTryStatementParserRuleCall_1_5_0() { return cTryStatTryStatementParserRuleCall_1_5_0; }

		//("checked" | "unchecked") block=Block
		public Group getGroup_1_6() { return cGroup_1_6; }

		//"checked" | "unchecked"
		public Alternatives getAlternatives_1_6_0() { return cAlternatives_1_6_0; }

		//"checked"
		public Keyword getCheckedKeyword_1_6_0_0() { return cCheckedKeyword_1_6_0_0; }

		//"unchecked"
		public Keyword getUncheckedKeyword_1_6_0_1() { return cUncheckedKeyword_1_6_0_1; }

		//block=Block
		public Assignment getBlockAssignment_1_6_1() { return cBlockAssignment_1_6_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_1_6_1_0() { return cBlockBlockParserRuleCall_1_6_1_0; }

		//lockStat=LockStatement
		public Assignment getLockStatAssignment_1_7() { return cLockStatAssignment_1_7; }

		//LockStatement
		public RuleCall getLockStatLockStatementParserRuleCall_1_7_0() { return cLockStatLockStatementParserRuleCall_1_7_0; }

		//usingStat=UsingStatement
		public Assignment getUsingStatAssignment_1_8() { return cUsingStatAssignment_1_8; }

		//UsingStatement
		public RuleCall getUsingStatUsingStatementParserRuleCall_1_8_0() { return cUsingStatUsingStatementParserRuleCall_1_8_0; }
	}

	public class UsingStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsingStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUsingStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cUsingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cResourcAquisitionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cResourcAquisitionResourceAquisitionParserRuleCall_1_2_0 = (RuleCall)cResourcAquisitionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cEmbeddedStatAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cEmbeddedStatEmbeddedStatementParserRuleCall_1_4_0 = (RuleCall)cEmbeddedStatAssignment_1_4.eContents().get(0);
		
		//UsingStatement:
		//	{UsingStatement} ("using" "(" resourcAquisition=ResourceAquisition ")" embeddedStat=EmbeddedStatement);
		public ParserRule getRule() { return rule; }

		//{UsingStatement} ("using" "(" resourcAquisition=ResourceAquisition ")" embeddedStat=EmbeddedStatement)
		public Group getGroup() { return cGroup; }

		//{UsingStatement}
		public Action getUsingStatementAction_0() { return cUsingStatementAction_0; }

		//"using" "(" resourcAquisition=ResourceAquisition ")" embeddedStat=EmbeddedStatement
		public Group getGroup_1() { return cGroup_1; }

		//"using"
		public Keyword getUsingKeyword_1_0() { return cUsingKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//resourcAquisition=ResourceAquisition
		public Assignment getResourcAquisitionAssignment_1_2() { return cResourcAquisitionAssignment_1_2; }

		//ResourceAquisition
		public RuleCall getResourcAquisitionResourceAquisitionParserRuleCall_1_2_0() { return cResourcAquisitionResourceAquisitionParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//embeddedStat=EmbeddedStatement
		public Assignment getEmbeddedStatAssignment_1_4() { return cEmbeddedStatAssignment_1_4; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatEmbeddedStatementParserRuleCall_1_4_0() { return cEmbeddedStatEmbeddedStatementParserRuleCall_1_4_0; }
	}

	public class ResourceAquisitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceAquisition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ResourceAquisition:
		//	LocalVariableDeclaration | Expression;
		public ParserRule getRule() { return rule; }

		//LocalVariableDeclaration | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_0() { return cLocalVariableDeclarationParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTypeParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableVariableDeclaratorParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//LocalVariableDeclaration:
		//	{LocalVariableDeclaration} tipo=Type (variable+=VariableDeclarator ",")+;
		public ParserRule getRule() { return rule; }

		//{LocalVariableDeclaration} tipo=Type (variable+=VariableDeclarator ",")+
		public Group getGroup() { return cGroup; }

		//{LocalVariableDeclaration}
		public Action getLocalVariableDeclarationAction_0() { return cLocalVariableDeclarationAction_0; }

		//tipo=Type
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Type
		public RuleCall getTipoTypeParserRuleCall_1_0() { return cTipoTypeParserRuleCall_1_0; }

		//(variable+=VariableDeclarator ",")+
		public Group getGroup_2() { return cGroup_2; }

		//variable+=VariableDeclarator
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }

		//VariableDeclarator
		public RuleCall getVariableVariableDeclaratorParserRuleCall_2_0_0() { return cVariableVariableDeclaratorParserRuleCall_2_0_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
	}

	public class LockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLockStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEmbeddedStatAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEmbeddedStatEmbeddedStatementParserRuleCall_5_0 = (RuleCall)cEmbeddedStatAssignment_5.eContents().get(0);
		
		//LockStatement:
		//	{LockStatement} "lock" "(" exp=Expression ")" embeddedStat=EmbeddedStatement;
		public ParserRule getRule() { return rule; }

		//{LockStatement} "lock" "(" exp=Expression ")" embeddedStat=EmbeddedStatement
		public Group getGroup() { return cGroup; }

		//{LockStatement}
		public Action getLockStatementAction_0() { return cLockStatementAction_0; }

		//"lock"
		public Keyword getLockKeyword_1() { return cLockKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//embeddedStat=EmbeddedStatement
		public Assignment getEmbeddedStatAssignment_5() { return cEmbeddedStatAssignment_5; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatEmbeddedStatementParserRuleCall_5_0() { return cEmbeddedStatEmbeddedStatementParserRuleCall_5_0; }
	}

	public class TryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTryStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cCatchClausesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cCatchClausesCatchClausesParserRuleCall_3_0_0_0 = (RuleCall)cCatchClausesAssignment_3_0_0.eContents().get(0);
		private final Assignment cFinallyAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cFinallyFinallyClauseParserRuleCall_3_0_1_0 = (RuleCall)cFinallyAssignment_3_0_1.eContents().get(0);
		private final Assignment cFinallyClauseAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFinallyClauseFinallyClauseParserRuleCall_3_1_0 = (RuleCall)cFinallyClauseAssignment_3_1.eContents().get(0);
		
		//TryStatement:
		//	{TryStatement} "try" block=Block (catchClauses=CatchClauses finally=FinallyClause? | finallyClause=FinallyClause);
		public ParserRule getRule() { return rule; }

		//{TryStatement} "try" block=Block (catchClauses=CatchClauses finally=FinallyClause? | finallyClause=FinallyClause)
		public Group getGroup() { return cGroup; }

		//{TryStatement}
		public Action getTryStatementAction_0() { return cTryStatementAction_0; }

		//"try"
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }

		//catchClauses=CatchClauses finally=FinallyClause? | finallyClause=FinallyClause
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//catchClauses=CatchClauses finally=FinallyClause?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//catchClauses=CatchClauses
		public Assignment getCatchClausesAssignment_3_0_0() { return cCatchClausesAssignment_3_0_0; }

		//CatchClauses
		public RuleCall getCatchClausesCatchClausesParserRuleCall_3_0_0_0() { return cCatchClausesCatchClausesParserRuleCall_3_0_0_0; }

		//finally=FinallyClause?
		public Assignment getFinallyAssignment_3_0_1() { return cFinallyAssignment_3_0_1; }

		//FinallyClause
		public RuleCall getFinallyFinallyClauseParserRuleCall_3_0_1_0() { return cFinallyFinallyClauseParserRuleCall_3_0_1_0; }

		//finallyClause=FinallyClause
		public Assignment getFinallyClauseAssignment_3_1() { return cFinallyClauseAssignment_3_1; }

		//FinallyClause
		public RuleCall getFinallyClauseFinallyClauseParserRuleCall_3_1_0() { return cFinallyClauseFinallyClauseParserRuleCall_3_1_0; }
	}

	public class FinallyClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FinallyClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinallyClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFinallyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//FinallyClause:
		//	{FinallyClause} "finally" block=Block;
		public ParserRule getRule() { return rule; }

		//{FinallyClause} "finally" block=Block
		public Group getGroup() { return cGroup; }

		//{FinallyClause}
		public Action getFinallyClauseAction_0() { return cFinallyClauseAction_0; }

		//"finally"
		public Keyword getFinallyKeyword_1() { return cFinallyKeyword_1; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}

	public class CatchClausesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatchClauses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCatchClausesAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSpeciCatchClauseAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cSpeciCatchClauseSpecificCatchClauseParserRuleCall_1_0_0_0 = (RuleCall)cSpeciCatchClauseAssignment_1_0_0.eContents().get(0);
		private final Assignment cGenCatchClauseAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cGenCatchClauseGeneralCatchClauseParserRuleCall_1_0_1_0 = (RuleCall)cGenCatchClauseAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSpecCatchClauseAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cSpecCatchClauseSpecificCatchClauseParserRuleCall_1_1_0_0 = (RuleCall)cSpecCatchClauseAssignment_1_1_0.eContents().get(0);
		private final Assignment cGenCatchClauseAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cGenCatchClauseGeneralCatchClauseParserRuleCall_1_1_1_0 = (RuleCall)cGenCatchClauseAssignment_1_1_1.eContents().get(0);
		
		//CatchClauses:
		//	{CatchClauses} (speciCatchClause+=SpecificCatchClause+ genCatchClause=GeneralCatchClause? |
		//	specCatchClause=SpecificCatchClause* => genCatchClause=GeneralCatchClause);
		public ParserRule getRule() { return rule; }

		//{CatchClauses} (speciCatchClause+=SpecificCatchClause+ genCatchClause=GeneralCatchClause? |
		//specCatchClause=SpecificCatchClause* => genCatchClause=GeneralCatchClause)
		public Group getGroup() { return cGroup; }

		//{CatchClauses}
		public Action getCatchClausesAction_0() { return cCatchClausesAction_0; }

		//speciCatchClause+=SpecificCatchClause+ genCatchClause=GeneralCatchClause? | specCatchClause=SpecificCatchClause* =>
		//genCatchClause=GeneralCatchClause
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//speciCatchClause+=SpecificCatchClause+ genCatchClause=GeneralCatchClause?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//speciCatchClause+=SpecificCatchClause+
		public Assignment getSpeciCatchClauseAssignment_1_0_0() { return cSpeciCatchClauseAssignment_1_0_0; }

		//SpecificCatchClause
		public RuleCall getSpeciCatchClauseSpecificCatchClauseParserRuleCall_1_0_0_0() { return cSpeciCatchClauseSpecificCatchClauseParserRuleCall_1_0_0_0; }

		//genCatchClause=GeneralCatchClause?
		public Assignment getGenCatchClauseAssignment_1_0_1() { return cGenCatchClauseAssignment_1_0_1; }

		//GeneralCatchClause
		public RuleCall getGenCatchClauseGeneralCatchClauseParserRuleCall_1_0_1_0() { return cGenCatchClauseGeneralCatchClauseParserRuleCall_1_0_1_0; }

		//specCatchClause=SpecificCatchClause* => genCatchClause=GeneralCatchClause
		public Group getGroup_1_1() { return cGroup_1_1; }

		//specCatchClause=SpecificCatchClause*
		public Assignment getSpecCatchClauseAssignment_1_1_0() { return cSpecCatchClauseAssignment_1_1_0; }

		//SpecificCatchClause
		public RuleCall getSpecCatchClauseSpecificCatchClauseParserRuleCall_1_1_0_0() { return cSpecCatchClauseSpecificCatchClauseParserRuleCall_1_1_0_0; }

		//=> genCatchClause=GeneralCatchClause
		public Assignment getGenCatchClauseAssignment_1_1_1() { return cGenCatchClauseAssignment_1_1_1; }

		//GeneralCatchClause
		public RuleCall getGenCatchClauseGeneralCatchClauseParserRuleCall_1_1_1_0() { return cGenCatchClauseGeneralCatchClauseParserRuleCall_1_1_1_0; }
	}

	public class GeneralCatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GeneralCatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGeneralCatchclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//GeneralCatchClause returns GeneralCatchclause:
		//	{GeneralCatchclause} "catch" block=Block;
		public ParserRule getRule() { return rule; }

		//{GeneralCatchclause} "catch" block=Block
		public Group getGroup() { return cGroup; }

		//{GeneralCatchclause}
		public Action getGeneralCatchclauseAction_0() { return cGeneralCatchclauseAction_0; }

		//"catch"
		public Keyword getCatchKeyword_1() { return cCatchKeyword_1; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}

	public class SpecificCatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificCatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificCatchClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cBuiltInClassTypeParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Assignment cQualiIdAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cQualiIdQualifiedIdentifierParserRuleCall_3_1_0 = (RuleCall)cQualiIdAssignment_3_1.eContents().get(0);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIdentifierParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		
		//SpecificCatchClause:
		//	{SpecificCatchClause} "catch" "(" (BuiltInClassType | qualiId=QualifiedIdentifier) id=Identifier? ")" block=Block;
		public ParserRule getRule() { return rule; }

		//{SpecificCatchClause} "catch" "(" (BuiltInClassType | qualiId=QualifiedIdentifier) id=Identifier? ")" block=Block
		public Group getGroup() { return cGroup; }

		//{SpecificCatchClause}
		public Action getSpecificCatchClauseAction_0() { return cSpecificCatchClauseAction_0; }

		//"catch"
		public Keyword getCatchKeyword_1() { return cCatchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//BuiltInClassType | qualiId=QualifiedIdentifier
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//BuiltInClassType
		public RuleCall getBuiltInClassTypeParserRuleCall_3_0() { return cBuiltInClassTypeParserRuleCall_3_0; }

		//qualiId=QualifiedIdentifier
		public Assignment getQualiIdAssignment_3_1() { return cQualiIdAssignment_3_1; }

		//QualifiedIdentifier
		public RuleCall getQualiIdQualifiedIdentifierParserRuleCall_3_1_0() { return cQualiIdQualifiedIdentifierParserRuleCall_3_1_0; }

		//id=Identifier?
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_4_0() { return cIdIdentifierParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//block=Block
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_6_0() { return cBlockBlockParserRuleCall_6_0; }
	}

	public class JumpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JumpStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJumpStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBreakStatAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cBreakStatBreakStatementParserRuleCall_1_0_0 = (RuleCall)cBreakStatAssignment_1_0.eContents().get(0);
		private final Assignment cContinueStatAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContinueStatContinueStatementParserRuleCall_1_1_0 = (RuleCall)cContinueStatAssignment_1_1.eContents().get(0);
		private final Assignment cGotoStatAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cGotoStatGotoStatementParserRuleCall_1_2_0 = (RuleCall)cGotoStatAssignment_1_2.eContents().get(0);
		private final Assignment cReturnStatAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cReturnStatReturnStatementParserRuleCall_1_3_0 = (RuleCall)cReturnStatAssignment_1_3.eContents().get(0);
		private final Assignment cThrowStatAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cThrowStatThrowStatementParserRuleCall_1_4_0 = (RuleCall)cThrowStatAssignment_1_4.eContents().get(0);
		
		//JumpStatement:
		//	{JumpStatement} (breakStat=BreakStatement | continueStat=ContinueStatement | gotoStat=GotoStatement |
		//	returnStat=ReturnStatement | throwStat=ThrowStatement);
		public ParserRule getRule() { return rule; }

		//{JumpStatement} (breakStat=BreakStatement | continueStat=ContinueStatement | gotoStat=GotoStatement |
		//returnStat=ReturnStatement | throwStat=ThrowStatement)
		public Group getGroup() { return cGroup; }

		//{JumpStatement}
		public Action getJumpStatementAction_0() { return cJumpStatementAction_0; }

		//breakStat=BreakStatement | continueStat=ContinueStatement | gotoStat=GotoStatement | returnStat=ReturnStatement |
		//throwStat=ThrowStatement
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//breakStat=BreakStatement
		public Assignment getBreakStatAssignment_1_0() { return cBreakStatAssignment_1_0; }

		//BreakStatement
		public RuleCall getBreakStatBreakStatementParserRuleCall_1_0_0() { return cBreakStatBreakStatementParserRuleCall_1_0_0; }

		//continueStat=ContinueStatement
		public Assignment getContinueStatAssignment_1_1() { return cContinueStatAssignment_1_1; }

		//ContinueStatement
		public RuleCall getContinueStatContinueStatementParserRuleCall_1_1_0() { return cContinueStatContinueStatementParserRuleCall_1_1_0; }

		//gotoStat=GotoStatement
		public Assignment getGotoStatAssignment_1_2() { return cGotoStatAssignment_1_2; }

		//GotoStatement
		public RuleCall getGotoStatGotoStatementParserRuleCall_1_2_0() { return cGotoStatGotoStatementParserRuleCall_1_2_0; }

		//returnStat=ReturnStatement
		public Assignment getReturnStatAssignment_1_3() { return cReturnStatAssignment_1_3; }

		//ReturnStatement
		public RuleCall getReturnStatReturnStatementParserRuleCall_1_3_0() { return cReturnStatReturnStatementParserRuleCall_1_3_0; }

		//throwStat=ThrowStatement
		public Assignment getThrowStatAssignment_1_4() { return cThrowStatAssignment_1_4; }

		//ThrowStatement
		public RuleCall getThrowStatThrowStatementParserRuleCall_1_4_0() { return cThrowStatThrowStatementParserRuleCall_1_4_0; }
	}

	public class ThrowStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThrowStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ThrowStatement:
		//	{ThrowStatement} "throw" expression=Expression? SEMICOLON;
		public ParserRule getRule() { return rule; }

		//{ThrowStatement} "throw" expression=Expression? SEMICOLON
		public Group getGroup() { return cGroup; }

		//{ThrowStatement}
		public Action getThrowStatementAction_0() { return cThrowStatementAction_0; }

		//"throw"
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cReturnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ReturnStatement:
		//	{ReturnStatement} ("return" expression=Expression? SEMICOLON);
		public ParserRule getRule() { return rule; }

		//{ReturnStatement} ("return" expression=Expression? SEMICOLON)
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//"return" expression=Expression? SEMICOLON
		public Group getGroup_1() { return cGroup_1; }

		//"return"
		public Keyword getReturnKeyword_1_0() { return cReturnKeyword_1_0; }

		//expression=Expression?
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_2() { return cSEMICOLONTerminalRuleCall_1_2; }
	}

	public class GotoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GotoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGotoStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGotoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cGotoKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cCaseKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cExpressionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_1_5_0 = (RuleCall)cExpressionAssignment_1_5.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final Keyword cGotoKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cDefaultKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_9 = (RuleCall)cGroup_1.eContents().get(9);
		
		//GotoStatement:
		//	{GotoStatement} ("goto" id=Identifier SEMICOLON "goto" "case" expression=Expression SEMICOLON "goto" "default"
		//	SEMICOLON);
		public ParserRule getRule() { return rule; }

		//{GotoStatement} ("goto" id=Identifier SEMICOLON "goto" "case" expression=Expression SEMICOLON "goto" "default"
		//SEMICOLON)
		public Group getGroup() { return cGroup; }

		//{GotoStatement}
		public Action getGotoStatementAction_0() { return cGotoStatementAction_0; }

		//"goto" id=Identifier SEMICOLON "goto" "case" expression=Expression SEMICOLON "goto" "default" SEMICOLON
		public Group getGroup_1() { return cGroup_1; }

		//"goto"
		public Keyword getGotoKeyword_1_0() { return cGotoKeyword_1_0; }

		//id=Identifier
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_1_0() { return cIdIdentifierParserRuleCall_1_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_2() { return cSEMICOLONTerminalRuleCall_1_2; }

		//"goto"
		public Keyword getGotoKeyword_1_3() { return cGotoKeyword_1_3; }

		//"case"
		public Keyword getCaseKeyword_1_4() { return cCaseKeyword_1_4; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_5() { return cExpressionAssignment_1_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_5_0() { return cExpressionExpressionParserRuleCall_1_5_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_6() { return cSEMICOLONTerminalRuleCall_1_6; }

		//"goto"
		public Keyword getGotoKeyword_1_7() { return cGotoKeyword_1_7; }

		//"default"
		public Keyword getDefaultKeyword_1_8() { return cDefaultKeyword_1_8; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_9() { return cSEMICOLONTerminalRuleCall_1_9; }
	}

	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ContinueStatement:
		//	{ContinueStatement} "continue" SEMICOLON;
		public ParserRule getRule() { return rule; }

		//{ContinueStatement} "continue" SEMICOLON
		public Group getGroup() { return cGroup; }

		//{ContinueStatement}
		public Action getContinueStatementAction_0() { return cContinueStatementAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2() { return cSEMICOLONTerminalRuleCall_2; }
	}

	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//BreakStatement:
		//	{BreakStatement} "break" SEMICOLON;
		public ParserRule getRule() { return rule; }

		//{BreakStatement} "break" SEMICOLON
		public Group getGroup() { return cGroup; }

		//{BreakStatement}
		public Action getBreakStatementAction_0() { return cBreakStatementAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2() { return cSEMICOLONTerminalRuleCall_2; }
	}

	public class IterationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IterationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIterationStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWhileStatementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cWhileStatementWhileStatementParserRuleCall_1_0_0 = (RuleCall)cWhileStatementAssignment_1_0.eContents().get(0);
		private final Assignment cDoStatementAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDoStatementDoStatementParserRuleCall_1_1_0 = (RuleCall)cDoStatementAssignment_1_1.eContents().get(0);
		private final Assignment cForStatementAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cForStatementForStatementParserRuleCall_1_2_0 = (RuleCall)cForStatementAssignment_1_2.eContents().get(0);
		private final Assignment cForeachStatementAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cForeachStatementForeachStatementParserRuleCall_1_3_0 = (RuleCall)cForeachStatementAssignment_1_3.eContents().get(0);
		
		//IterationStatement:
		//	{IterationStatement} (whileStatement=WhileStatement | doStatement=DoStatement | forStatement=ForStatement |
		//	foreachStatement=ForeachStatement);
		public ParserRule getRule() { return rule; }

		//{IterationStatement} (whileStatement=WhileStatement | doStatement=DoStatement | forStatement=ForStatement |
		//foreachStatement=ForeachStatement)
		public Group getGroup() { return cGroup; }

		//{IterationStatement}
		public Action getIterationStatementAction_0() { return cIterationStatementAction_0; }

		//whileStatement=WhileStatement | doStatement=DoStatement | forStatement=ForStatement | foreachStatement=ForeachStatement
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//whileStatement=WhileStatement
		public Assignment getWhileStatementAssignment_1_0() { return cWhileStatementAssignment_1_0; }

		//WhileStatement
		public RuleCall getWhileStatementWhileStatementParserRuleCall_1_0_0() { return cWhileStatementWhileStatementParserRuleCall_1_0_0; }

		//doStatement=DoStatement
		public Assignment getDoStatementAssignment_1_1() { return cDoStatementAssignment_1_1; }

		//DoStatement
		public RuleCall getDoStatementDoStatementParserRuleCall_1_1_0() { return cDoStatementDoStatementParserRuleCall_1_1_0; }

		//forStatement=ForStatement
		public Assignment getForStatementAssignment_1_2() { return cForStatementAssignment_1_2; }

		//ForStatement
		public RuleCall getForStatementForStatementParserRuleCall_1_2_0() { return cForStatementForStatementParserRuleCall_1_2_0; }

		//foreachStatement=ForeachStatement
		public Assignment getForeachStatementAssignment_1_3() { return cForeachStatementAssignment_1_3; }

		//ForeachStatement
		public RuleCall getForeachStatementForeachStatementParserRuleCall_1_3_0() { return cForeachStatementForeachStatementParserRuleCall_1_3_0; }
	}

	public class ForeachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForeachStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cForeachKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTipoAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTipoTypeParserRuleCall_1_2_0 = (RuleCall)cTipoAssignment_1_2.eContents().get(0);
		private final Assignment cIdAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIdIdentifierParserRuleCall_1_3_0 = (RuleCall)cIdAssignment_1_3.eContents().get(0);
		private final Keyword cInKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cExpressionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_1_5_0 = (RuleCall)cExpressionAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cEmbeddedStatementAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cEmbeddedStatementEmbeddedStatementParserRuleCall_1_7_0 = (RuleCall)cEmbeddedStatementAssignment_1_7.eContents().get(0);
		
		//ForeachStatement:
		//	{ForeachStatement} ("foreach" "(" tipo=Type id=Identifier "in" expression=Expression ")"
		//	embeddedStatement=EmbeddedStatement);
		public ParserRule getRule() { return rule; }

		//{ForeachStatement} ("foreach" "(" tipo=Type id=Identifier "in" expression=Expression ")"
		//embeddedStatement=EmbeddedStatement)
		public Group getGroup() { return cGroup; }

		//{ForeachStatement}
		public Action getForeachStatementAction_0() { return cForeachStatementAction_0; }

		//"foreach" "(" tipo=Type id=Identifier "in" expression=Expression ")" embeddedStatement=EmbeddedStatement
		public Group getGroup_1() { return cGroup_1; }

		//"foreach"
		public Keyword getForeachKeyword_1_0() { return cForeachKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//tipo=Type
		public Assignment getTipoAssignment_1_2() { return cTipoAssignment_1_2; }

		//Type
		public RuleCall getTipoTypeParserRuleCall_1_2_0() { return cTipoTypeParserRuleCall_1_2_0; }

		//id=Identifier
		public Assignment getIdAssignment_1_3() { return cIdAssignment_1_3; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_3_0() { return cIdIdentifierParserRuleCall_1_3_0; }

		//"in"
		public Keyword getInKeyword_1_4() { return cInKeyword_1_4; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_5() { return cExpressionAssignment_1_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_5_0() { return cExpressionExpressionParserRuleCall_1_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }

		//embeddedStatement=EmbeddedStatement
		public Assignment getEmbeddedStatementAssignment_1_7() { return cEmbeddedStatementAssignment_1_7; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatementEmbeddedStatementParserRuleCall_1_7_0() { return cEmbeddedStatementEmbeddedStatementParserRuleCall_1_7_0; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cForKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cForInitializerAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cForInitializerForInitializerParserRuleCall_1_2_0 = (RuleCall)cForInitializerAssignment_1_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cExpressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_1_4_0 = (RuleCall)cExpressionAssignment_1_4.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Assignment cStatementExpressionListAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cStatementExpressionListStatementExpressionListParserRuleCall_1_6_0 = (RuleCall)cStatementExpressionListAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cEmbeddedStatementAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cEmbeddedStatementEmbeddedStatementParserRuleCall_1_8_0 = (RuleCall)cEmbeddedStatementAssignment_1_8.eContents().get(0);
		
		//ForStatement:
		//	{ForStatement} ("for" "(" forInitializer+=ForInitializer? SEMICOLON expression+=Expression? SEMICOLON
		//	statementExpressionList+=StatementExpressionList? ")" embeddedStatement=EmbeddedStatement);
		public ParserRule getRule() { return rule; }

		//{ForStatement} ("for" "(" forInitializer+=ForInitializer? SEMICOLON expression+=Expression? SEMICOLON
		//statementExpressionList+=StatementExpressionList? ")" embeddedStatement=EmbeddedStatement)
		public Group getGroup() { return cGroup; }

		//{ForStatement}
		public Action getForStatementAction_0() { return cForStatementAction_0; }

		//"for" "(" forInitializer+=ForInitializer? SEMICOLON expression+=Expression? SEMICOLON
		//statementExpressionList+=StatementExpressionList? ")" embeddedStatement=EmbeddedStatement
		public Group getGroup_1() { return cGroup_1; }

		//"for"
		public Keyword getForKeyword_1_0() { return cForKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//forInitializer+=ForInitializer?
		public Assignment getForInitializerAssignment_1_2() { return cForInitializerAssignment_1_2; }

		//ForInitializer
		public RuleCall getForInitializerForInitializerParserRuleCall_1_2_0() { return cForInitializerForInitializerParserRuleCall_1_2_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_3() { return cSEMICOLONTerminalRuleCall_1_3; }

		//expression+=Expression?
		public Assignment getExpressionAssignment_1_4() { return cExpressionAssignment_1_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_4_0() { return cExpressionExpressionParserRuleCall_1_4_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_5() { return cSEMICOLONTerminalRuleCall_1_5; }

		//statementExpressionList+=StatementExpressionList?
		public Assignment getStatementExpressionListAssignment_1_6() { return cStatementExpressionListAssignment_1_6; }

		//StatementExpressionList
		public RuleCall getStatementExpressionListStatementExpressionListParserRuleCall_1_6_0() { return cStatementExpressionListStatementExpressionListParserRuleCall_1_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }

		//embeddedStatement=EmbeddedStatement
		public Assignment getEmbeddedStatementAssignment_1_8() { return cEmbeddedStatementAssignment_1_8; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatementEmbeddedStatementParserRuleCall_1_8_0() { return cEmbeddedStatementEmbeddedStatementParserRuleCall_1_8_0; }
	}

	public class ForInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLocalVariableDeclarationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cLocalVariableDeclarationAssignment_1_0.eContents().get(0);
		private final Assignment cStatementExpressionListAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementExpressionListStatementExpressionListParserRuleCall_1_1_0 = (RuleCall)cStatementExpressionListAssignment_1_1.eContents().get(0);
		
		//ForInitializer:
		//	{ForInitializer} (localVariableDeclaration=LocalVariableDeclaration |
		//	statementExpressionList=StatementExpressionList);
		public ParserRule getRule() { return rule; }

		//{ForInitializer} (localVariableDeclaration=LocalVariableDeclaration | statementExpressionList=StatementExpressionList)
		public Group getGroup() { return cGroup; }

		//{ForInitializer}
		public Action getForInitializerAction_0() { return cForInitializerAction_0; }

		//localVariableDeclaration=LocalVariableDeclaration | statementExpressionList=StatementExpressionList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//localVariableDeclaration=LocalVariableDeclaration
		public Assignment getLocalVariableDeclarationAssignment_1_0() { return cLocalVariableDeclarationAssignment_1_0; }

		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_1_0_0() { return cLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_1_0_0; }

		//statementExpressionList=StatementExpressionList
		public Assignment getStatementExpressionListAssignment_1_1() { return cStatementExpressionListAssignment_1_1; }

		//StatementExpressionList
		public RuleCall getStatementExpressionListStatementExpressionListParserRuleCall_1_1_0() { return cStatementExpressionListStatementExpressionListParserRuleCall_1_1_0; }
	}

	public class StatementExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementExpressionListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cListStatementExpressionParserRuleCall_1_0_0 = (RuleCall)cListAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StatementExpressionList:
		//	{StatementExpressionList} (list+=StatementExpression ",")+;
		public ParserRule getRule() { return rule; }

		//{StatementExpressionList} (list+=StatementExpression ",")+
		public Group getGroup() { return cGroup; }

		//{StatementExpressionList}
		public Action getStatementExpressionListAction_0() { return cStatementExpressionListAction_0; }

		//(list+=StatementExpression ",")+
		public Group getGroup_1() { return cGroup_1; }

		//list+=StatementExpression
		public Assignment getListAssignment_1_0() { return cListAssignment_1_0; }

		//StatementExpression
		public RuleCall getListStatementExpressionParserRuleCall_1_0_0() { return cListStatementExpressionParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}

	public class StatementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cPrimaryExpressionAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cPrimaryExpressionPrimaryExpressionParserRuleCall_0_1_0_0 = (RuleCall)cPrimaryExpressionAssignment_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_1_0 = (Group)cAlternatives_0_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1_1_0_0 = (Keyword)cGroup_0_1_1_0.eContents().get(0);
		private final Assignment cArgumentListAssignment_0_1_1_0_1 = (Assignment)cGroup_0_1_1_0.eContents().get(1);
		private final RuleCall cArgumentListArgumentListParserRuleCall_0_1_1_0_1_0 = (RuleCall)cArgumentListAssignment_0_1_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_1_0_2 = (Keyword)cGroup_0_1_1_0.eContents().get(2);
		private final Assignment cIncrimentDecrementAssignment_0_1_1_1 = (Assignment)cAlternatives_0_1_1.eContents().get(1);
		private final RuleCall cIncrimentDecrementINCREMENT_DECREMENTTerminalRuleCall_0_1_1_1_0 = (RuleCall)cIncrimentDecrementAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNewKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTipoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTipoTypeParserRuleCall_1_1_0 = (RuleCall)cTipoAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cArgumentListAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArgumentListArgumentListParserRuleCall_1_3_0 = (RuleCall)cArgumentListAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cUnaryExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cUnaryExpressionUnaryExpressionParserRuleCall_2_0_0 = (RuleCall)cUnaryExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cAssignementOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssignementOperatorASSIGNEMENT_OPERATORTerminalRuleCall_2_1_0 = (RuleCall)cAssignementOperatorAssignment_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cIncrimentDecrementAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cIncrimentDecrementINCREMENT_DECREMENTTerminalRuleCall_3_0_0 = (RuleCall)cIncrimentDecrementAssignment_3_0.eContents().get(0);
		private final Assignment cPrimaryExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrimaryExpressionPrimaryExpressionParserRuleCall_3_1_0 = (RuleCall)cPrimaryExpressionAssignment_3_1.eContents().get(0);
		
		//StatementExpression:
		//	{StatementExpression} (primaryExpression=PrimaryExpression ("(" argumentList=ArgumentList ")" |
		//	incrimentDecrement=INCREMENT_DECREMENT)) | "new" tipo=Type "(" argumentList=ArgumentList ")" |
		//	unaryExpression=UnaryExpression assignementOperator=ASSIGNEMENT_OPERATOR expression=Expression |
		//	incrimentDecrement=INCREMENT_DECREMENT primaryExpression=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{StatementExpression} (primaryExpression=PrimaryExpression ("(" argumentList=ArgumentList ")" |
		//incrimentDecrement=INCREMENT_DECREMENT)) | "new" tipo=Type "(" argumentList=ArgumentList ")" |
		//unaryExpression=UnaryExpression assignementOperator=ASSIGNEMENT_OPERATOR expression=Expression |
		//incrimentDecrement=INCREMENT_DECREMENT primaryExpression=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{StatementExpression} (primaryExpression=PrimaryExpression ("(" argumentList=ArgumentList ")" |
		//incrimentDecrement=INCREMENT_DECREMENT))
		public Group getGroup_0() { return cGroup_0; }

		//{StatementExpression}
		public Action getStatementExpressionAction_0_0() { return cStatementExpressionAction_0_0; }

		//primaryExpression=PrimaryExpression ("(" argumentList=ArgumentList ")" | incrimentDecrement=INCREMENT_DECREMENT)
		public Group getGroup_0_1() { return cGroup_0_1; }

		//primaryExpression=PrimaryExpression
		public Assignment getPrimaryExpressionAssignment_0_1_0() { return cPrimaryExpressionAssignment_0_1_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionPrimaryExpressionParserRuleCall_0_1_0_0() { return cPrimaryExpressionPrimaryExpressionParserRuleCall_0_1_0_0; }

		//"(" argumentList=ArgumentList ")" | incrimentDecrement=INCREMENT_DECREMENT
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }

		//"(" argumentList=ArgumentList ")"
		public Group getGroup_0_1_1_0() { return cGroup_0_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_1_0_0() { return cLeftParenthesisKeyword_0_1_1_0_0; }

		//argumentList=ArgumentList
		public Assignment getArgumentListAssignment_0_1_1_0_1() { return cArgumentListAssignment_0_1_1_0_1; }

		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_0_1_1_0_1_0() { return cArgumentListArgumentListParserRuleCall_0_1_1_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_1_0_2() { return cRightParenthesisKeyword_0_1_1_0_2; }

		//incrimentDecrement=INCREMENT_DECREMENT
		public Assignment getIncrimentDecrementAssignment_0_1_1_1() { return cIncrimentDecrementAssignment_0_1_1_1; }

		//INCREMENT_DECREMENT
		public RuleCall getIncrimentDecrementINCREMENT_DECREMENTTerminalRuleCall_0_1_1_1_0() { return cIncrimentDecrementINCREMENT_DECREMENTTerminalRuleCall_0_1_1_1_0; }

		//"new" tipo=Type "(" argumentList=ArgumentList ")"
		public Group getGroup_1() { return cGroup_1; }

		//"new"
		public Keyword getNewKeyword_1_0() { return cNewKeyword_1_0; }

		//tipo=Type
		public Assignment getTipoAssignment_1_1() { return cTipoAssignment_1_1; }

		//Type
		public RuleCall getTipoTypeParserRuleCall_1_1_0() { return cTipoTypeParserRuleCall_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//argumentList=ArgumentList
		public Assignment getArgumentListAssignment_1_3() { return cArgumentListAssignment_1_3; }

		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_1_3_0() { return cArgumentListArgumentListParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//unaryExpression=UnaryExpression assignementOperator=ASSIGNEMENT_OPERATOR expression=Expression
		public Group getGroup_2() { return cGroup_2; }

		//unaryExpression=UnaryExpression
		public Assignment getUnaryExpressionAssignment_2_0() { return cUnaryExpressionAssignment_2_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionUnaryExpressionParserRuleCall_2_0_0() { return cUnaryExpressionUnaryExpressionParserRuleCall_2_0_0; }

		//assignementOperator=ASSIGNEMENT_OPERATOR
		public Assignment getAssignementOperatorAssignment_2_1() { return cAssignementOperatorAssignment_2_1; }

		//ASSIGNEMENT_OPERATOR
		public RuleCall getAssignementOperatorASSIGNEMENT_OPERATORTerminalRuleCall_2_1_0() { return cAssignementOperatorASSIGNEMENT_OPERATORTerminalRuleCall_2_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0() { return cExpressionExpressionParserRuleCall_2_2_0; }

		//incrimentDecrement=INCREMENT_DECREMENT primaryExpression=PrimaryExpression
		public Group getGroup_3() { return cGroup_3; }

		//incrimentDecrement=INCREMENT_DECREMENT
		public Assignment getIncrimentDecrementAssignment_3_0() { return cIncrimentDecrementAssignment_3_0; }

		//INCREMENT_DECREMENT
		public RuleCall getIncrimentDecrementINCREMENT_DECREMENTTerminalRuleCall_3_0_0() { return cIncrimentDecrementINCREMENT_DECREMENTTerminalRuleCall_3_0_0; }

		//primaryExpression=PrimaryExpression
		public Assignment getPrimaryExpressionAssignment_3_1() { return cPrimaryExpressionAssignment_3_1; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionPrimaryExpressionParserRuleCall_3_1_0() { return cPrimaryExpressionPrimaryExpressionParserRuleCall_3_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cNewKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1_0 = (Group)cAlternatives_1_0_0_1.eContents().get(0);
		private final Assignment cNonArrayTypeAssignment_1_0_0_1_0_0 = (Assignment)cGroup_1_0_0_1_0.eContents().get(0);
		private final RuleCall cNonArrayTypeNonArrayTypeParserRuleCall_1_0_0_1_0_0_0 = (RuleCall)cNonArrayTypeAssignment_1_0_0_1_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0_1_0_1 = (Keyword)cGroup_1_0_0_1_0.eContents().get(1);
		private final Assignment cExpressionListAssignment_1_0_0_1_0_2 = (Assignment)cGroup_1_0_0_1_0.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_0_1_0_2_0 = (RuleCall)cExpressionListAssignment_1_0_0_1_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_0_1_0_3 = (Keyword)cGroup_1_0_0_1_0.eContents().get(3);
		private final Assignment cRankSpecifierAssignment_1_0_0_1_0_4 = (Assignment)cGroup_1_0_0_1_0.eContents().get(4);
		private final RuleCall cRankSpecifierRANK_SPECIFIERTerminalRuleCall_1_0_0_1_0_4_0 = (RuleCall)cRankSpecifierAssignment_1_0_0_1_0_4.eContents().get(0);
		private final Assignment cArrayInitializerAssignment_1_0_0_1_0_5 = (Assignment)cGroup_1_0_0_1_0.eContents().get(5);
		private final RuleCall cArrayInitializerArrayInitializerParserRuleCall_1_0_0_1_0_5_0 = (RuleCall)cArrayInitializerAssignment_1_0_0_1_0_5.eContents().get(0);
		private final Group cGroup_1_0_0_1_1 = (Group)cAlternatives_1_0_0_1.eContents().get(1);
		private final Assignment cArrayTypeAssignment_1_0_0_1_1_0 = (Assignment)cGroup_1_0_0_1_1.eContents().get(0);
		private final RuleCall cArrayTypeArrayTypeParserRuleCall_1_0_0_1_1_0_0 = (RuleCall)cArrayTypeAssignment_1_0_0_1_1_0.eContents().get(0);
		private final Assignment cArrayInitializer2Assignment_1_0_0_1_1_1 = (Assignment)cGroup_1_0_0_1_1.eContents().get(1);
		private final RuleCall cArrayInitializer2ArrayInitializerParserRuleCall_1_0_0_1_1_1_0 = (RuleCall)cArrayInitializer2Assignment_1_0_0_1_1_1.eContents().get(0);
		private final Group cGroup_1_0_0_1_2 = (Group)cAlternatives_1_0_0_1.eContents().get(2);
		private final Assignment cTipoAssignment_1_0_0_1_2_0 = (Assignment)cGroup_1_0_0_1_2.eContents().get(0);
		private final RuleCall cTipoTypeParserRuleCall_1_0_0_1_2_0_0 = (RuleCall)cTipoAssignment_1_0_0_1_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0_1_2_1 = (Keyword)cGroup_1_0_0_1_2.eContents().get(1);
		private final Assignment cArgumentListAssignment_1_0_0_1_2_2 = (Assignment)cGroup_1_0_0_1_2.eContents().get(2);
		private final RuleCall cArgumentListArgumentListParserRuleCall_1_0_0_1_2_2_0 = (RuleCall)cArgumentListAssignment_1_0_0_1_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_0_1_2_3 = (Keyword)cGroup_1_0_0_1_2.eContents().get(3);
		private final Assignment cIdAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0_1_0 = (RuleCall)cIdAssignment_1_0_1.eContents().get(0);
		private final Assignment cLiteralAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0_2_0 = (RuleCall)cLiteralAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cExpressionAssignment_1_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3_2 = (Keyword)cGroup_1_0_3.eContents().get(2);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Keyword cBaseKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Alternatives cAlternatives_1_0_4_1 = (Alternatives)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_4_1_0 = (Group)cAlternatives_1_0_4_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_4_1_0_0 = (Keyword)cGroup_1_0_4_1_0.eContents().get(0);
		private final Assignment cIdAssignment_1_0_4_1_0_1 = (Assignment)cGroup_1_0_4_1_0.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0_4_1_0_1_0 = (RuleCall)cIdAssignment_1_0_4_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_4_1_1 = (Group)cAlternatives_1_0_4_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0_4_1_1_0 = (Keyword)cGroup_1_0_4_1_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_0_4_1_1_1 = (Assignment)cGroup_1_0_4_1_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_4_1_1_1_0 = (RuleCall)cExpressionListAssignment_1_0_4_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_4_1_1_2 = (Keyword)cGroup_1_0_4_1_1.eContents().get(2);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Assignment cPredefinedTypeAssignment_1_0_5_0 = (Assignment)cGroup_1_0_5.eContents().get(0);
		private final RuleCall cPredefinedTypePredefinedTypeParserRuleCall_1_0_5_0_0 = (RuleCall)cPredefinedTypeAssignment_1_0_5_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Assignment cIdAssignment_1_0_5_2 = (Assignment)cGroup_1_0_5.eContents().get(2);
		private final RuleCall cIdIdentifierParserRuleCall_1_0_5_2_0 = (RuleCall)cIdAssignment_1_0_5_2.eContents().get(0);
		private final Keyword cThisKeyword_1_0_6 = (Keyword)cAlternatives_1_0.eContents().get(6);
		private final Group cGroup_1_0_7 = (Group)cAlternatives_1_0.eContents().get(7);
		private final Keyword cTypeofKeyword_1_0_7_0 = (Keyword)cGroup_1_0_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_7_1 = (Keyword)cGroup_1_0_7.eContents().get(1);
		private final Assignment cTypeOrVoidAssignment_1_0_7_2 = (Assignment)cGroup_1_0_7.eContents().get(2);
		private final RuleCall cTypeOrVoidTypeOrVoidParserRuleCall_1_0_7_2_0 = (RuleCall)cTypeOrVoidAssignment_1_0_7_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_7_3 = (Keyword)cGroup_1_0_7.eContents().get(3);
		private final Group cGroup_1_0_8 = (Group)cAlternatives_1_0.eContents().get(8);
		private final Keyword cCheckedKeyword_1_0_8_0 = (Keyword)cGroup_1_0_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_8_1 = (Keyword)cGroup_1_0_8.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0_8_2 = (Assignment)cGroup_1_0_8.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_8_2_0 = (RuleCall)cExpressionAssignment_1_0_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_8_3 = (Keyword)cGroup_1_0_8.eContents().get(3);
		private final Group cGroup_1_0_9 = (Group)cAlternatives_1_0.eContents().get(9);
		private final Keyword cUncheckedKeyword_1_0_9_0 = (Keyword)cGroup_1_0_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_9_1 = (Keyword)cGroup_1_0_9.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0_9_2 = (Assignment)cGroup_1_0_9.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_9_2_0 = (RuleCall)cExpressionAssignment_1_0_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_9_3 = (Keyword)cGroup_1_0_9.eContents().get(3);
		private final Assignment cPrimaryExoression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExoression2PrimaryExpression2ParserRuleCall_1_1_0 = (RuleCall)cPrimaryExoression2Assignment_1_1.eContents().get(0);
		
		//PrimaryExpression:
		//	{PrimaryExpression} (("new" (nonArrayType=NonArrayType "[" expressionList=ExpressionList "]"
		//	rankSpecifier+=RANK_SPECIFIER* arrayInitializer+=ArrayInitializer? | arrayType=ArrayType
		//	arrayInitializer2=ArrayInitializer | tipo=Type "(" argumentList=ArgumentList ")") | id=Identifier | literal=Literal |
		//	"(" expression=Expression ")" | "base" ("." id=Identifier | "[" expressionList=ExpressionList "]") |
		//	predefinedType=PredefinedType "." id=Identifier | "this" | "typeof" "(" typeOrVoid=TypeOrVoid ")" | "checked" "("
		//	expression=Expression ")" | "unchecked" "(" expression=Expression ")") primaryExoression2=PrimaryExpression2);
		public ParserRule getRule() { return rule; }

		//{PrimaryExpression} (("new" (nonArrayType=NonArrayType "[" expressionList=ExpressionList "]"
		//rankSpecifier+=RANK_SPECIFIER* arrayInitializer+=ArrayInitializer? | arrayType=ArrayType
		//arrayInitializer2=ArrayInitializer | tipo=Type "(" argumentList=ArgumentList ")") | id=Identifier | literal=Literal |
		//"(" expression=Expression ")" | "base" ("." id=Identifier | "[" expressionList=ExpressionList "]") |
		//predefinedType=PredefinedType "." id=Identifier | "this" | "typeof" "(" typeOrVoid=TypeOrVoid ")" | "checked" "("
		//expression=Expression ")" | "unchecked" "(" expression=Expression ")") primaryExoression2=PrimaryExpression2)
		public Group getGroup() { return cGroup; }

		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0() { return cPrimaryExpressionAction_0; }

		//("new" (nonArrayType=NonArrayType "[" expressionList=ExpressionList "]" rankSpecifier+=RANK_SPECIFIER*
		//arrayInitializer+=ArrayInitializer? | arrayType=ArrayType arrayInitializer2=ArrayInitializer | tipo=Type "("
		//argumentList=ArgumentList ")") | id=Identifier | literal=Literal | "(" expression=Expression ")" | "base" ("."
		//id=Identifier | "[" expressionList=ExpressionList "]") | predefinedType=PredefinedType "." id=Identifier | "this" |
		//"typeof" "(" typeOrVoid=TypeOrVoid ")" | "checked" "(" expression=Expression ")" | "unchecked" "("
		//expression=Expression ")") primaryExoression2=PrimaryExpression2
		public Group getGroup_1() { return cGroup_1; }

		//"new" (nonArrayType=NonArrayType "[" expressionList=ExpressionList "]" rankSpecifier+=RANK_SPECIFIER*
		//arrayInitializer+=ArrayInitializer? | arrayType=ArrayType arrayInitializer2=ArrayInitializer | tipo=Type "("
		//argumentList=ArgumentList ")") | id=Identifier | literal=Literal | "(" expression=Expression ")" | "base" ("."
		//id=Identifier | "[" expressionList=ExpressionList "]") | predefinedType=PredefinedType "." id=Identifier | "this" |
		//"typeof" "(" typeOrVoid=TypeOrVoid ")" | "checked" "(" expression=Expression ")" | "unchecked" "("
		//expression=Expression ")"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"new" (nonArrayType=NonArrayType "[" expressionList=ExpressionList "]" rankSpecifier+=RANK_SPECIFIER*
		//arrayInitializer+=ArrayInitializer? | arrayType=ArrayType arrayInitializer2=ArrayInitializer | tipo=Type "("
		//argumentList=ArgumentList ")")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//"new"
		public Keyword getNewKeyword_1_0_0_0() { return cNewKeyword_1_0_0_0; }

		//nonArrayType=NonArrayType "[" expressionList=ExpressionList "]" rankSpecifier+=RANK_SPECIFIER*
		//arrayInitializer+=ArrayInitializer? | arrayType=ArrayType arrayInitializer2=ArrayInitializer | tipo=Type "("
		//argumentList=ArgumentList ")"
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//nonArrayType=NonArrayType "[" expressionList=ExpressionList "]" rankSpecifier+=RANK_SPECIFIER*
		//arrayInitializer+=ArrayInitializer?
		public Group getGroup_1_0_0_1_0() { return cGroup_1_0_0_1_0; }

		//nonArrayType=NonArrayType
		public Assignment getNonArrayTypeAssignment_1_0_0_1_0_0() { return cNonArrayTypeAssignment_1_0_0_1_0_0; }

		//NonArrayType
		public RuleCall getNonArrayTypeNonArrayTypeParserRuleCall_1_0_0_1_0_0_0() { return cNonArrayTypeNonArrayTypeParserRuleCall_1_0_0_1_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0_1_0_1() { return cLeftSquareBracketKeyword_1_0_0_1_0_1; }

		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_1_0_0_1_0_2() { return cExpressionListAssignment_1_0_0_1_0_2; }

		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_0_1_0_2_0() { return cExpressionListExpressionListParserRuleCall_1_0_0_1_0_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_0_1_0_3() { return cRightSquareBracketKeyword_1_0_0_1_0_3; }

		//rankSpecifier+=RANK_SPECIFIER*
		public Assignment getRankSpecifierAssignment_1_0_0_1_0_4() { return cRankSpecifierAssignment_1_0_0_1_0_4; }

		//RANK_SPECIFIER
		public RuleCall getRankSpecifierRANK_SPECIFIERTerminalRuleCall_1_0_0_1_0_4_0() { return cRankSpecifierRANK_SPECIFIERTerminalRuleCall_1_0_0_1_0_4_0; }

		//arrayInitializer+=ArrayInitializer?
		public Assignment getArrayInitializerAssignment_1_0_0_1_0_5() { return cArrayInitializerAssignment_1_0_0_1_0_5; }

		//ArrayInitializer
		public RuleCall getArrayInitializerArrayInitializerParserRuleCall_1_0_0_1_0_5_0() { return cArrayInitializerArrayInitializerParserRuleCall_1_0_0_1_0_5_0; }

		//arrayType=ArrayType arrayInitializer2=ArrayInitializer
		public Group getGroup_1_0_0_1_1() { return cGroup_1_0_0_1_1; }

		//arrayType=ArrayType
		public Assignment getArrayTypeAssignment_1_0_0_1_1_0() { return cArrayTypeAssignment_1_0_0_1_1_0; }

		//ArrayType
		public RuleCall getArrayTypeArrayTypeParserRuleCall_1_0_0_1_1_0_0() { return cArrayTypeArrayTypeParserRuleCall_1_0_0_1_1_0_0; }

		//arrayInitializer2=ArrayInitializer
		public Assignment getArrayInitializer2Assignment_1_0_0_1_1_1() { return cArrayInitializer2Assignment_1_0_0_1_1_1; }

		//ArrayInitializer
		public RuleCall getArrayInitializer2ArrayInitializerParserRuleCall_1_0_0_1_1_1_0() { return cArrayInitializer2ArrayInitializerParserRuleCall_1_0_0_1_1_1_0; }

		//tipo=Type "(" argumentList=ArgumentList ")"
		public Group getGroup_1_0_0_1_2() { return cGroup_1_0_0_1_2; }

		//tipo=Type
		public Assignment getTipoAssignment_1_0_0_1_2_0() { return cTipoAssignment_1_0_0_1_2_0; }

		//Type
		public RuleCall getTipoTypeParserRuleCall_1_0_0_1_2_0_0() { return cTipoTypeParserRuleCall_1_0_0_1_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0_1_2_1() { return cLeftParenthesisKeyword_1_0_0_1_2_1; }

		//argumentList=ArgumentList
		public Assignment getArgumentListAssignment_1_0_0_1_2_2() { return cArgumentListAssignment_1_0_0_1_2_2; }

		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_1_0_0_1_2_2_0() { return cArgumentListArgumentListParserRuleCall_1_0_0_1_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_0_1_2_3() { return cRightParenthesisKeyword_1_0_0_1_2_3; }

		//id=Identifier
		public Assignment getIdAssignment_1_0_1() { return cIdAssignment_1_0_1; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0_1_0() { return cIdIdentifierParserRuleCall_1_0_1_0; }

		//literal=Literal
		public Assignment getLiteralAssignment_1_0_2() { return cLiteralAssignment_1_0_2; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0_2_0() { return cLiteralLiteralParserRuleCall_1_0_2_0; }

		//"(" expression=Expression ")"
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_3_0() { return cLeftParenthesisKeyword_1_0_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_0_3_1() { return cExpressionAssignment_1_0_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_3_1_0() { return cExpressionExpressionParserRuleCall_1_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3_2() { return cRightParenthesisKeyword_1_0_3_2; }

		//"base" ("." id=Identifier | "[" expressionList=ExpressionList "]")
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//"base"
		public Keyword getBaseKeyword_1_0_4_0() { return cBaseKeyword_1_0_4_0; }

		//"." id=Identifier | "[" expressionList=ExpressionList "]"
		public Alternatives getAlternatives_1_0_4_1() { return cAlternatives_1_0_4_1; }

		//"." id=Identifier
		public Group getGroup_1_0_4_1_0() { return cGroup_1_0_4_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_4_1_0_0() { return cFullStopKeyword_1_0_4_1_0_0; }

		//id=Identifier
		public Assignment getIdAssignment_1_0_4_1_0_1() { return cIdAssignment_1_0_4_1_0_1; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0_4_1_0_1_0() { return cIdIdentifierParserRuleCall_1_0_4_1_0_1_0; }

		//"[" expressionList=ExpressionList "]"
		public Group getGroup_1_0_4_1_1() { return cGroup_1_0_4_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_4_1_1_0() { return cLeftSquareBracketKeyword_1_0_4_1_1_0; }

		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_1_0_4_1_1_1() { return cExpressionListAssignment_1_0_4_1_1_1; }

		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_4_1_1_1_0() { return cExpressionListExpressionListParserRuleCall_1_0_4_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_4_1_1_2() { return cRightSquareBracketKeyword_1_0_4_1_1_2; }

		//predefinedType=PredefinedType "." id=Identifier
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//predefinedType=PredefinedType
		public Assignment getPredefinedTypeAssignment_1_0_5_0() { return cPredefinedTypeAssignment_1_0_5_0; }

		//PredefinedType
		public RuleCall getPredefinedTypePredefinedTypeParserRuleCall_1_0_5_0_0() { return cPredefinedTypePredefinedTypeParserRuleCall_1_0_5_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_5_1() { return cFullStopKeyword_1_0_5_1; }

		//id=Identifier
		public Assignment getIdAssignment_1_0_5_2() { return cIdAssignment_1_0_5_2; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0_5_2_0() { return cIdIdentifierParserRuleCall_1_0_5_2_0; }

		//"this"
		public Keyword getThisKeyword_1_0_6() { return cThisKeyword_1_0_6; }

		//"typeof" "(" typeOrVoid=TypeOrVoid ")"
		public Group getGroup_1_0_7() { return cGroup_1_0_7; }

		//"typeof"
		public Keyword getTypeofKeyword_1_0_7_0() { return cTypeofKeyword_1_0_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_7_1() { return cLeftParenthesisKeyword_1_0_7_1; }

		//typeOrVoid=TypeOrVoid
		public Assignment getTypeOrVoidAssignment_1_0_7_2() { return cTypeOrVoidAssignment_1_0_7_2; }

		//TypeOrVoid
		public RuleCall getTypeOrVoidTypeOrVoidParserRuleCall_1_0_7_2_0() { return cTypeOrVoidTypeOrVoidParserRuleCall_1_0_7_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_7_3() { return cRightParenthesisKeyword_1_0_7_3; }

		//"checked" "(" expression=Expression ")"
		public Group getGroup_1_0_8() { return cGroup_1_0_8; }

		//"checked"
		public Keyword getCheckedKeyword_1_0_8_0() { return cCheckedKeyword_1_0_8_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_8_1() { return cLeftParenthesisKeyword_1_0_8_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_0_8_2() { return cExpressionAssignment_1_0_8_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_8_2_0() { return cExpressionExpressionParserRuleCall_1_0_8_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_8_3() { return cRightParenthesisKeyword_1_0_8_3; }

		//"unchecked" "(" expression=Expression ")"
		public Group getGroup_1_0_9() { return cGroup_1_0_9; }

		//"unchecked"
		public Keyword getUncheckedKeyword_1_0_9_0() { return cUncheckedKeyword_1_0_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_9_1() { return cLeftParenthesisKeyword_1_0_9_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_0_9_2() { return cExpressionAssignment_1_0_9_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_9_2_0() { return cExpressionExpressionParserRuleCall_1_0_9_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_9_3() { return cRightParenthesisKeyword_1_0_9_3; }

		//primaryExoression2=PrimaryExpression2
		public Assignment getPrimaryExoression2Assignment_1_1() { return cPrimaryExoression2Assignment_1_1; }

		//PrimaryExpression2
		public RuleCall getPrimaryExoression2PrimaryExpression2ParserRuleCall_1_1_0() { return cPrimaryExoression2PrimaryExpression2ParserRuleCall_1_1_0; }
	}

	public class PrimaryExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpression2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Assignment cIdAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0_0_1_0 = (RuleCall)cIdAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cArgumentListAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cArgumentListArgumentListParserRuleCall_1_0_1_1_0 = (RuleCall)cArgumentListAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_2_1_0 = (RuleCall)cExpressionListAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_2 = (Keyword)cGroup_1_0_2.eContents().get(2);
		private final Assignment cIncrementeDecrementAssignment_1_0_3 = (Assignment)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cIncrementeDecrementINCREMENT_DECREMENTTerminalRuleCall_1_0_3_0 = (RuleCall)cIncrementeDecrementAssignment_1_0_3.eContents().get(0);
		private final Assignment cPrimaryExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExpression2PrimaryExpression2ParserRuleCall_1_1_0 = (RuleCall)cPrimaryExpression2Assignment_1_1.eContents().get(0);
		
		//PrimaryExpression2:
		//	{PrimaryExpression2} (("." id+=Identifier | "(" argumentList+=ArgumentList ")" | "[" expressionList+=ExpressionList
		//	"]" | incrementeDecrement+=INCREMENT_DECREMENT) primaryExpression2+=PrimaryExpression2)*;
		public ParserRule getRule() { return rule; }

		//{PrimaryExpression2} (("." id+=Identifier | "(" argumentList+=ArgumentList ")" | "[" expressionList+=ExpressionList "]"
		//| incrementeDecrement+=INCREMENT_DECREMENT) primaryExpression2+=PrimaryExpression2)*
		public Group getGroup() { return cGroup; }

		//{PrimaryExpression2}
		public Action getPrimaryExpression2Action_0() { return cPrimaryExpression2Action_0; }

		//(("." id+=Identifier | "(" argumentList+=ArgumentList ")" | "[" expressionList+=ExpressionList "]" |
		//incrementeDecrement+=INCREMENT_DECREMENT) primaryExpression2+=PrimaryExpression2)*
		public Group getGroup_1() { return cGroup_1; }

		//"." id+=Identifier | "(" argumentList+=ArgumentList ")" | "[" expressionList+=ExpressionList "]" |
		//incrementeDecrement+=INCREMENT_DECREMENT
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"." id+=Identifier
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0() { return cFullStopKeyword_1_0_0_0; }

		//id+=Identifier
		public Assignment getIdAssignment_1_0_0_1() { return cIdAssignment_1_0_0_1; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0_0_1_0() { return cIdIdentifierParserRuleCall_1_0_0_1_0; }

		//"(" argumentList+=ArgumentList ")"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1_0() { return cLeftParenthesisKeyword_1_0_1_0; }

		//argumentList+=ArgumentList
		public Assignment getArgumentListAssignment_1_0_1_1() { return cArgumentListAssignment_1_0_1_1; }

		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_1_0_1_1_0() { return cArgumentListArgumentListParserRuleCall_1_0_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_1_2() { return cRightParenthesisKeyword_1_0_1_2; }

		//"[" expressionList+=ExpressionList "]"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }

		//expressionList+=ExpressionList
		public Assignment getExpressionListAssignment_1_0_2_1() { return cExpressionListAssignment_1_0_2_1; }

		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_2_1_0() { return cExpressionListExpressionListParserRuleCall_1_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2_2() { return cRightSquareBracketKeyword_1_0_2_2; }

		//incrementeDecrement+=INCREMENT_DECREMENT
		public Assignment getIncrementeDecrementAssignment_1_0_3() { return cIncrementeDecrementAssignment_1_0_3; }

		//INCREMENT_DECREMENT
		public RuleCall getIncrementeDecrementINCREMENT_DECREMENTTerminalRuleCall_1_0_3_0() { return cIncrementeDecrementINCREMENT_DECREMENTTerminalRuleCall_1_0_3_0; }

		//primaryExpression2+=PrimaryExpression2
		public Assignment getPrimaryExpression2Assignment_1_1() { return cPrimaryExpression2Assignment_1_1; }

		//PrimaryExpression2
		public RuleCall getPrimaryExpression2PrimaryExpression2ParserRuleCall_1_1_0() { return cPrimaryExpression2PrimaryExpression2ParserRuleCall_1_1_0; }
	}

	public class DoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEmbeddedStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEmbeddedStatementEmbeddedStatementParserRuleCall_1_1_0 = (RuleCall)cEmbeddedStatementAssignment_1_1.eContents().get(0);
		private final Keyword cWhileKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExpressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_1_4_0 = (RuleCall)cExpressionAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		
		//DoStatement:
		//	{DoStatement} ("do" embeddedStatement=EmbeddedStatement "while" "(" expression=Expression ")" SEMICOLON);
		public ParserRule getRule() { return rule; }

		//{DoStatement} ("do" embeddedStatement=EmbeddedStatement "while" "(" expression=Expression ")" SEMICOLON)
		public Group getGroup() { return cGroup; }

		//{DoStatement}
		public Action getDoStatementAction_0() { return cDoStatementAction_0; }

		//"do" embeddedStatement=EmbeddedStatement "while" "(" expression=Expression ")" SEMICOLON
		public Group getGroup_1() { return cGroup_1; }

		//"do"
		public Keyword getDoKeyword_1_0() { return cDoKeyword_1_0; }

		//embeddedStatement=EmbeddedStatement
		public Assignment getEmbeddedStatementAssignment_1_1() { return cEmbeddedStatementAssignment_1_1; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatementEmbeddedStatementParserRuleCall_1_1_0() { return cEmbeddedStatementEmbeddedStatementParserRuleCall_1_1_0; }

		//"while"
		public Keyword getWhileKeyword_1_2() { return cWhileKeyword_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_4() { return cExpressionAssignment_1_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_4_0() { return cExpressionExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_6() { return cSEMICOLONTerminalRuleCall_1_6; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEmbeddedStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEmbeddedStatementEmbeddedStatementParserRuleCall_5_0 = (RuleCall)cEmbeddedStatementAssignment_5.eContents().get(0);
		
		//WhileStatement:
		//	{WhileStatement} "while" "(" expression=Expression ")" embeddedStatement=EmbeddedStatement;
		public ParserRule getRule() { return rule; }

		//{WhileStatement} "while" "(" expression=Expression ")" embeddedStatement=EmbeddedStatement
		public Group getGroup() { return cGroup; }

		//{WhileStatement}
		public Action getWhileStatementAction_0() { return cWhileStatementAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//embeddedStatement=EmbeddedStatement
		public Assignment getEmbeddedStatementAssignment_5() { return cEmbeddedStatementAssignment_5; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatementEmbeddedStatementParserRuleCall_5_0() { return cEmbeddedStatementEmbeddedStatementParserRuleCall_5_0; }
	}

	public class SelectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIfStatementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIfStatementIfStatementParserRuleCall_1_0_0 = (RuleCall)cIfStatementAssignment_1_0.eContents().get(0);
		private final Assignment cSwitchStatementAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSwitchStatementSwitchStatementParserRuleCall_1_1_0 = (RuleCall)cSwitchStatementAssignment_1_1.eContents().get(0);
		
		//SelectionStatement:
		//	{SelectionStatement} (ifStatement=IfStatement | switchStatement=SwitchStatement);
		public ParserRule getRule() { return rule; }

		//{SelectionStatement} (ifStatement=IfStatement | switchStatement=SwitchStatement)
		public Group getGroup() { return cGroup; }

		//{SelectionStatement}
		public Action getSelectionStatementAction_0() { return cSelectionStatementAction_0; }

		//ifStatement=IfStatement | switchStatement=SwitchStatement
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ifStatement=IfStatement
		public Assignment getIfStatementAssignment_1_0() { return cIfStatementAssignment_1_0; }

		//IfStatement
		public RuleCall getIfStatementIfStatementParserRuleCall_1_0_0() { return cIfStatementIfStatementParserRuleCall_1_0_0; }

		//switchStatement=SwitchStatement
		public Assignment getSwitchStatementAssignment_1_1() { return cSwitchStatementAssignment_1_1; }

		//SwitchStatement
		public RuleCall getSwitchStatementSwitchStatementParserRuleCall_1_1_0() { return cSwitchStatementSwitchStatementParserRuleCall_1_1_0; }
	}

	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSwitchKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cSwitchSectionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cSwitchSectionSwitchSectionParserRuleCall_1_5_0 = (RuleCall)cSwitchSectionAssignment_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//SwitchStatement:
		//	{SwitchStatement} ("switch" "(" expression=Expression ")" "{" switchSection+=SwitchSection* "}");
		public ParserRule getRule() { return rule; }

		//{SwitchStatement} ("switch" "(" expression=Expression ")" "{" switchSection+=SwitchSection* "}")
		public Group getGroup() { return cGroup; }

		//{SwitchStatement}
		public Action getSwitchStatementAction_0() { return cSwitchStatementAction_0; }

		//"switch" "(" expression=Expression ")" "{" switchSection+=SwitchSection* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"switch"
		public Keyword getSwitchKeyword_1_0() { return cSwitchKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }

		//switchSection+=SwitchSection*
		public Assignment getSwitchSectionAssignment_1_5() { return cSwitchSectionAssignment_1_5; }

		//SwitchSection
		public RuleCall getSwitchSectionSwitchSectionParserRuleCall_1_5_0() { return cSwitchSectionSwitchSectionParserRuleCall_1_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}

	public class SwitchSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSwitchlabelAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSwitchlabelSwitchLabelParserRuleCall_1_0_0 = (RuleCall)cSwitchlabelAssignment_1_0.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		
		//SwitchSection:
		//	{SwitchSection} (switchlabel+=SwitchLabel+ statement+=Statement+);
		public ParserRule getRule() { return rule; }

		//{SwitchSection} (switchlabel+=SwitchLabel+ statement+=Statement+)
		public Group getGroup() { return cGroup; }

		//{SwitchSection}
		public Action getSwitchSectionAction_0() { return cSwitchSectionAction_0; }

		//switchlabel+=SwitchLabel+ statement+=Statement+
		public Group getGroup_1() { return cGroup_1; }

		//switchlabel+=SwitchLabel+
		public Assignment getSwitchlabelAssignment_1_0() { return cSwitchlabelAssignment_1_0; }

		//SwitchLabel
		public RuleCall getSwitchlabelSwitchLabelParserRuleCall_1_0_0() { return cSwitchlabelSwitchLabelParserRuleCall_1_0_0; }

		//statement+=Statement+
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }
	}

	public class SwitchLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCaseKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDefaultKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//SwitchLabel:
		//	{SwitchLabel} ("case" expression=Expression ":" | "default" ":");
		public ParserRule getRule() { return rule; }

		//{SwitchLabel} ("case" expression=Expression ":" | "default" ":")
		public Group getGroup() { return cGroup; }

		//{SwitchLabel}
		public Action getSwitchLabelAction_0() { return cSwitchLabelAction_0; }

		//"case" expression=Expression ":" | "default" ":"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"case" expression=Expression ":"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"case"
		public Keyword getCaseKeyword_1_0_0() { return cCaseKeyword_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_0_1_0; }

		//":"
		public Keyword getColonKeyword_1_0_2() { return cColonKeyword_1_0_2; }

		//"default" ":"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"default"
		public Keyword getDefaultKeyword_1_1_0() { return cDefaultKeyword_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cEmbeddedStatementAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cEmbeddedStatementEmbeddedStatementParserRuleCall_1_4_0 = (RuleCall)cEmbeddedStatementAssignment_1_4.eContents().get(0);
		private final Assignment cElsePartAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cElsePartElsePartParserRuleCall_1_5_0 = (RuleCall)cElsePartAssignment_1_5.eContents().get(0);
		
		//IfStatement:
		//	{IfStatement} ("if" "(" expression=Expression ")" embeddedStatement=EmbeddedStatement elsePart=ElsePart?);
		public ParserRule getRule() { return rule; }

		//{IfStatement} ("if" "(" expression=Expression ")" embeddedStatement=EmbeddedStatement elsePart=ElsePart?)
		public Group getGroup() { return cGroup; }

		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }

		//"if" "(" expression=Expression ")" embeddedStatement=EmbeddedStatement elsePart=ElsePart?
		public Group getGroup_1() { return cGroup_1; }

		//"if"
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//embeddedStatement=EmbeddedStatement
		public Assignment getEmbeddedStatementAssignment_1_4() { return cEmbeddedStatementAssignment_1_4; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatementEmbeddedStatementParserRuleCall_1_4_0() { return cEmbeddedStatementEmbeddedStatementParserRuleCall_1_4_0; }

		//elsePart=ElsePart?
		public Assignment getElsePartAssignment_1_5() { return cElsePartAssignment_1_5; }

		//ElsePart
		public RuleCall getElsePartElsePartParserRuleCall_1_5_0() { return cElsePartElsePartParserRuleCall_1_5_0; }
	}

	public class ElsePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElsePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElsePartAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEmbeddedStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEmbeddedStatementEmbeddedStatementParserRuleCall_1_1_0 = (RuleCall)cEmbeddedStatementAssignment_1_1.eContents().get(0);
		
		//ElsePart:
		//	{ElsePart} ("else" embeddedStatement=EmbeddedStatement);
		public ParserRule getRule() { return rule; }

		//{ElsePart} ("else" embeddedStatement=EmbeddedStatement)
		public Group getGroup() { return cGroup; }

		//{ElsePart}
		public Action getElsePartAction_0() { return cElsePartAction_0; }

		//"else" embeddedStatement=EmbeddedStatement
		public Group getGroup_1() { return cGroup_1; }

		//"else"
		public Keyword getElseKeyword_1_0() { return cElseKeyword_1_0; }

		//embeddedStatement=EmbeddedStatement
		public Assignment getEmbeddedStatementAssignment_1_1() { return cEmbeddedStatementAssignment_1_1; }

		//EmbeddedStatement
		public RuleCall getEmbeddedStatementEmbeddedStatementParserRuleCall_1_1_0() { return cEmbeddedStatementEmbeddedStatementParserRuleCall_1_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Block:
		//	{Block} ("{" statement+=Statement* "}");
		public ParserRule getRule() { return rule; }

		//{Block} ("{" statement+=Statement* "}")
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{" statement+=Statement* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//statement+=Statement*
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class MaybeEmptyBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaybeEmptyBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMaybeEmptyBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cStatementAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0_1_0 = (RuleCall)cStatementAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//MaybeEmptyBlock:
		//	{MaybeEmptyBlock} ("{" statement+=Statement* "}" | SEMICOLON);
		public ParserRule getRule() { return rule; }

		//{MaybeEmptyBlock} ("{" statement+=Statement* "}" | SEMICOLON)
		public Group getGroup() { return cGroup; }

		//{MaybeEmptyBlock}
		public Action getMaybeEmptyBlockAction_0() { return cMaybeEmptyBlockAction_0; }

		//"{" statement+=Statement* "}" | SEMICOLON
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"{" statement+=Statement* "}"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_0() { return cLeftCurlyBracketKeyword_1_0_0; }

		//statement+=Statement*
		public Assignment getStatementAssignment_1_0_1() { return cStatementAssignment_1_0_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0_1_0() { return cStatementStatementParserRuleCall_1_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_2() { return cRightCurlyBracketKeyword_1_0_2; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1() { return cSEMICOLONTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private PredefinedTypeElements pPredefinedType;
	private LiteralElements pLiteral;
	private NullLiteralElements pNullLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private RealLiteralElements pRealLiteral;
	private ExponentPartElements pExponentPart;
	private CharacterLiteralElements pCharacterLiteral;
	private CharacterElements pCharacter;
	private EscapeSequenceElements pEscapeSequence;
	private UnicodeCharacterEscapeSequenceElements pUnicodeCharacterEscapeSequence;
	private HexadecimalEscapeSequenceElements pHexadecimalEscapeSequence;
	private StringLiteralElements pStringLiteral;
	private VerbatimStringCharacterElements pVerbatimStringCharacter;
	private RegularStringCharacterElements pRegularStringCharacter;
	private CommentElements pComment;
	private IdentifierElements pIdentifier;
	private AvailableIdentifierElements pAvailableIdentifier;
	private IdentifierOrKeywordElements pIdentifierOrKeyword;
	private IdentifierPartCharacterElements pIdentifierPartCharacter;
	private CompilationUnitElements pCompilationUnit;
	private NamespaceMemberDeclarationElements pNamespaceMemberDeclaration;
	private NamespaceDeclarationElements pNamespaceDeclaration;
	private NamespaceBodyElements pNamespaceBody;
	private TypeDeclarationElements pTypeDeclaration;
	private DelegateDeclarationElements pDelegateDeclaration;
	private EnumDeclarationElements pEnumDeclaration;
	private InterfaceDeclarationElements pInterfaceDeclaration;
	private ModifierElements pModifier;
	private InterfaceBodyElements pInterfaceBody;
	private InterfaceMemberDeclarationElements pInterfaceMemberDeclaration;
	private InterfaceIndexerDeclarationElements pInterfaceIndexerDeclaration;
	private InterfaceEventDeclarationElements pInterfaceEventDeclaration;
	private InterfacePropertyDeclarationElements pInterfacePropertyDeclaration;
	private InterfaceAccessorsElements pInterfaceAccessors;
	private InterfaceMethodDeclarationElements pInterfaceMethodDeclaration;
	private StructDeclarationElements pStructDeclaration;
	private StructBodyElements pStructBody;
	private StructMemberDeclarationsElements pStructMemberDeclarations;
	private StructMemberDeclarations2Elements pStructMemberDeclarations2;
	private StructMemberDeclarationElements pStructMemberDeclaration;
	private ClassDeclarationElements pClassDeclaration;
	private ClassBodyElements pClassBody;
	private ClassMemberDeclarationElements pClassMemberDeclaration;
	private StaticConstructorDeclarationElements pStaticConstructorDeclaration;
	private StaticConstructorModifiersElements pStaticConstructorModifiers;
	private DestructorDeclarationElements pDestructorDeclaration;
	private ConstructorDeclarationElements pConstructorDeclaration;
	private ConstructorDeclaratorElements pConstructorDeclarator;
	private ConstructorInitializerElements pConstructorInitializer;
	private ArgumentListElements pArgumentList;
	private ArgumentElements pArgument;
	private RefOrOutElements pRefOrOut;
	private ConstructorModifierElements pConstructorModifier;
	private OperatorDeclarationElements pOperatorDeclaration;
	private OperatorDeclaratorElements pOperatorDeclarator;
	private ConversionOperatorDeclaratorElements pConversionOperatorDeclarator;
	private ConversionKindElements pConversionKind;
	private BinaryOperatorDeclaratorElements pBinaryOperatorDeclarator;
	private OverloadableBinaryOperatorElements pOverloadableBinaryOperator;
	private UnaryOperatorDeclaratorElements pUnaryOperatorDeclarator;
	private OverloadableUnaryOperatorElements pOverloadableUnaryOperator;
	private OperatorModifierElements pOperatorModifier;
	private IndexerDeclarationElements pIndexerDeclaration;
	private IndexerDeclaratorElements pIndexerDeclarator;
	private IndexerModifierElements pIndexerModifier;
	private EventDeclarationElements pEventDeclaration;
	private EventAccessorDeclarationsElements pEventAccessorDeclarations;
	private RemoveAccessorDeclarationElements pRemoveAccessorDeclaration;
	private AddAccessorDeclarationElements pAddAccessorDeclaration;
	private EventModifierElements pEventModifier;
	private PropertyDeclarationElements pPropertyDeclaration;
	private AccessorDeclarationsElements pAccessorDeclarations;
	private SetAccessorDeclarationElements pSetAccessorDeclaration;
	private GetAccessorDeclarationElements pGetAccessorDeclaration;
	private PropertyModifierElements pPropertyModifier;
	private MethodDeclarationElements pMethodDeclaration;
	private MethodHeaderElements pMethodHeader;
	private FormalParameterListElements pFormalParameterList;
	private ParameterArrayElements pParameterArray;
	private FixedParametersElements pFixedParameters;
	private FixedParameterElements pFixedParameter;
	private ParameterModifierElements pParameterModifier;
	private TypeOrVoidElements pTypeOrVoid;
	private MethodModifierElements pMethodModifier;
	private FieldDeclarationElements pFieldDeclaration;
	private VariableDeclaratorElements pVariableDeclarator;
	private VariableInitializerElements pVariableInitializer;
	private ArrayInitializerElements pArrayInitializer;
	private FieldModifierElements pFieldModifier;
	private ConstantDeclarationElements pConstantDeclaration;
	private ConstantModifierElements pConstantModifier;
	private ConstantDeclaratorElements pConstantDeclarator;
	private ClassBaseElements pClassBase;
	private QualifiedIdentifierListElements pQualifiedIdentifierList;
	private ClassModifierElements pClassModifier;
	private GlobalAttributesElements pGlobalAttributes;
	private GlobalAttributeSectionElements pGlobalAttributeSection;
	private AttributesElements pAttributes;
	private AttributeSectionElements pAttributeSection;
	private AttributeTargetElements pAttributeTarget;
	private AttributeListElements pAttributeList;
	private AttributeElements pAttribute;
	private AttributeArgumentsElements pAttributeArguments;
	private ExpressionListElements pExpressionList;
	private ExpressionElements pExpression;
	private Expression2Elements pExpression2;
	private UnaryExpressionElements pUnaryExpression;
	private ExpressionUnaryOperatorElements pExpressionUnaryOperator;
	private ExpressionShiftOperatorElements pExpressionShiftOperator;
	private ExpressionRelationalOperatorElements pExpressionRelationalOperator;
	private AttributeNameElements pAttributeName;
	private UsingDirectiveElements pUsingDirective;
	private TypeElements pType;
	private IntegralTypeElements pIntegralType;
	private ArrayTypeElements pArrayType;
	private EnumTypeElements pEnumType;
	private NonArrayTypeElements pNonArrayType;
	private QualifiedIdentifierElements pQualifiedIdentifier;
	private BuiltInTypeElements pBuiltInType;
	private BuiltInClassTypeElements pBuiltInClassType;
	private EnumBodyElements pEnumBody;
	private EnumMemberDeclarationElements pEnumMemberDeclaration;
	private EnumModifierElements pEnumModifier;
	private StatementElements pStatement;
	private DeclarationStatementElements pDeclarationStatement;
	private LocalConstantDeclarationElements pLocalConstantDeclaration;
	private LabeledStatementElements pLabeledStatement;
	private EmbeddedStatementElements pEmbeddedStatement;
	private UsingStatementElements pUsingStatement;
	private ResourceAquisitionElements pResourceAquisition;
	private LocalVariableDeclarationElements pLocalVariableDeclaration;
	private LockStatementElements pLockStatement;
	private TryStatementElements pTryStatement;
	private FinallyClauseElements pFinallyClause;
	private CatchClausesElements pCatchClauses;
	private GeneralCatchClauseElements pGeneralCatchClause;
	private SpecificCatchClauseElements pSpecificCatchClause;
	private JumpStatementElements pJumpStatement;
	private ThrowStatementElements pThrowStatement;
	private ReturnStatementElements pReturnStatement;
	private GotoStatementElements pGotoStatement;
	private ContinueStatementElements pContinueStatement;
	private BreakStatementElements pBreakStatement;
	private IterationStatementElements pIterationStatement;
	private ForeachStatementElements pForeachStatement;
	private ForStatementElements pForStatement;
	private ForInitializerElements pForInitializer;
	private StatementExpressionListElements pStatementExpressionList;
	private StatementExpressionElements pStatementExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private PrimaryExpression2Elements pPrimaryExpression2;
	private DoStatementElements pDoStatement;
	private WhileStatementElements pWhileStatement;
	private SelectionStatementElements pSelectionStatement;
	private SwitchStatementElements pSwitchStatement;
	private SwitchSectionElements pSwitchSection;
	private SwitchLabelElements pSwitchLabel;
	private IfStatementElements pIfStatement;
	private ElsePartElements pElsePart;
	private BlockElements pBlock;
	private MaybeEmptyBlockElements pMaybeEmptyBlock;
	private TerminalRule tSEMICOLON;
	private TerminalRule tASSIGNEMENT_OPERATOR;
	private TerminalRule tEXPRESSION_EQUALITY_OPERATOR;
	private TerminalRule tLESS_THAN;
	private TerminalRule tGREATER_THAN;
	private TerminalRule tBAR;
	private TerminalRule tAMPERSAND;
	private TerminalRule tINCREMENT_DECREMENT;
	private TerminalRule tOPERATOR_OR_SIGN;
	private TerminalRule tREAL_TYPE_SUFFIX;
	private TerminalRule tLETTER;
	private TerminalRule tIDENTIFIER_START_CHARACTER;
	private TerminalRule tQUOTE_ESCAPE_SEQUENCE;
	private TerminalRule tESCAPE_SEQUENCE;
	private TerminalRule tNEW_LINE;
	private TerminalRule tRANK_SPECIFIER;
	private TerminalRule tINTEGER_TYPE_SUFFIX;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tOPERATOR_OR_PUNCTUATOR;
	private TerminalRule tSINGLE_CHARACTER;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tQUOTES;
	
	private final Grammar grammar;

	@Inject
	public CSharpGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.myModel.CSharp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	inputs+=CompilationUnit;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//PredefinedType:
	//	"bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "short" | "sbyte" | "string"
	//	| "uint" | "ulong" "ushort";
	public PredefinedTypeElements getPredefinedTypeAccess() {
		return (pPredefinedType != null) ? pPredefinedType : (pPredefinedType = new PredefinedTypeElements());
	}
	
	public ParserRule getPredefinedTypeRule() {
		return getPredefinedTypeAccess().getRule();
	}

	//Literal:
	//	BooleanLiteral | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | NullLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NullLiteral:
	//	"null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	"true" | "false";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//RealLiteral:
	//	INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//ExponentPart:
	//	"e" OPERATOR_OR_SIGN? INT | "E" OPERATOR_OR_SIGN? INT;
	public ExponentPartElements getExponentPartAccess() {
		return (pExponentPart != null) ? pExponentPart : (pExponentPart = new ExponentPartElements());
	}
	
	public ParserRule getExponentPartRule() {
		return getExponentPartAccess().getRule();
	}

	//CharacterLiteral:
	//	"\'" Character "\'";
	public CharacterLiteralElements getCharacterLiteralAccess() {
		return (pCharacterLiteral != null) ? pCharacterLiteral : (pCharacterLiteral = new CharacterLiteralElements());
	}
	
	public ParserRule getCharacterLiteralRule() {
		return getCharacterLiteralAccess().getRule();
	}

	//Character:
	//	SINGLE_CHARACTER | "\\" EscapeSequence;
	public CharacterElements getCharacterAccess() {
		return (pCharacter != null) ? pCharacter : (pCharacter = new CharacterElements());
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}

	//EscapeSequence:
	//	ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence;
	public EscapeSequenceElements getEscapeSequenceAccess() {
		return (pEscapeSequence != null) ? pEscapeSequence : (pEscapeSequence = new EscapeSequenceElements());
	}
	
	public ParserRule getEscapeSequenceRule() {
		return getEscapeSequenceAccess().getRule();
	}

	//UnicodeCharacterEscapeSequence:
	//	"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
	//	HEX_DIGIT HEX_DIGIT;
	public UnicodeCharacterEscapeSequenceElements getUnicodeCharacterEscapeSequenceAccess() {
		return (pUnicodeCharacterEscapeSequence != null) ? pUnicodeCharacterEscapeSequence : (pUnicodeCharacterEscapeSequence = new UnicodeCharacterEscapeSequenceElements());
	}
	
	public ParserRule getUnicodeCharacterEscapeSequenceRule() {
		return getUnicodeCharacterEscapeSequenceAccess().getRule();
	}

	//HexadecimalEscapeSequence:
	//	"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?;
	public HexadecimalEscapeSequenceElements getHexadecimalEscapeSequenceAccess() {
		return (pHexadecimalEscapeSequence != null) ? pHexadecimalEscapeSequence : (pHexadecimalEscapeSequence = new HexadecimalEscapeSequenceElements());
	}
	
	public ParserRule getHexadecimalEscapeSequenceRule() {
		return getHexadecimalEscapeSequenceAccess().getRule();
	}

	//StringLiteral:
	//	"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\"";
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//VerbatimStringCharacter: //Any character except "
	//	SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE;
	public VerbatimStringCharacterElements getVerbatimStringCharacterAccess() {
		return (pVerbatimStringCharacter != null) ? pVerbatimStringCharacter : (pVerbatimStringCharacter = new VerbatimStringCharacterElements());
	}
	
	public ParserRule getVerbatimStringCharacterRule() {
		return getVerbatimStringCharacterAccess().getRule();
	}

	//RegularStringCharacter: //Any character except " (U+0022), \ (U+005C), and new-line-character
	//	SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE;
	public RegularStringCharacterElements getRegularStringCharacterAccess() {
		return (pRegularStringCharacter != null) ? pRegularStringCharacter : (pRegularStringCharacter = new RegularStringCharacterElements());
	}
	
	public ParserRule getRegularStringCharacterRule() {
		return getRegularStringCharacterAccess().getRule();
	}

	//Comment:
	//	SL_COMMENT | ML_COMMENT;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Identifier:
	//	{Identifier} AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//AvailableIdentifier:
	//	IdentifierOrKeyword;
	public AvailableIdentifierElements getAvailableIdentifierAccess() {
		return (pAvailableIdentifier != null) ? pAvailableIdentifier : (pAvailableIdentifier = new AvailableIdentifierElements());
	}
	
	public ParserRule getAvailableIdentifierRule() {
		return getAvailableIdentifierAccess().getRule();
	}

	//IdentifierOrKeyword:
	//	IDENTIFIER_START_CHARACTER IdentifierPartCharacter*;
	public IdentifierOrKeywordElements getIdentifierOrKeywordAccess() {
		return (pIdentifierOrKeyword != null) ? pIdentifierOrKeyword : (pIdentifierOrKeyword = new IdentifierOrKeywordElements());
	}
	
	public ParserRule getIdentifierOrKeywordRule() {
		return getIdentifierOrKeywordAccess().getRule();
	}

	//IdentifierPartCharacter:
	//	LETTER | / *
	//    |connecting-character
	//    |combining-character
	//    |formatting-character * / INT;
	public IdentifierPartCharacterElements getIdentifierPartCharacterAccess() {
		return (pIdentifierPartCharacter != null) ? pIdentifierPartCharacter : (pIdentifierPartCharacter = new IdentifierPartCharacterElements());
	}
	
	public ParserRule getIdentifierPartCharacterRule() {
		return getIdentifierPartCharacterAccess().getRule();
	}

	////FIM LEXICA 
	////SINTAXE
	//CompilationUnit:
	//	usingDirectives+=UsingDirective* globalAtt=GlobalAttributes nameSpaces+=NamespaceMemberDeclaration*;
	public CompilationUnitElements getCompilationUnitAccess() {
		return (pCompilationUnit != null) ? pCompilationUnit : (pCompilationUnit = new CompilationUnitElements());
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//NamespaceMemberDeclaration:
	//	{NamespaceMemberDeclaration} nameDeclaretion=NamespaceDeclaration | typeDeclaration=TypeDeclaration;
	public NamespaceMemberDeclarationElements getNamespaceMemberDeclarationAccess() {
		return (pNamespaceMemberDeclaration != null) ? pNamespaceMemberDeclaration : (pNamespaceMemberDeclaration = new NamespaceMemberDeclarationElements());
	}
	
	public ParserRule getNamespaceMemberDeclarationRule() {
		return getNamespaceMemberDeclarationAccess().getRule();
	}

	//NamespaceDeclaration:
	//	"namespace" qId=QualifiedIdentifier nameBody=NamespaceBody SEMICOLON?;
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return (pNamespaceDeclaration != null) ? pNamespaceDeclaration : (pNamespaceDeclaration = new NamespaceDeclarationElements());
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}

	//NamespaceBody:
	//	{NamespaceBody} "{" usingDirectives+=UsingDirective* nameSpaces+=NamespaceMemberDeclaration* "}";
	public NamespaceBodyElements getNamespaceBodyAccess() {
		return (pNamespaceBody != null) ? pNamespaceBody : (pNamespaceBody = new NamespaceBodyElements());
	}
	
	public ParserRule getNamespaceBodyRule() {
		return getNamespaceBodyAccess().getRule();
	}

	//TypeDeclaration:
	//	{TypeDeclaration} (classDeclaration=ClassDeclaration | mod+=Modifier* (structDeclaration=StructDeclaration |
	//	interfaceDeclaration=InterfaceDeclaration | enumDeclaration=EnumDeclaration |
	//	delegateDeclaration=DelegateDeclaration));
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return (pTypeDeclaration != null) ? pTypeDeclaration : (pTypeDeclaration = new TypeDeclarationElements());
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//DelegateDeclaration:
	//	"delegate" TypeOrVoid name=Identifier "(" formalParameters=FormalParameterList? ")" SEMICOLON;
	public DelegateDeclarationElements getDelegateDeclarationAccess() {
		return (pDelegateDeclaration != null) ? pDelegateDeclaration : (pDelegateDeclaration = new DelegateDeclarationElements());
	}
	
	public ParserRule getDelegateDeclarationRule() {
		return getDelegateDeclarationAccess().getRule();
	}

	//EnumDeclaration:
	//	"enum" name=Identifier (":" intType=IntegralType)? enumBody=EnumBody SEMICOLON?;
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return (pEnumDeclaration != null) ? pEnumDeclaration : (pEnumDeclaration = new EnumDeclarationElements());
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}

	//InterfaceDeclaration:
	//	"struct" name=Identifier (":" qIdentifiers=QualifiedIdentifierList)? interBody=InterfaceBody? SEMICOLON?;
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return (pInterfaceDeclaration != null) ? pInterfaceDeclaration : (pInterfaceDeclaration = new InterfaceDeclarationElements());
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}

	//Modifier:
	//	"new" | "public" | "protected" | "internal" | "private";
	public ModifierElements getModifierAccess() {
		return (pModifier != null) ? pModifier : (pModifier = new ModifierElements());
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//InterfaceBody:
	//	{InterfaceBody} "{" interfaceMemberDeclarations+=InterfaceMemberDeclaration* "}";
	public InterfaceBodyElements getInterfaceBodyAccess() {
		return (pInterfaceBody != null) ? pInterfaceBody : (pInterfaceBody = new InterfaceBodyElements());
	}
	
	public ParserRule getInterfaceBodyRule() {
		return getInterfaceBodyAccess().getRule();
	}

	//InterfaceMemberDeclaration:
	//	{InterfaceMemberDeclaration} "new"? (intermethodDeclaration=InterfaceMethodDeclaration |
	//	interEventDeclaration=InterfaceEventDeclaration | type1=Type (interfaceIndexerDecla=InterfaceIndexerDeclaration |
	//	interProperty=InterfacePropertyDeclaration));
	public InterfaceMemberDeclarationElements getInterfaceMemberDeclarationAccess() {
		return (pInterfaceMemberDeclaration != null) ? pInterfaceMemberDeclaration : (pInterfaceMemberDeclaration = new InterfaceMemberDeclarationElements());
	}
	
	public ParserRule getInterfaceMemberDeclarationRule() {
		return getInterfaceMemberDeclarationAccess().getRule();
	}

	//InterfaceIndexerDeclaration:
	//	{InterfaceIndexerDeclaration} "this" "[" parameterList=FormalParameterList "]" "{" interAccessors=InterfaceAccessors
	//	"}";
	public InterfaceIndexerDeclarationElements getInterfaceIndexerDeclarationAccess() {
		return (pInterfaceIndexerDeclaration != null) ? pInterfaceIndexerDeclaration : (pInterfaceIndexerDeclaration = new InterfaceIndexerDeclarationElements());
	}
	
	public ParserRule getInterfaceIndexerDeclarationRule() {
		return getInterfaceIndexerDeclarationAccess().getRule();
	}

	//InterfaceEventDeclaration:
	//	{InterfaceEventDeclaration} "event" type=Type name=Identifier SEMICOLON;
	public InterfaceEventDeclarationElements getInterfaceEventDeclarationAccess() {
		return (pInterfaceEventDeclaration != null) ? pInterfaceEventDeclaration : (pInterfaceEventDeclaration = new InterfaceEventDeclarationElements());
	}
	
	public ParserRule getInterfaceEventDeclarationRule() {
		return getInterfaceEventDeclarationAccess().getRule();
	}

	//InterfacePropertyDeclaration:
	//	{InterfacePropertyDeclaration} name=Identifier "{" interAccessor=InterfaceAccessors "}";
	public InterfacePropertyDeclarationElements getInterfacePropertyDeclarationAccess() {
		return (pInterfacePropertyDeclaration != null) ? pInterfacePropertyDeclaration : (pInterfacePropertyDeclaration = new InterfacePropertyDeclarationElements());
	}
	
	public ParserRule getInterfacePropertyDeclarationRule() {
		return getInterfacePropertyDeclarationAccess().getRule();
	}

	//InterfaceAccessors:
	//	att=Attributes ("get" SEMICOLON (newAtt=Attributes "set" SEMICOLON)? | "set" SEMICOLON (otherAtt=Attributes "get"
	//	SEMICOLON)?);
	public InterfaceAccessorsElements getInterfaceAccessorsAccess() {
		return (pInterfaceAccessors != null) ? pInterfaceAccessors : (pInterfaceAccessors = new InterfaceAccessorsElements());
	}
	
	public ParserRule getInterfaceAccessorsRule() {
		return getInterfaceAccessorsAccess().getRule();
	}

	//InterfaceMethodDeclaration:
	//	type=TypeOrVoid name=Identifier "(" parameterList=FormalParameterList? ")" SEMICOLON;
	public InterfaceMethodDeclarationElements getInterfaceMethodDeclarationAccess() {
		return (pInterfaceMethodDeclaration != null) ? pInterfaceMethodDeclaration : (pInterfaceMethodDeclaration = new InterfaceMethodDeclarationElements());
	}
	
	public ParserRule getInterfaceMethodDeclarationRule() {
		return getInterfaceMethodDeclarationAccess().getRule();
	}

	//StructDeclaration:
	//	"struct" name=Identifier (":" qualId=QualifiedIdentifierList)? structbody=StructBody SEMICOLON?;
	public StructDeclarationElements getStructDeclarationAccess() {
		return (pStructDeclaration != null) ? pStructDeclaration : (pStructDeclaration = new StructDeclarationElements());
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}

	//StructBody:
	//	"{" structMember+=StructMemberDeclaration* "}";
	public StructBodyElements getStructBodyAccess() {
		return (pStructBody != null) ? pStructBody : (pStructBody = new StructBodyElements());
	}
	
	public ParserRule getStructBodyRule() {
		return getStructBodyAccess().getRule();
	}

	//StructMemberDeclarations:
	//	StructMemberDeclaration structMember2+=StructMemberDeclarations2*;
	public StructMemberDeclarationsElements getStructMemberDeclarationsAccess() {
		return (pStructMemberDeclarations != null) ? pStructMemberDeclarations : (pStructMemberDeclarations = new StructMemberDeclarationsElements());
	}
	
	public ParserRule getStructMemberDeclarationsRule() {
		return getStructMemberDeclarationsAccess().getRule();
	}

	//StructMemberDeclarations2:
	//	StructMemberDeclaration structMember2+=StructMemberDeclarations2;
	public StructMemberDeclarations2Elements getStructMemberDeclarations2Access() {
		return (pStructMemberDeclarations2 != null) ? pStructMemberDeclarations2 : (pStructMemberDeclarations2 = new StructMemberDeclarations2Elements());
	}
	
	public ParserRule getStructMemberDeclarations2Rule() {
		return getStructMemberDeclarations2Access().getRule();
	}

	//StructMemberDeclaration:
	//	ConstantDeclaration | FieldDeclaration | MethodDeclaration | PropertyDeclaration | EventDeclaration |
	//	IndexerDeclaration | OperatorDeclaration | ConstructorDeclaration | StaticConstructorDeclaration | TypeDeclaration;
	public StructMemberDeclarationElements getStructMemberDeclarationAccess() {
		return (pStructMemberDeclaration != null) ? pStructMemberDeclaration : (pStructMemberDeclaration = new StructMemberDeclarationElements());
	}
	
	public ParserRule getStructMemberDeclarationRule() {
		return getStructMemberDeclarationAccess().getRule();
	}

	//ClassDeclaration:
	//	{ClassDeclaration} classModifier+=ClassModifier* "class" className=Identifier classBase=ClassBase?
	//	classBody=ClassBody SEMICOLON?;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return (pClassDeclaration != null) ? pClassDeclaration : (pClassDeclaration = new ClassDeclarationElements());
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}

	//ClassBody:
	//	{ClassBody} "{" classDeclaration+=ClassMemberDeclaration* "}";
	public ClassBodyElements getClassBodyAccess() {
		return (pClassBody != null) ? pClassBody : (pClassBody = new ClassBodyElements());
	}
	
	public ParserRule getClassBodyRule() {
		return getClassBodyAccess().getRule();
	}

	//ClassMemberDeclaration:
	//	MethodDeclaration | classAtt=Attributes (constDeclaration=ConstantDeclaration | fieldDeclaration=FieldDeclaration |
	//	propertyDeclaration=PropertyDeclaration | eventDeclaration=EventDeclaration | indexDeclaration=IndexerDeclaration |
	//	opDeclaration=OperatorDeclaration | constructorDeclaration=ConstructorDeclaration |
	//	destructorDeclaration=DestructorDeclaration | staticDeclaration=StaticConstructorDeclaration |
	//	typeDeclaration=TypeDeclaration);
	public ClassMemberDeclarationElements getClassMemberDeclarationAccess() {
		return (pClassMemberDeclaration != null) ? pClassMemberDeclaration : (pClassMemberDeclaration = new ClassMemberDeclarationElements());
	}
	
	public ParserRule getClassMemberDeclarationRule() {
		return getClassMemberDeclarationAccess().getRule();
	}

	//StaticConstructorDeclaration:
	//	staticCosntModifier=StaticConstructorModifiers name=Identifier "(" ")" emptyBlock=MaybeEmptyBlock;
	public StaticConstructorDeclarationElements getStaticConstructorDeclarationAccess() {
		return (pStaticConstructorDeclaration != null) ? pStaticConstructorDeclaration : (pStaticConstructorDeclaration = new StaticConstructorDeclarationElements());
	}
	
	public ParserRule getStaticConstructorDeclarationRule() {
		return getStaticConstructorDeclarationAccess().getRule();
	}

	//StaticConstructorModifiers:
	//	"extern"? "static" | "static" "extern";
	public StaticConstructorModifiersElements getStaticConstructorModifiersAccess() {
		return (pStaticConstructorModifiers != null) ? pStaticConstructorModifiers : (pStaticConstructorModifiers = new StaticConstructorModifiersElements());
	}
	
	public ParserRule getStaticConstructorModifiersRule() {
		return getStaticConstructorModifiersAccess().getRule();
	}

	//DestructorDeclaration:
	//	"extern"? "~" name=Identifier "(" ")" emptyBlock=MaybeEmptyBlock;
	public DestructorDeclarationElements getDestructorDeclarationAccess() {
		return (pDestructorDeclaration != null) ? pDestructorDeclaration : (pDestructorDeclaration = new DestructorDeclarationElements());
	}
	
	public ParserRule getDestructorDeclarationRule() {
		return getDestructorDeclarationAccess().getRule();
	}

	//ConstructorDeclaration:
	//	constModifier+=ConstructorModifier* constrDeclarator=ConstructorDeclarator emptyBlock=MaybeEmptyBlock;
	public ConstructorDeclarationElements getConstructorDeclarationAccess() {
		return (pConstructorDeclaration != null) ? pConstructorDeclaration : (pConstructorDeclaration = new ConstructorDeclarationElements());
	}
	
	public ParserRule getConstructorDeclarationRule() {
		return getConstructorDeclarationAccess().getRule();
	}

	//ConstructorDeclarator:
	//	Identifier "(" formalList=FormalParameterList? ")" constInitializer=ConstructorInitializer?;
	public ConstructorDeclaratorElements getConstructorDeclaratorAccess() {
		return (pConstructorDeclarator != null) ? pConstructorDeclarator : (pConstructorDeclarator = new ConstructorDeclaratorElements());
	}
	
	public ParserRule getConstructorDeclaratorRule() {
		return getConstructorDeclaratorAccess().getRule();
	}

	//ConstructorInitializer:
	//	":" "base" "(" ArgumentList ")" | ":" "this" "(" ArgumentList ")";
	public ConstructorInitializerElements getConstructorInitializerAccess() {
		return (pConstructorInitializer != null) ? pConstructorInitializer : (pConstructorInitializer = new ConstructorInitializerElements());
	}
	
	public ParserRule getConstructorInitializerRule() {
		return getConstructorInitializerAccess().getRule();
	}

	//ArgumentList:
	//	{ArgumentList} (arg+=Argument ",")*;
	public ArgumentListElements getArgumentListAccess() {
		return (pArgumentList != null) ? pArgumentList : (pArgumentList = new ArgumentListElements());
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//Argument:
	//	RefOrOut? Expression;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//RefOrOut:
	//	"ref" | "out";
	public RefOrOutElements getRefOrOutAccess() {
		return (pRefOrOut != null) ? pRefOrOut : (pRefOrOut = new RefOrOutElements());
	}
	
	public ParserRule getRefOrOutRule() {
		return getRefOrOutAccess().getRule();
	}

	//ConstructorModifier:
	//	"public" | "protected" | "internal" | "private" | "extern";
	public ConstructorModifierElements getConstructorModifierAccess() {
		return (pConstructorModifier != null) ? pConstructorModifier : (pConstructorModifier = new ConstructorModifierElements());
	}
	
	public ParserRule getConstructorModifierRule() {
		return getConstructorModifierAccess().getRule();
	}

	//OperatorDeclaration:
	//	opModifier+=OperatorModifier+ opDeclarator=OperatorDeclarator emptyBlock=MaybeEmptyBlock;
	public OperatorDeclarationElements getOperatorDeclarationAccess() {
		return (pOperatorDeclaration != null) ? pOperatorDeclaration : (pOperatorDeclaration = new OperatorDeclarationElements());
	}
	
	public ParserRule getOperatorDeclarationRule() {
		return getOperatorDeclarationAccess().getRule();
	}

	//OperatorDeclarator:
	//	UnaryOperatorDeclarator | BinaryOperatorDeclarator | ConversionOperatorDeclarator;
	public OperatorDeclaratorElements getOperatorDeclaratorAccess() {
		return (pOperatorDeclarator != null) ? pOperatorDeclarator : (pOperatorDeclarator = new OperatorDeclaratorElements());
	}
	
	public ParserRule getOperatorDeclaratorRule() {
		return getOperatorDeclaratorAccess().getRule();
	}

	//ConversionOperatorDeclarator:
	//	ConversionKind "operator" firstType=Type "(" type=Type conversionName=Identifier ")";
	public ConversionOperatorDeclaratorElements getConversionOperatorDeclaratorAccess() {
		return (pConversionOperatorDeclarator != null) ? pConversionOperatorDeclarator : (pConversionOperatorDeclarator = new ConversionOperatorDeclaratorElements());
	}
	
	public ParserRule getConversionOperatorDeclaratorRule() {
		return getConversionOperatorDeclaratorAccess().getRule();
	}

	//ConversionKind:
	//	"implicit" | "explicit";
	public ConversionKindElements getConversionKindAccess() {
		return (pConversionKind != null) ? pConversionKind : (pConversionKind = new ConversionKindElements());
	}
	
	public ParserRule getConversionKindRule() {
		return getConversionKindAccess().getRule();
	}

	//BinaryOperatorDeclarator:
	//	binType=Type "operator" overBinOperator=OverloadableBinaryOperator "(" type=Type otherName=Identifier ","
	//	secondType=Type secondName=Identifier ")";
	public BinaryOperatorDeclaratorElements getBinaryOperatorDeclaratorAccess() {
		return (pBinaryOperatorDeclarator != null) ? pBinaryOperatorDeclarator : (pBinaryOperatorDeclarator = new BinaryOperatorDeclaratorElements());
	}
	
	public ParserRule getBinaryOperatorDeclaratorRule() {
		return getBinaryOperatorDeclaratorAccess().getRule();
	}

	//OverloadableBinaryOperator:
	//	OPERATOR_OR_SIGN | "*" | "/" | "%" | AMPERSAND | BAR | "^" | "<<" | ">>" | "==" | "!=" | GREATER_THAN | LESS_THAN |
	//	">=" | "<=";
	public OverloadableBinaryOperatorElements getOverloadableBinaryOperatorAccess() {
		return (pOverloadableBinaryOperator != null) ? pOverloadableBinaryOperator : (pOverloadableBinaryOperator = new OverloadableBinaryOperatorElements());
	}
	
	public ParserRule getOverloadableBinaryOperatorRule() {
		return getOverloadableBinaryOperatorAccess().getRule();
	}

	//UnaryOperatorDeclarator:
	//	type=Type "operator" OverloadableUnaryOperator "(" otherType=Type name=Identifier ")";
	public UnaryOperatorDeclaratorElements getUnaryOperatorDeclaratorAccess() {
		return (pUnaryOperatorDeclarator != null) ? pUnaryOperatorDeclarator : (pUnaryOperatorDeclarator = new UnaryOperatorDeclaratorElements());
	}
	
	public ParserRule getUnaryOperatorDeclaratorRule() {
		return getUnaryOperatorDeclaratorAccess().getRule();
	}

	//OverloadableUnaryOperator:
	//	OPERATOR_OR_SIGN | INCREMENT_DECREMENT | "!" | "~" | "true" | "false";
	public OverloadableUnaryOperatorElements getOverloadableUnaryOperatorAccess() {
		return (pOverloadableUnaryOperator != null) ? pOverloadableUnaryOperator : (pOverloadableUnaryOperator = new OverloadableUnaryOperatorElements());
	}
	
	public ParserRule getOverloadableUnaryOperatorRule() {
		return getOverloadableUnaryOperatorAccess().getRule();
	}

	//OperatorModifier:
	//	"public" | "static" | "extern";
	public OperatorModifierElements getOperatorModifierAccess() {
		return (pOperatorModifier != null) ? pOperatorModifier : (pOperatorModifier = new OperatorModifierElements());
	}
	
	public ParserRule getOperatorModifierRule() {
		return getOperatorModifierAccess().getRule();
	}

	//IndexerDeclaration:
	//	idModifier+=IndexerModifier* indexerDeclarator=IndexerDeclarator "{" accDeclaration=AccessorDeclarations "}";
	public IndexerDeclarationElements getIndexerDeclarationAccess() {
		return (pIndexerDeclaration != null) ? pIndexerDeclaration : (pIndexerDeclaration = new IndexerDeclarationElements());
	}
	
	public ParserRule getIndexerDeclarationRule() {
		return getIndexerDeclarationAccess().getRule();
	}

	//IndexerDeclarator:
	//	type=Type ("this" "[" formalList=FormalParameterList "]" | qualifiedId=QualifiedIdentifier "." "this" "["
	//	formalList=FormalParameterList "]");
	public IndexerDeclaratorElements getIndexerDeclaratorAccess() {
		return (pIndexerDeclarator != null) ? pIndexerDeclarator : (pIndexerDeclarator = new IndexerDeclaratorElements());
	}
	
	public ParserRule getIndexerDeclaratorRule() {
		return getIndexerDeclaratorAccess().getRule();
	}

	//IndexerModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern";
	public IndexerModifierElements getIndexerModifierAccess() {
		return (pIndexerModifier != null) ? pIndexerModifier : (pIndexerModifier = new IndexerModifierElements());
	}
	
	public ParserRule getIndexerModifierRule() {
		return getIndexerModifierAccess().getRule();
	}

	//EventDeclaration:
	//	EventModifier* "event" Type ((variableDeclarator+=VariableDeclarator ",")+ SEMICOLON | qIdent=QualifiedIdentifier "{"
	//	eventAccessorDeclarations=EventAccessorDeclarations "}");
	public EventDeclarationElements getEventDeclarationAccess() {
		return (pEventDeclaration != null) ? pEventDeclaration : (pEventDeclaration = new EventDeclarationElements());
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}

	//EventAccessorDeclarations:
	//	att1=Attributes (addAccessor=AddAccessorDeclaration att=Attributes removAccessor=RemoveAccessorDeclaration |
	//	removAccessor=RemoveAccessorDeclaration att=Attributes addAccessor=AddAccessorDeclaration);
	public EventAccessorDeclarationsElements getEventAccessorDeclarationsAccess() {
		return (pEventAccessorDeclarations != null) ? pEventAccessorDeclarations : (pEventAccessorDeclarations = new EventAccessorDeclarationsElements());
	}
	
	public ParserRule getEventAccessorDeclarationsRule() {
		return getEventAccessorDeclarationsAccess().getRule();
	}

	//RemoveAccessorDeclaration:
	//	"remove" Block;
	public RemoveAccessorDeclarationElements getRemoveAccessorDeclarationAccess() {
		return (pRemoveAccessorDeclaration != null) ? pRemoveAccessorDeclaration : (pRemoveAccessorDeclaration = new RemoveAccessorDeclarationElements());
	}
	
	public ParserRule getRemoveAccessorDeclarationRule() {
		return getRemoveAccessorDeclarationAccess().getRule();
	}

	//AddAccessorDeclaration:
	//	"add" Block;
	public AddAccessorDeclarationElements getAddAccessorDeclarationAccess() {
		return (pAddAccessorDeclaration != null) ? pAddAccessorDeclaration : (pAddAccessorDeclaration = new AddAccessorDeclarationElements());
	}
	
	public ParserRule getAddAccessorDeclarationRule() {
		return getAddAccessorDeclarationAccess().getRule();
	}

	//EventModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
	//	"extern";
	public EventModifierElements getEventModifierAccess() {
		return (pEventModifier != null) ? pEventModifier : (pEventModifier = new EventModifierElements());
	}
	
	public ParserRule getEventModifierRule() {
		return getEventModifierAccess().getRule();
	}

	//PropertyDeclaration:
	//	PropertyModifier* Type qualifiedId=QualifiedIdentifier "{" accDeclarate=AccessorDeclarations "}";
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return (pPropertyDeclaration != null) ? pPropertyDeclaration : (pPropertyDeclaration = new PropertyDeclarationElements());
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	//AccessorDeclarations:
	//	att=Attributes (getAcc=GetAccessorDeclaration att2=Attributes setAcc=SetAccessorDeclaration? |
	//	setAcc=SetAccessorDeclaration att2=Attributes getAcc=GetAccessorDeclaration?);
	public AccessorDeclarationsElements getAccessorDeclarationsAccess() {
		return (pAccessorDeclarations != null) ? pAccessorDeclarations : (pAccessorDeclarations = new AccessorDeclarationsElements());
	}
	
	public ParserRule getAccessorDeclarationsRule() {
		return getAccessorDeclarationsAccess().getRule();
	}

	//SetAccessorDeclaration:
	//	"set" MaybeEmptyBlock;
	public SetAccessorDeclarationElements getSetAccessorDeclarationAccess() {
		return (pSetAccessorDeclaration != null) ? pSetAccessorDeclaration : (pSetAccessorDeclaration = new SetAccessorDeclarationElements());
	}
	
	public ParserRule getSetAccessorDeclarationRule() {
		return getSetAccessorDeclarationAccess().getRule();
	}

	//GetAccessorDeclaration:
	//	"get" MaybeEmptyBlock;
	public GetAccessorDeclarationElements getGetAccessorDeclarationAccess() {
		return (pGetAccessorDeclaration != null) ? pGetAccessorDeclaration : (pGetAccessorDeclaration = new GetAccessorDeclarationElements());
	}
	
	public ParserRule getGetAccessorDeclarationRule() {
		return getGetAccessorDeclarationAccess().getRule();
	}

	//PropertyModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
	//	"extern";
	public PropertyModifierElements getPropertyModifierAccess() {
		return (pPropertyModifier != null) ? pPropertyModifier : (pPropertyModifier = new PropertyModifierElements());
	}
	
	public ParserRule getPropertyModifierRule() {
		return getPropertyModifierAccess().getRule();
	}

	//MethodDeclaration:
	//	methodHeader=MethodHeader maybeEmpty=MaybeEmptyBlock;
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return (pMethodDeclaration != null) ? pMethodDeclaration : (pMethodDeclaration = new MethodDeclarationElements());
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}

	//MethodHeader:
	//	Attributes MethodModifier* typeOrVoid=TypeOrVoid qualifiedID=QualifiedIdentifier "("
	//	formalParameters=FormalParameterList? ")";
	public MethodHeaderElements getMethodHeaderAccess() {
		return (pMethodHeader != null) ? pMethodHeader : (pMethodHeader = new MethodHeaderElements());
	}
	
	public ParserRule getMethodHeaderRule() {
		return getMethodHeaderAccess().getRule();
	}

	//FormalParameterList:
	//	FixedParameters ("," parameterArray=ParameterArray | parameterArray=ParameterArray);
	public FormalParameterListElements getFormalParameterListAccess() {
		return (pFormalParameterList != null) ? pFormalParameterList : (pFormalParameterList = new FormalParameterListElements());
	}
	
	public ParserRule getFormalParameterListRule() {
		return getFormalParameterListAccess().getRule();
	}

	//ParameterArray:
	//	{ParameterArray} att=Attributes "params" array=ArrayType name=Identifier;
	public ParameterArrayElements getParameterArrayAccess() {
		return (pParameterArray != null) ? pParameterArray : (pParameterArray = new ParameterArrayElements());
	}
	
	public ParserRule getParameterArrayRule() {
		return getParameterArrayAccess().getRule();
	}

	//FixedParameters:
	//	(fixParameters+=FixedParameter ",")+;
	public FixedParametersElements getFixedParametersAccess() {
		return (pFixedParameters != null) ? pFixedParameters : (pFixedParameters = new FixedParametersElements());
	}
	
	public ParserRule getFixedParametersRule() {
		return getFixedParametersAccess().getRule();
	}

	//FixedParameter:
	//	ParameterModifier? type=Type name=Identifier;
	public FixedParameterElements getFixedParameterAccess() {
		return (pFixedParameter != null) ? pFixedParameter : (pFixedParameter = new FixedParameterElements());
	}
	
	public ParserRule getFixedParameterRule() {
		return getFixedParameterAccess().getRule();
	}

	//ParameterModifier:
	//	"ref" | "out";
	public ParameterModifierElements getParameterModifierAccess() {
		return (pParameterModifier != null) ? pParameterModifier : (pParameterModifier = new ParameterModifierElements());
	}
	
	public ParserRule getParameterModifierRule() {
		return getParameterModifierAccess().getRule();
	}

	//TypeOrVoid:
	//	{TypeOrVoid} type=Type | {Void} "void";
	public TypeOrVoidElements getTypeOrVoidAccess() {
		return (pTypeOrVoid != null) ? pTypeOrVoid : (pTypeOrVoid = new TypeOrVoidElements());
	}
	
	public ParserRule getTypeOrVoidRule() {
		return getTypeOrVoidAccess().getRule();
	}

	//MethodModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
	//	"extern";
	public MethodModifierElements getMethodModifierAccess() {
		return (pMethodModifier != null) ? pMethodModifier : (pMethodModifier = new MethodModifierElements());
	}
	
	public ParserRule getMethodModifierRule() {
		return getMethodModifierAccess().getRule();
	}

	//FieldDeclaration:
	//	FieldModifier* Type (variables+=VariableDeclarator ",")+ SEMICOLON;
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return (pFieldDeclaration != null) ? pFieldDeclaration : (pFieldDeclaration = new FieldDeclarationElements());
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}

	//VariableDeclarator:
	//	name=Identifier ("=" variable=VariableInitializer)?;
	public VariableDeclaratorElements getVariableDeclaratorAccess() {
		return (pVariableDeclarator != null) ? pVariableDeclarator : (pVariableDeclarator = new VariableDeclaratorElements());
	}
	
	public ParserRule getVariableDeclaratorRule() {
		return getVariableDeclaratorAccess().getRule();
	}

	//VariableInitializer:
	//	Expression | ArrayInitializer;
	public VariableInitializerElements getVariableInitializerAccess() {
		return (pVariableInitializer != null) ? pVariableInitializer : (pVariableInitializer = new VariableInitializerElements());
	}
	
	public ParserRule getVariableInitializerRule() {
		return getVariableInitializerAccess().getRule();
	}

	//ArrayInitializer:
	//	{ArrayInitializer} "{" "}" | "{" (variableInitalizers+=VariableInitializer ",")+ ","? "}";
	public ArrayInitializerElements getArrayInitializerAccess() {
		return (pArrayInitializer != null) ? pArrayInitializer : (pArrayInitializer = new ArrayInitializerElements());
	}
	
	public ParserRule getArrayInitializerRule() {
		return getArrayInitializerAccess().getRule();
	}

	//FieldModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile";
	public FieldModifierElements getFieldModifierAccess() {
		return (pFieldModifier != null) ? pFieldModifier : (pFieldModifier = new FieldModifierElements());
	}
	
	public ParserRule getFieldModifierRule() {
		return getFieldModifierAccess().getRule();
	}

	//ConstantDeclaration:
	//	ConstantModifier* "const" Type (constDeclarators+=ConstantDeclarator ",")+ SEMICOLON;
	public ConstantDeclarationElements getConstantDeclarationAccess() {
		return (pConstantDeclaration != null) ? pConstantDeclaration : (pConstantDeclaration = new ConstantDeclarationElements());
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//ConstantModifier:
	//	"new" | "public" | "protected" | "internal" | "private";
	public ConstantModifierElements getConstantModifierAccess() {
		return (pConstantModifier != null) ? pConstantModifier : (pConstantModifier = new ConstantModifierElements());
	}
	
	public ParserRule getConstantModifierRule() {
		return getConstantModifierAccess().getRule();
	}

	//ConstantDeclarator:
	//	{ConstantDeclarator} name=Identifier "=" exp=Expression;
	public ConstantDeclaratorElements getConstantDeclaratorAccess() {
		return (pConstantDeclarator != null) ? pConstantDeclarator : (pConstantDeclarator = new ConstantDeclaratorElements());
	}
	
	public ParserRule getConstantDeclaratorRule() {
		return getConstantDeclaratorAccess().getRule();
	}

	//ClassBase:
	//	":" (QualifiedIdentifierList | BuiltInClassType ("," QualifiedIdentifierList)?);
	public ClassBaseElements getClassBaseAccess() {
		return (pClassBase != null) ? pClassBase : (pClassBase = new ClassBaseElements());
	}
	
	public ParserRule getClassBaseRule() {
		return getClassBaseAccess().getRule();
	}

	//QualifiedIdentifierList:
	//	(ids+=QualifiedIdentifier ",")+;
	public QualifiedIdentifierListElements getQualifiedIdentifierListAccess() {
		return (pQualifiedIdentifierList != null) ? pQualifiedIdentifierList : (pQualifiedIdentifierList = new QualifiedIdentifierListElements());
	}
	
	public ParserRule getQualifiedIdentifierListRule() {
		return getQualifiedIdentifierListAccess().getRule();
	}

	//ClassModifier:
	//	Modifier | "abstract" | "sealed";
	public ClassModifierElements getClassModifierAccess() {
		return (pClassModifier != null) ? pClassModifier : (pClassModifier = new ClassModifierElements());
	}
	
	public ParserRule getClassModifierRule() {
		return getClassModifierAccess().getRule();
	}

	//GlobalAttributes:
	//	{GlobalAttributes} globalAttSections+=GlobalAttributeSection*;
	public GlobalAttributesElements getGlobalAttributesAccess() {
		return (pGlobalAttributes != null) ? pGlobalAttributes : (pGlobalAttributes = new GlobalAttributesElements());
	}
	
	public ParserRule getGlobalAttributesRule() {
		return getGlobalAttributesAccess().getRule();
	}

	//GlobalAttributeSection:
	//	"[" "assembly" ":" AttributeList ","? "]";
	public GlobalAttributeSectionElements getGlobalAttributeSectionAccess() {
		return (pGlobalAttributeSection != null) ? pGlobalAttributeSection : (pGlobalAttributeSection = new GlobalAttributeSectionElements());
	}
	
	public ParserRule getGlobalAttributeSectionRule() {
		return getGlobalAttributeSectionAccess().getRule();
	}

	//Attributes:
	//	{Attributes} attributes+=AttributeSection*;
	public AttributesElements getAttributesAccess() {
		return (pAttributes != null) ? pAttributes : (pAttributes = new AttributesElements());
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}

	//AttributeSection:
	//	"[" (AttributeTarget ":")? AttributeList ","? "]";
	public AttributeSectionElements getAttributeSectionAccess() {
		return (pAttributeSection != null) ? pAttributeSection : (pAttributeSection = new AttributeSectionElements());
	}
	
	public ParserRule getAttributeSectionRule() {
		return getAttributeSectionAccess().getRule();
	}

	//AttributeTarget:
	//	"field" | "event" | "method" | "module" | "param" | "property" | "return" | "type";
	public AttributeTargetElements getAttributeTargetAccess() {
		return (pAttributeTarget != null) ? pAttributeTarget : (pAttributeTarget = new AttributeTargetElements());
	}
	
	public ParserRule getAttributeTargetRule() {
		return getAttributeTargetAccess().getRule();
	}

	//AttributeList:
	//	{AttributeList} (attributes+=Attribute ",")+;
	public AttributeListElements getAttributeListAccess() {
		return (pAttributeList != null) ? pAttributeList : (pAttributeList = new AttributeListElements());
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}

	//Attribute:
	//	attName=AttributeName attArguments=AttributeArguments?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AttributeArguments:
	//	{AttributeArguments} "(" expresions+=ExpressionList? ")";
	public AttributeArgumentsElements getAttributeArgumentsAccess() {
		return (pAttributeArguments != null) ? pAttributeArguments : (pAttributeArguments = new AttributeArgumentsElements());
	}
	
	public ParserRule getAttributeArgumentsRule() {
		return getAttributeArgumentsAccess().getRule();
	}

	//ExpressionList:
	//	(expresions+=Expression ",")+;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//Expression:
	//	{Expression} unary=UnaryExpression (exp2=Expression2 | BAR exp=Expression otherExp2=Expression2);
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Expression2:
	//	{Expression2} ("?" internalExp+=Expression ":" exp+=Expression internalExp2+=Expression2 | "||" exp+=Expression
	//	internalExp2+=Expression2 | "&&" exp+=Expression internalExp2+=Expression2 | BAR exp+=Expression
	//	internalExp2+=Expression2 | "^" exp+=Expression internalExp2+=Expression2 | AMPERSAND exp+=Expression
	//	internalExp2+=Expression2 | EXPRESSION_EQUALITY_OPERATOR exp+=Expression internalExp2+=Expression2 |
	//	ExpressionRelationalOperator exp+=Expression internalExp2+=Expression2 | "is" buildInType+=BuiltInType
	//	internalExp2+=Expression2 | ExpressionShiftOperator exp+=Expression internalExp2+=Expression2 | OPERATOR_OR_SIGN
	//	exp+=Expression internalExp2+=Expression2 | "*" exp+=Expression internalExp2+=Expression2 | "/" exp+=Expression
	//	internalExp2+=Expression2 | "%" exp+=Expression internalExp2+=Expression2)*;
	public Expression2Elements getExpression2Access() {
		return (pExpression2 != null) ? pExpression2 : (pExpression2 = new Expression2Elements());
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}

	//UnaryExpression:
	//	{UnaryExpression} (expUnaryOperator=ExpressionUnaryOperator | "(" type=Type ")") unaryExp=UnaryExpression |
	//	primaryExp=PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//ExpressionUnaryOperator:
	//	OPERATOR_OR_PUNCTUATOR | INCREMENT_DECREMENT | "!" | "~" | "*";
	public ExpressionUnaryOperatorElements getExpressionUnaryOperatorAccess() {
		return (pExpressionUnaryOperator != null) ? pExpressionUnaryOperator : (pExpressionUnaryOperator = new ExpressionUnaryOperatorElements());
	}
	
	public ParserRule getExpressionUnaryOperatorRule() {
		return getExpressionUnaryOperatorAccess().getRule();
	}

	//ExpressionShiftOperator:
	//	"<<" | ">>";
	public ExpressionShiftOperatorElements getExpressionShiftOperatorAccess() {
		return (pExpressionShiftOperator != null) ? pExpressionShiftOperator : (pExpressionShiftOperator = new ExpressionShiftOperatorElements());
	}
	
	public ParserRule getExpressionShiftOperatorRule() {
		return getExpressionShiftOperatorAccess().getRule();
	}

	//ExpressionRelationalOperator:
	//	LESS_THAN | GREATER_THAN | "<=" | ">=" | "is" | "as";
	public ExpressionRelationalOperatorElements getExpressionRelationalOperatorAccess() {
		return (pExpressionRelationalOperator != null) ? pExpressionRelationalOperator : (pExpressionRelationalOperator = new ExpressionRelationalOperatorElements());
	}
	
	public ParserRule getExpressionRelationalOperatorRule() {
		return getExpressionRelationalOperatorAccess().getRule();
	}

	//AttributeName:
	//	{AttributeName} qualifiedId=QualifiedIdentifier;
	public AttributeNameElements getAttributeNameAccess() {
		return (pAttributeName != null) ? pAttributeName : (pAttributeName = new AttributeNameElements());
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//UsingDirective:
	//	{UsingDirective} "using" (name=Identifier "=")? usings=QualifiedIdentifier SEMICOLON;
	public UsingDirectiveElements getUsingDirectiveAccess() {
		return (pUsingDirective != null) ? pUsingDirective : (pUsingDirective = new UsingDirectiveElements());
	}
	
	public ParserRule getUsingDirectiveRule() {
		return getUsingDirectiveAccess().getRule();
	}

	//Type:
	//	{Type} nonArray=NonArrayType RANK_SPECIFIER*;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//IntegralType:
	//	{IntegralType} "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char";
	public IntegralTypeElements getIntegralTypeAccess() {
		return (pIntegralType != null) ? pIntegralType : (pIntegralType = new IntegralTypeElements());
	}
	
	public ParserRule getIntegralTypeRule() {
		return getIntegralTypeAccess().getRule();
	}

	//ArrayType:
	//	NonArrayType RANK_SPECIFIER+;
	public ArrayTypeElements getArrayTypeAccess() {
		return (pArrayType != null) ? pArrayType : (pArrayType = new ArrayTypeElements());
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//EnumType:
	//	Attributes EnumModifier* "enum" ID (":" type=IntegralType)? enumBody=EnumBody SEMICOLON?;
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//NonArrayType:
	//	{NonArrayType} (qualified=QualifiedIdentifier | builtType=BuiltInType);
	public NonArrayTypeElements getNonArrayTypeAccess() {
		return (pNonArrayType != null) ? pNonArrayType : (pNonArrayType = new NonArrayTypeElements());
	}
	
	public ParserRule getNonArrayTypeRule() {
		return getNonArrayTypeAccess().getRule();
	}

	//QualifiedIdentifier:
	//	{QualifiedIdentifier} (ids+=Identifier ".")+;
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return (pQualifiedIdentifier != null) ? pQualifiedIdentifier : (pQualifiedIdentifier = new QualifiedIdentifierElements());
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}

	//BuiltInType:
	//	{BuiltInType} BuiltInClassType | "bool" | "decimal" | "float" | "double";
	public BuiltInTypeElements getBuiltInTypeAccess() {
		return (pBuiltInType != null) ? pBuiltInType : (pBuiltInType = new BuiltInTypeElements());
	}
	
	public ParserRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}

	//BuiltInClassType:
	//	"object" | "string";
	public BuiltInClassTypeElements getBuiltInClassTypeAccess() {
		return (pBuiltInClassType != null) ? pBuiltInClassType : (pBuiltInClassType = new BuiltInClassTypeElements());
	}
	
	public ParserRule getBuiltInClassTypeRule() {
		return getBuiltInClassTypeAccess().getRule();
	}

	//EnumBody:
	//	{EnumBody} "{" "}" | "{" (enumDeclarations+=EnumMemberDeclaration ",")+ ","? "}";
	public EnumBodyElements getEnumBodyAccess() {
		return (pEnumBody != null) ? pEnumBody : (pEnumBody = new EnumBodyElements());
	}
	
	public ParserRule getEnumBodyRule() {
		return getEnumBodyAccess().getRule();
	}

	//EnumMemberDeclaration:
	//	att=Attributes name=Identifier ("=" exp=Expression)?;
	public EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return (pEnumMemberDeclaration != null) ? pEnumMemberDeclaration : (pEnumMemberDeclaration = new EnumMemberDeclarationElements());
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}

	//EnumModifier:
	//	"new" | "public" | "protected" | "internal" | "private";
	public EnumModifierElements getEnumModifierAccess() {
		return (pEnumModifier != null) ? pEnumModifier : (pEnumModifier = new EnumModifierElements());
	}
	
	public ParserRule getEnumModifierRule() {
		return getEnumModifierAccess().getRule();
	}

	//Statement:
	//	{Statement} labelStat=LabeledStatement | declareStat=DeclarationStatement | embeddedStat=EmbeddedStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//DeclarationStatement returns DeclarationStatment:
	//	{DeclarationStatment} (localVariableDeclaration=LocalVariableDeclaration | localCOnstant=LocalConstantDeclaration)
	//	SEMICOLON;
	public DeclarationStatementElements getDeclarationStatementAccess() {
		return (pDeclarationStatement != null) ? pDeclarationStatement : (pDeclarationStatement = new DeclarationStatementElements());
	}
	
	public ParserRule getDeclarationStatementRule() {
		return getDeclarationStatementAccess().getRule();
	}

	//LocalConstantDeclaration returns LocalconstantDeclaration:
	//	{LocalconstantDeclaration} "const" tipo=Type (constDeclarator+=ConstantDeclarator ",")+;
	public LocalConstantDeclarationElements getLocalConstantDeclarationAccess() {
		return (pLocalConstantDeclaration != null) ? pLocalConstantDeclaration : (pLocalConstantDeclaration = new LocalConstantDeclarationElements());
	}
	
	public ParserRule getLocalConstantDeclarationRule() {
		return getLocalConstantDeclarationAccess().getRule();
	}

	//LabeledStatement:
	//	{LabeledStatement} id=Identifier ":" stat=Statement;
	public LabeledStatementElements getLabeledStatementAccess() {
		return (pLabeledStatement != null) ? pLabeledStatement : (pLabeledStatement = new LabeledStatementElements());
	}
	
	public ParserRule getLabeledStatementRule() {
		return getLabeledStatementAccess().getRule();
	}

	//EmbeddedStatement:
	//	{EmbeddedStatement} (maybeEmpty=MaybeEmptyBlock | statExp=StatementExpression SEMICOLON |
	//	selectionStat=SelectionStatement | iterationStat=IterationStatement | jumpStat=JumpStatement | tryStat=TryStatement |
	//	("checked" | "unchecked") block=Block | lockStat=LockStatement | usingStat=UsingStatement);
	public EmbeddedStatementElements getEmbeddedStatementAccess() {
		return (pEmbeddedStatement != null) ? pEmbeddedStatement : (pEmbeddedStatement = new EmbeddedStatementElements());
	}
	
	public ParserRule getEmbeddedStatementRule() {
		return getEmbeddedStatementAccess().getRule();
	}

	//UsingStatement:
	//	{UsingStatement} ("using" "(" resourcAquisition=ResourceAquisition ")" embeddedStat=EmbeddedStatement);
	public UsingStatementElements getUsingStatementAccess() {
		return (pUsingStatement != null) ? pUsingStatement : (pUsingStatement = new UsingStatementElements());
	}
	
	public ParserRule getUsingStatementRule() {
		return getUsingStatementAccess().getRule();
	}

	//ResourceAquisition:
	//	LocalVariableDeclaration | Expression;
	public ResourceAquisitionElements getResourceAquisitionAccess() {
		return (pResourceAquisition != null) ? pResourceAquisition : (pResourceAquisition = new ResourceAquisitionElements());
	}
	
	public ParserRule getResourceAquisitionRule() {
		return getResourceAquisitionAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	{LocalVariableDeclaration} tipo=Type (variable+=VariableDeclarator ",")+;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return (pLocalVariableDeclaration != null) ? pLocalVariableDeclaration : (pLocalVariableDeclaration = new LocalVariableDeclarationElements());
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//LockStatement:
	//	{LockStatement} "lock" "(" exp=Expression ")" embeddedStat=EmbeddedStatement;
	public LockStatementElements getLockStatementAccess() {
		return (pLockStatement != null) ? pLockStatement : (pLockStatement = new LockStatementElements());
	}
	
	public ParserRule getLockStatementRule() {
		return getLockStatementAccess().getRule();
	}

	//TryStatement:
	//	{TryStatement} "try" block=Block (catchClauses=CatchClauses finally=FinallyClause? | finallyClause=FinallyClause);
	public TryStatementElements getTryStatementAccess() {
		return (pTryStatement != null) ? pTryStatement : (pTryStatement = new TryStatementElements());
	}
	
	public ParserRule getTryStatementRule() {
		return getTryStatementAccess().getRule();
	}

	//FinallyClause:
	//	{FinallyClause} "finally" block=Block;
	public FinallyClauseElements getFinallyClauseAccess() {
		return (pFinallyClause != null) ? pFinallyClause : (pFinallyClause = new FinallyClauseElements());
	}
	
	public ParserRule getFinallyClauseRule() {
		return getFinallyClauseAccess().getRule();
	}

	//CatchClauses:
	//	{CatchClauses} (speciCatchClause+=SpecificCatchClause+ genCatchClause=GeneralCatchClause? |
	//	specCatchClause=SpecificCatchClause* => genCatchClause=GeneralCatchClause);
	public CatchClausesElements getCatchClausesAccess() {
		return (pCatchClauses != null) ? pCatchClauses : (pCatchClauses = new CatchClausesElements());
	}
	
	public ParserRule getCatchClausesRule() {
		return getCatchClausesAccess().getRule();
	}

	//GeneralCatchClause returns GeneralCatchclause:
	//	{GeneralCatchclause} "catch" block=Block;
	public GeneralCatchClauseElements getGeneralCatchClauseAccess() {
		return (pGeneralCatchClause != null) ? pGeneralCatchClause : (pGeneralCatchClause = new GeneralCatchClauseElements());
	}
	
	public ParserRule getGeneralCatchClauseRule() {
		return getGeneralCatchClauseAccess().getRule();
	}

	//SpecificCatchClause:
	//	{SpecificCatchClause} "catch" "(" (BuiltInClassType | qualiId=QualifiedIdentifier) id=Identifier? ")" block=Block;
	public SpecificCatchClauseElements getSpecificCatchClauseAccess() {
		return (pSpecificCatchClause != null) ? pSpecificCatchClause : (pSpecificCatchClause = new SpecificCatchClauseElements());
	}
	
	public ParserRule getSpecificCatchClauseRule() {
		return getSpecificCatchClauseAccess().getRule();
	}

	//JumpStatement:
	//	{JumpStatement} (breakStat=BreakStatement | continueStat=ContinueStatement | gotoStat=GotoStatement |
	//	returnStat=ReturnStatement | throwStat=ThrowStatement);
	public JumpStatementElements getJumpStatementAccess() {
		return (pJumpStatement != null) ? pJumpStatement : (pJumpStatement = new JumpStatementElements());
	}
	
	public ParserRule getJumpStatementRule() {
		return getJumpStatementAccess().getRule();
	}

	//ThrowStatement:
	//	{ThrowStatement} "throw" expression=Expression? SEMICOLON;
	public ThrowStatementElements getThrowStatementAccess() {
		return (pThrowStatement != null) ? pThrowStatement : (pThrowStatement = new ThrowStatementElements());
	}
	
	public ParserRule getThrowStatementRule() {
		return getThrowStatementAccess().getRule();
	}

	//ReturnStatement:
	//	{ReturnStatement} ("return" expression=Expression? SEMICOLON);
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//GotoStatement:
	//	{GotoStatement} ("goto" id=Identifier SEMICOLON "goto" "case" expression=Expression SEMICOLON "goto" "default"
	//	SEMICOLON);
	public GotoStatementElements getGotoStatementAccess() {
		return (pGotoStatement != null) ? pGotoStatement : (pGotoStatement = new GotoStatementElements());
	}
	
	public ParserRule getGotoStatementRule() {
		return getGotoStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} "continue" SEMICOLON;
	public ContinueStatementElements getContinueStatementAccess() {
		return (pContinueStatement != null) ? pContinueStatement : (pContinueStatement = new ContinueStatementElements());
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} "break" SEMICOLON;
	public BreakStatementElements getBreakStatementAccess() {
		return (pBreakStatement != null) ? pBreakStatement : (pBreakStatement = new BreakStatementElements());
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//IterationStatement:
	//	{IterationStatement} (whileStatement=WhileStatement | doStatement=DoStatement | forStatement=ForStatement |
	//	foreachStatement=ForeachStatement);
	public IterationStatementElements getIterationStatementAccess() {
		return (pIterationStatement != null) ? pIterationStatement : (pIterationStatement = new IterationStatementElements());
	}
	
	public ParserRule getIterationStatementRule() {
		return getIterationStatementAccess().getRule();
	}

	//ForeachStatement:
	//	{ForeachStatement} ("foreach" "(" tipo=Type id=Identifier "in" expression=Expression ")"
	//	embeddedStatement=EmbeddedStatement);
	public ForeachStatementElements getForeachStatementAccess() {
		return (pForeachStatement != null) ? pForeachStatement : (pForeachStatement = new ForeachStatementElements());
	}
	
	public ParserRule getForeachStatementRule() {
		return getForeachStatementAccess().getRule();
	}

	//ForStatement:
	//	{ForStatement} ("for" "(" forInitializer+=ForInitializer? SEMICOLON expression+=Expression? SEMICOLON
	//	statementExpressionList+=StatementExpressionList? ")" embeddedStatement=EmbeddedStatement);
	public ForStatementElements getForStatementAccess() {
		return (pForStatement != null) ? pForStatement : (pForStatement = new ForStatementElements());
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//ForInitializer:
	//	{ForInitializer} (localVariableDeclaration=LocalVariableDeclaration |
	//	statementExpressionList=StatementExpressionList);
	public ForInitializerElements getForInitializerAccess() {
		return (pForInitializer != null) ? pForInitializer : (pForInitializer = new ForInitializerElements());
	}
	
	public ParserRule getForInitializerRule() {
		return getForInitializerAccess().getRule();
	}

	//StatementExpressionList:
	//	{StatementExpressionList} (list+=StatementExpression ",")+;
	public StatementExpressionListElements getStatementExpressionListAccess() {
		return (pStatementExpressionList != null) ? pStatementExpressionList : (pStatementExpressionList = new StatementExpressionListElements());
	}
	
	public ParserRule getStatementExpressionListRule() {
		return getStatementExpressionListAccess().getRule();
	}

	//StatementExpression:
	//	{StatementExpression} (primaryExpression=PrimaryExpression ("(" argumentList=ArgumentList ")" |
	//	incrimentDecrement=INCREMENT_DECREMENT)) | "new" tipo=Type "(" argumentList=ArgumentList ")" |
	//	unaryExpression=UnaryExpression assignementOperator=ASSIGNEMENT_OPERATOR expression=Expression |
	//	incrimentDecrement=INCREMENT_DECREMENT primaryExpression=PrimaryExpression;
	public StatementExpressionElements getStatementExpressionAccess() {
		return (pStatementExpression != null) ? pStatementExpression : (pStatementExpression = new StatementExpressionElements());
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}

	//PrimaryExpression:
	//	{PrimaryExpression} (("new" (nonArrayType=NonArrayType "[" expressionList=ExpressionList "]"
	//	rankSpecifier+=RANK_SPECIFIER* arrayInitializer+=ArrayInitializer? | arrayType=ArrayType
	//	arrayInitializer2=ArrayInitializer | tipo=Type "(" argumentList=ArgumentList ")") | id=Identifier | literal=Literal |
	//	"(" expression=Expression ")" | "base" ("." id=Identifier | "[" expressionList=ExpressionList "]") |
	//	predefinedType=PredefinedType "." id=Identifier | "this" | "typeof" "(" typeOrVoid=TypeOrVoid ")" | "checked" "("
	//	expression=Expression ")" | "unchecked" "(" expression=Expression ")") primaryExoression2=PrimaryExpression2);
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PrimaryExpression2:
	//	{PrimaryExpression2} (("." id+=Identifier | "(" argumentList+=ArgumentList ")" | "[" expressionList+=ExpressionList
	//	"]" | incrementeDecrement+=INCREMENT_DECREMENT) primaryExpression2+=PrimaryExpression2)*;
	public PrimaryExpression2Elements getPrimaryExpression2Access() {
		return (pPrimaryExpression2 != null) ? pPrimaryExpression2 : (pPrimaryExpression2 = new PrimaryExpression2Elements());
	}
	
	public ParserRule getPrimaryExpression2Rule() {
		return getPrimaryExpression2Access().getRule();
	}

	//DoStatement:
	//	{DoStatement} ("do" embeddedStatement=EmbeddedStatement "while" "(" expression=Expression ")" SEMICOLON);
	public DoStatementElements getDoStatementAccess() {
		return (pDoStatement != null) ? pDoStatement : (pDoStatement = new DoStatementElements());
	}
	
	public ParserRule getDoStatementRule() {
		return getDoStatementAccess().getRule();
	}

	//WhileStatement:
	//	{WhileStatement} "while" "(" expression=Expression ")" embeddedStatement=EmbeddedStatement;
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//SelectionStatement:
	//	{SelectionStatement} (ifStatement=IfStatement | switchStatement=SwitchStatement);
	public SelectionStatementElements getSelectionStatementAccess() {
		return (pSelectionStatement != null) ? pSelectionStatement : (pSelectionStatement = new SelectionStatementElements());
	}
	
	public ParserRule getSelectionStatementRule() {
		return getSelectionStatementAccess().getRule();
	}

	//SwitchStatement:
	//	{SwitchStatement} ("switch" "(" expression=Expression ")" "{" switchSection+=SwitchSection* "}");
	public SwitchStatementElements getSwitchStatementAccess() {
		return (pSwitchStatement != null) ? pSwitchStatement : (pSwitchStatement = new SwitchStatementElements());
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	//SwitchSection:
	//	{SwitchSection} (switchlabel+=SwitchLabel+ statement+=Statement+);
	public SwitchSectionElements getSwitchSectionAccess() {
		return (pSwitchSection != null) ? pSwitchSection : (pSwitchSection = new SwitchSectionElements());
	}
	
	public ParserRule getSwitchSectionRule() {
		return getSwitchSectionAccess().getRule();
	}

	//SwitchLabel:
	//	{SwitchLabel} ("case" expression=Expression ":" | "default" ":");
	public SwitchLabelElements getSwitchLabelAccess() {
		return (pSwitchLabel != null) ? pSwitchLabel : (pSwitchLabel = new SwitchLabelElements());
	}
	
	public ParserRule getSwitchLabelRule() {
		return getSwitchLabelAccess().getRule();
	}

	//IfStatement:
	//	{IfStatement} ("if" "(" expression=Expression ")" embeddedStatement=EmbeddedStatement elsePart=ElsePart?);
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//ElsePart:
	//	{ElsePart} ("else" embeddedStatement=EmbeddedStatement);
	public ElsePartElements getElsePartAccess() {
		return (pElsePart != null) ? pElsePart : (pElsePart = new ElsePartElements());
	}
	
	public ParserRule getElsePartRule() {
		return getElsePartAccess().getRule();
	}

	//Block:
	//	{Block} ("{" statement+=Statement* "}");
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//MaybeEmptyBlock:
	//	{MaybeEmptyBlock} ("{" statement+=Statement* "}" | SEMICOLON);
	public MaybeEmptyBlockElements getMaybeEmptyBlockAccess() {
		return (pMaybeEmptyBlock != null) ? pMaybeEmptyBlock : (pMaybeEmptyBlock = new MaybeEmptyBlockElements());
	}
	
	public ParserRule getMaybeEmptyBlockRule() {
		return getMaybeEmptyBlockAccess().getRule();
	}

	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return (tSEMICOLON != null) ? tSEMICOLON : (tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON"));
	} 

	//terminal ASSIGNEMENT_OPERATOR:
	//	"=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "^=" | "<<=" | ">>=";
	public TerminalRule getASSIGNEMENT_OPERATORRule() {
		return (tASSIGNEMENT_OPERATOR != null) ? tASSIGNEMENT_OPERATOR : (tASSIGNEMENT_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGNEMENT_OPERATOR"));
	} 

	//terminal EXPRESSION_EQUALITY_OPERATOR:
	//	"==" | "!=";
	public TerminalRule getEXPRESSION_EQUALITY_OPERATORRule() {
		return (tEXPRESSION_EQUALITY_OPERATOR != null) ? tEXPRESSION_EQUALITY_OPERATOR : (tEXPRESSION_EQUALITY_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_EQUALITY_OPERATOR"));
	} 

	//terminal LESS_THAN:
	//	"<";
	public TerminalRule getLESS_THANRule() {
		return (tLESS_THAN != null) ? tLESS_THAN : (tLESS_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS_THAN"));
	} 

	//terminal GREATER_THAN:
	//	">";
	public TerminalRule getGREATER_THANRule() {
		return (tGREATER_THAN != null) ? tGREATER_THAN : (tGREATER_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GREATER_THAN"));
	} 

	//terminal BAR:
	//	"|";
	public TerminalRule getBARRule() {
		return (tBAR != null) ? tBAR : (tBAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BAR"));
	} 

	//terminal AMPERSAND:
	//	"&";
	public TerminalRule getAMPERSANDRule() {
		return (tAMPERSAND != null) ? tAMPERSAND : (tAMPERSAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AMPERSAND"));
	} 

	//terminal INCREMENT_DECREMENT:
	//	"++" | "--";
	public TerminalRule getINCREMENT_DECREMENTRule() {
		return (tINCREMENT_DECREMENT != null) ? tINCREMENT_DECREMENT : (tINCREMENT_DECREMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCREMENT_DECREMENT"));
	} 

	//terminal OPERATOR_OR_SIGN:
	//	"+" | "-";
	public TerminalRule getOPERATOR_OR_SIGNRule() {
		return (tOPERATOR_OR_SIGN != null) ? tOPERATOR_OR_SIGN : (tOPERATOR_OR_SIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR_OR_SIGN"));
	} 

	//terminal REAL_TYPE_SUFFIX:
	//	"F" | "f" | "D" | "d" | "M" | "m";
	public TerminalRule getREAL_TYPE_SUFFIXRule() {
		return (tREAL_TYPE_SUFFIX != null) ? tREAL_TYPE_SUFFIX : (tREAL_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL_TYPE_SUFFIX"));
	} 

	//terminal LETTER:
	//	"A".."Z" | "a".."z";
	public TerminalRule getLETTERRule() {
		return (tLETTER != null) ? tLETTER : (tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER"));
	} 

	//terminal IDENTIFIER_START_CHARACTER:
	//	LETTER | "_";
	public TerminalRule getIDENTIFIER_START_CHARACTERRule() {
		return (tIDENTIFIER_START_CHARACTER != null) ? tIDENTIFIER_START_CHARACTER : (tIDENTIFIER_START_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER_START_CHARACTER"));
	} 

	//terminal QUOTE_ESCAPE_SEQUENCE:
	//	"\"\"";
	public TerminalRule getQUOTE_ESCAPE_SEQUENCERule() {
		return (tQUOTE_ESCAPE_SEQUENCE != null) ? tQUOTE_ESCAPE_SEQUENCE : (tQUOTE_ESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTE_ESCAPE_SEQUENCE"));
	} 

	//terminal ESCAPE_SEQUENCE:
	//	"\'" | "\"" | "\\" | "0" | "a" | "b" | "f" | "n" | "r" | "t" | "v";
	public TerminalRule getESCAPE_SEQUENCERule() {
		return (tESCAPE_SEQUENCE != null) ? tESCAPE_SEQUENCE : (tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE"));
	} 

	//terminal NEW_LINE:
	//	("\r" | "\n")*;
	public TerminalRule getNEW_LINERule() {
		return (tNEW_LINE != null) ? tNEW_LINE : (tNEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEW_LINE"));
	} 

	//terminal RANK_SPECIFIER:
	//	"[" ","* "]";
	public TerminalRule getRANK_SPECIFIERRule() {
		return (tRANK_SPECIFIER != null) ? tRANK_SPECIFIER : (tRANK_SPECIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RANK_SPECIFIER"));
	} 

	//terminal INTEGER_TYPE_SUFFIX:
	//	"U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu";
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return (tINTEGER_TYPE_SUFFIX != null) ? tINTEGER_TYPE_SUFFIX : (tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_TYPE_SUFFIX"));
	} 

	//terminal HEX_DIGIT:
	//	"0".."9" | ("A".."F" | "a".."f");
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal OPERATOR_OR_PUNCTUATOR:
	//	"{" | "}" | "[" | "]" | "(" | ")" | "." | "," | ":" | SEMICOLON | "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "!"
	//	| "~" | "=" | "<" | ">" | "?" | "++" | "--" | "&&" | "||" | "<<" | ">>" | "==" | "!=" | "<=" | ">=" | "+=" | "-=" |
	//	"*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "->";
	public TerminalRule getOPERATOR_OR_PUNCTUATORRule() {
		return (tOPERATOR_OR_PUNCTUATOR != null) ? tOPERATOR_OR_PUNCTUATOR : (tOPERATOR_OR_PUNCTUATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR_OR_PUNCTUATOR"));
	} 

	//terminal SINGLE_CHARACTER:
	//	.?;
	public TerminalRule getSINGLE_CHARACTERRule() {
		return (tSINGLE_CHARACTER != null) ? tSINGLE_CHARACTER : (tSINGLE_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_CHARACTER"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal QUOTES:
	//	"{"->"}";
	public TerminalRule getQUOTESRule() {
		return (tQUOTES != null) ? tQUOTES : (tQUOTES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTES"));
	} 
}
