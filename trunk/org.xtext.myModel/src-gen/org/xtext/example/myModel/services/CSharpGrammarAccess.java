/*
* generated by Xtext
*/
package org.xtext.example.myModel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CSharpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cInputAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInputInputParserRuleCall_0 = (RuleCall)cInputAssignment.eContents().get(0);
		
		//Model:
		//	input+=Input*;
		public ParserRule getRule() { return rule; }

		//input+=Input*
		public Assignment getInputAssignment() { return cInputAssignment; }

		//Input
		public RuleCall getInputInputParserRuleCall_0() { return cInputInputParserRuleCall_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final RuleCall cInputSectionPartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Input:
		//	InputSectionPart*;
		public ParserRule getRule() { return rule; }

		//InputSectionPart*
		public RuleCall getInputSectionPartParserRuleCall() { return cInputSectionPartParserRuleCall; }
	}

	public class InputSectionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputSectionPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInputElementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cNEW_LINETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cSINGLE_LINE_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InputSectionPart:
		//	InputElement* NEW_LINE | SINGLE_LINE_COMMENT;
		public ParserRule getRule() { return rule; }

		//InputElement* NEW_LINE | SINGLE_LINE_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputElement* NEW_LINE
		public Group getGroup_0() { return cGroup_0; }

		//InputElement*
		public RuleCall getInputElementParserRuleCall_0_0() { return cInputElementParserRuleCall_0_0; }

		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_0_1() { return cNEW_LINETerminalRuleCall_0_1; }

		//SINGLE_LINE_COMMENT
		public RuleCall getSINGLE_LINE_COMMENTTerminalRuleCall_1() { return cSINGLE_LINE_COMMENTTerminalRuleCall_1; }
	}

	public class InputElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWHITE_SPACETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTokenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InputElement:
		//	WHITE_SPACE | Comment | Token;
		public ParserRule getRule() { return rule; }

		//WHITE_SPACE | Comment | Token
		public Alternatives getAlternatives() { return cAlternatives; }

		//WHITE_SPACE
		public RuleCall getWHITE_SPACETerminalRuleCall_0() { return cWHITE_SPACETerminalRuleCall_0; }

		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }

		//Token
		public RuleCall getTokenParserRuleCall_2() { return cTokenParserRuleCall_2; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *   |RealLiteral
		//    |CharacterLiteral
		//    |StringLiteral
		//    |OperatorOrPunctuator
		//    * / Token:
		//	identifier | Keywords | IntegerLiteral;
		public ParserRule getRule() { return rule; }

		//identifier | Keywords | IntegerLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//Keywords
		public RuleCall getKeywordsParserRuleCall_1() { return cKeywordsParserRuleCall_1; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_2() { return cIntegerLiteralParserRuleCall_2; }
	}

	public class KeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBaseKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBreakKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cByteKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCaseKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCatchKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCharKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCheckedKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cClassKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cConstKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cContinueKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDecimalKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cDefaultKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cDelegateKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cDoKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cDoubleKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cElseKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cEnumKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cEventKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cExplicitKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cExternKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cFalseKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cFinallyKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cFixedKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cFloatKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cForKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cForeachKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cGotoKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cIfKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cImplicitKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cInKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cIntKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cInterfaceKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cInternalKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cIsKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cLockKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cLongKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cNamespaceKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cNewKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cNullKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cObjectKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cOperatorKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cOutKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cOverrideKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cParamsKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cPrivateKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cProtectedKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cPublicKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cReadonlyKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cRefKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cReturnKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cSbyteKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cSealedKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cShortKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cSizeofKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cStackallocKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cStaticKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cStringKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cStructKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cSwitchKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cThisKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cThrowKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cTrueKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cTryKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cTypeofKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cUintKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		private final Keyword cUlongKeyword_68 = (Keyword)cAlternatives.eContents().get(68);
		private final Keyword cUncheckedKeyword_69 = (Keyword)cAlternatives.eContents().get(69);
		private final Keyword cUnsafeKeyword_70 = (Keyword)cAlternatives.eContents().get(70);
		private final Keyword cUshortKeyword_71 = (Keyword)cAlternatives.eContents().get(71);
		private final Keyword cUsingKeyword_72 = (Keyword)cAlternatives.eContents().get(72);
		private final Keyword cVirtualKeyword_73 = (Keyword)cAlternatives.eContents().get(73);
		private final Keyword cVoidKeyword_74 = (Keyword)cAlternatives.eContents().get(74);
		private final Keyword cVolatileKeyword_75 = (Keyword)cAlternatives.eContents().get(75);
		private final Keyword cWhileKeyword_76 = (Keyword)cAlternatives.eContents().get(76);
		
		//Keywords:
		//	"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
		//	"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
		//	| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
		//	"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
		//	"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
		//	"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
		//	"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" |
		//	"while";
		public ParserRule getRule() { return rule; }

		//"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
		//"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
		//| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
		//"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
		//"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
		//"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
		//"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//"base"
		public Keyword getBaseKeyword_2() { return cBaseKeyword_2; }

		//"bool"
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }

		//"break"
		public Keyword getBreakKeyword_4() { return cBreakKeyword_4; }

		//"byte"
		public Keyword getByteKeyword_5() { return cByteKeyword_5; }

		//"case"
		public Keyword getCaseKeyword_6() { return cCaseKeyword_6; }

		//"catch"
		public Keyword getCatchKeyword_7() { return cCatchKeyword_7; }

		//"char"
		public Keyword getCharKeyword_8() { return cCharKeyword_8; }

		//"checked"
		public Keyword getCheckedKeyword_9() { return cCheckedKeyword_9; }

		//"class"
		public Keyword getClassKeyword_10() { return cClassKeyword_10; }

		//"const"
		public Keyword getConstKeyword_11() { return cConstKeyword_11; }

		//"continue"
		public Keyword getContinueKeyword_12() { return cContinueKeyword_12; }

		//"decimal"
		public Keyword getDecimalKeyword_13() { return cDecimalKeyword_13; }

		//"default"
		public Keyword getDefaultKeyword_14() { return cDefaultKeyword_14; }

		//"delegate"
		public Keyword getDelegateKeyword_15() { return cDelegateKeyword_15; }

		//"do"
		public Keyword getDoKeyword_16() { return cDoKeyword_16; }

		//"double"
		public Keyword getDoubleKeyword_17() { return cDoubleKeyword_17; }

		//"else"
		public Keyword getElseKeyword_18() { return cElseKeyword_18; }

		//"enum"
		public Keyword getEnumKeyword_19() { return cEnumKeyword_19; }

		//"event"
		public Keyword getEventKeyword_20() { return cEventKeyword_20; }

		//"explicit"
		public Keyword getExplicitKeyword_21() { return cExplicitKeyword_21; }

		//"extern"
		public Keyword getExternKeyword_22() { return cExternKeyword_22; }

		//"false"
		public Keyword getFalseKeyword_23() { return cFalseKeyword_23; }

		//"finally"
		public Keyword getFinallyKeyword_24() { return cFinallyKeyword_24; }

		//"fixed"
		public Keyword getFixedKeyword_25() { return cFixedKeyword_25; }

		//"float"
		public Keyword getFloatKeyword_26() { return cFloatKeyword_26; }

		//"for"
		public Keyword getForKeyword_27() { return cForKeyword_27; }

		//"foreach"
		public Keyword getForeachKeyword_28() { return cForeachKeyword_28; }

		//"goto"
		public Keyword getGotoKeyword_29() { return cGotoKeyword_29; }

		//"if"
		public Keyword getIfKeyword_30() { return cIfKeyword_30; }

		//"implicit"
		public Keyword getImplicitKeyword_31() { return cImplicitKeyword_31; }

		//"in"
		public Keyword getInKeyword_32() { return cInKeyword_32; }

		//"int"
		public Keyword getIntKeyword_33() { return cIntKeyword_33; }

		//"interface"
		public Keyword getInterfaceKeyword_34() { return cInterfaceKeyword_34; }

		//"internal"
		public Keyword getInternalKeyword_35() { return cInternalKeyword_35; }

		//"is"
		public Keyword getIsKeyword_36() { return cIsKeyword_36; }

		//"lock"
		public Keyword getLockKeyword_37() { return cLockKeyword_37; }

		//"long"
		public Keyword getLongKeyword_38() { return cLongKeyword_38; }

		//"namespace"
		public Keyword getNamespaceKeyword_39() { return cNamespaceKeyword_39; }

		//"new"
		public Keyword getNewKeyword_40() { return cNewKeyword_40; }

		//"null"
		public Keyword getNullKeyword_41() { return cNullKeyword_41; }

		//"object"
		public Keyword getObjectKeyword_42() { return cObjectKeyword_42; }

		//"operator"
		public Keyword getOperatorKeyword_43() { return cOperatorKeyword_43; }

		//"out"
		public Keyword getOutKeyword_44() { return cOutKeyword_44; }

		//"override"
		public Keyword getOverrideKeyword_45() { return cOverrideKeyword_45; }

		//"params"
		public Keyword getParamsKeyword_46() { return cParamsKeyword_46; }

		//"private"
		public Keyword getPrivateKeyword_47() { return cPrivateKeyword_47; }

		//"protected"
		public Keyword getProtectedKeyword_48() { return cProtectedKeyword_48; }

		//"public"
		public Keyword getPublicKeyword_49() { return cPublicKeyword_49; }

		//"readonly"
		public Keyword getReadonlyKeyword_50() { return cReadonlyKeyword_50; }

		//"ref"
		public Keyword getRefKeyword_51() { return cRefKeyword_51; }

		//"return"
		public Keyword getReturnKeyword_52() { return cReturnKeyword_52; }

		//"sbyte"
		public Keyword getSbyteKeyword_53() { return cSbyteKeyword_53; }

		//"sealed"
		public Keyword getSealedKeyword_54() { return cSealedKeyword_54; }

		//"short"
		public Keyword getShortKeyword_55() { return cShortKeyword_55; }

		//"sizeof"
		public Keyword getSizeofKeyword_56() { return cSizeofKeyword_56; }

		//"stackalloc"
		public Keyword getStackallocKeyword_57() { return cStackallocKeyword_57; }

		//"static"
		public Keyword getStaticKeyword_58() { return cStaticKeyword_58; }

		//"string"
		public Keyword getStringKeyword_59() { return cStringKeyword_59; }

		//"struct"
		public Keyword getStructKeyword_60() { return cStructKeyword_60; }

		//"switch"
		public Keyword getSwitchKeyword_61() { return cSwitchKeyword_61; }

		//"this"
		public Keyword getThisKeyword_62() { return cThisKeyword_62; }

		//"throw"
		public Keyword getThrowKeyword_63() { return cThrowKeyword_63; }

		//"true"
		public Keyword getTrueKeyword_64() { return cTrueKeyword_64; }

		//"try"
		public Keyword getTryKeyword_65() { return cTryKeyword_65; }

		//"typeof"
		public Keyword getTypeofKeyword_66() { return cTypeofKeyword_66; }

		//"uint"
		public Keyword getUintKeyword_67() { return cUintKeyword_67; }

		//"ulong"
		public Keyword getUlongKeyword_68() { return cUlongKeyword_68; }

		//"unchecked"
		public Keyword getUncheckedKeyword_69() { return cUncheckedKeyword_69; }

		//"unsafe"
		public Keyword getUnsafeKeyword_70() { return cUnsafeKeyword_70; }

		//"ushort"
		public Keyword getUshortKeyword_71() { return cUshortKeyword_71; }

		//"using"
		public Keyword getUsingKeyword_72() { return cUsingKeyword_72; }

		//"virtual"
		public Keyword getVirtualKeyword_73() { return cVirtualKeyword_73; }

		//"void"
		public Keyword getVoidKeyword_74() { return cVoidKeyword_74; }

		//"volatile"
		public Keyword getVolatileKeyword_75() { return cVolatileKeyword_75; }

		//"while"
		public Keyword getWhileKeyword_76() { return cWhileKeyword_76; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cXKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cXKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//IntegerLiteral:
		//	DECIMAL_DIGIT+ INTEGER_TYPE_SUFFIX? | "0x" HEX_DIGIT+ INTEGER_TYPE_SUFFIX | "0X" HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
		public ParserRule getRule() { return rule; }

		//DECIMAL_DIGIT+ INTEGER_TYPE_SUFFIX? | "0x" HEX_DIGIT+ INTEGER_TYPE_SUFFIX | "0X" HEX_DIGIT+ INTEGER_TYPE_SUFFIX?
		public Alternatives getAlternatives() { return cAlternatives; }

		//DECIMAL_DIGIT+ INTEGER_TYPE_SUFFIX?
		public Group getGroup_0() { return cGroup_0; }

		//DECIMAL_DIGIT+
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_0_0() { return cDECIMAL_DIGITTerminalRuleCall_0_0; }

		//INTEGER_TYPE_SUFFIX?
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_0_1() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_0_1; }

		//"0x" HEX_DIGIT+ INTEGER_TYPE_SUFFIX
		public Group getGroup_1() { return cGroup_1; }

		//"0x"
		public Keyword getXKeyword_1_0() { return cXKeyword_1_0; }

		//HEX_DIGIT+
		public RuleCall getHEX_DIGITTerminalRuleCall_1_1() { return cHEX_DIGITTerminalRuleCall_1_1; }

		//INTEGER_TYPE_SUFFIX
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_1_2() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_1_2; }

		//"0X" HEX_DIGIT+ INTEGER_TYPE_SUFFIX?
		public Group getGroup_2() { return cGroup_2; }

		//"0X"
		public Keyword getXKeyword_2_0() { return cXKeyword_2_0; }

		//HEX_DIGIT+
		public RuleCall getHEX_DIGITTerminalRuleCall_2_1() { return cHEX_DIGITTerminalRuleCall_2_1; }

		//INTEGER_TYPE_SUFFIX?
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_2_2() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_2_2; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_LINE_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDELIMITED_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		//RealLiteral:
		//	
		//;
		//
		//CharacterLiteral:
		//	
		//;
		//
		//StringLiteral:
		//	
		//;
		//
		//OperatorOrPunctuator:
		//	
		//;
		// * 
		// * / Comment:
		//	SINGLE_LINE_COMMENT | DELIMITED_COMMENT;
		public ParserRule getRule() { return rule; }

		//SINGLE_LINE_COMMENT | DELIMITED_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//SINGLE_LINE_COMMENT
		public RuleCall getSINGLE_LINE_COMMENTTerminalRuleCall_0() { return cSINGLE_LINE_COMMENTTerminalRuleCall_0; }

		//DELIMITED_COMMENT
		public RuleCall getDELIMITED_COMMENTTerminalRuleCall_1() { return cDELIMITED_COMMENTTerminalRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonArrayTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRANK_SPECIFIERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Type:
		//	NonArrayType RANK_SPECIFIER*;
		public ParserRule getRule() { return rule; }

		//NonArrayType RANK_SPECIFIER*
		public Group getGroup() { return cGroup; }

		//NonArrayType
		public RuleCall getNonArrayTypeParserRuleCall_0() { return cNonArrayTypeParserRuleCall_0; }

		//RANK_SPECIFIER*
		public RuleCall getRANK_SPECIFIERParserRuleCall_1() { return cRANK_SPECIFIERParserRuleCall_1; }
	}

	public class IntegralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSbyteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cShortKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUshortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUintKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUlongKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCharKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//IntegralType:
		//	"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char";
		public ParserRule getRule() { return rule; }

		//"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"sbyte"
		public Keyword getSbyteKeyword_0() { return cSbyteKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"short"
		public Keyword getShortKeyword_2() { return cShortKeyword_2; }

		//"ushort"
		public Keyword getUshortKeyword_3() { return cUshortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"uint"
		public Keyword getUintKeyword_5() { return cUintKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"ulong"
		public Keyword getUlongKeyword_7() { return cUlongKeyword_7; }

		//"char"
		public Keyword getCharKeyword_8() { return cCharKeyword_8; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonArrayTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRANK_SPECIFIERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ArrayType:
		//	NonArrayType RANK_SPECIFIER+;
		public ParserRule getRule() { return rule; }

		//NonArrayType RANK_SPECIFIER+
		public Group getGroup() { return cGroup; }

		//NonArrayType
		public RuleCall getNonArrayTypeParserRuleCall_0() { return cNonArrayTypeParserRuleCall_0; }

		//RANK_SPECIFIER+
		public RuleCall getRANK_SPECIFIERParserRuleCall_1() { return cRANK_SPECIFIERParserRuleCall_1; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEnumModifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEnumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIntegralTypeParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cEnumBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumType:
		//	Attributes EnumModifier* "enum" identifier (":" IntegralType)? EnumBody ";"?;
		public ParserRule getRule() { return rule; }

		//Attributes EnumModifier* "enum" identifier (":" IntegralType)? EnumBody ";"?
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//EnumModifier*
		public RuleCall getEnumModifierParserRuleCall_1() { return cEnumModifierParserRuleCall_1; }

		//"enum"
		public Keyword getEnumKeyword_2() { return cEnumKeyword_2; }

		//identifier
		public RuleCall getIdentifierParserRuleCall_3() { return cIdentifierParserRuleCall_3; }

		//(":" IntegralType)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_4_1() { return cIntegralTypeParserRuleCall_4_1; }

		//EnumBody
		public RuleCall getEnumBodyParserRuleCall_5() { return cEnumBodyParserRuleCall_5; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class RANK_SPECIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RANK_SPECIFIER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RANK_SPECIFIER:
		//	"[" ","* "]";
		public ParserRule getRule() { return rule; }

		//"[" ","* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//","*
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class NonArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonArrayType");
		private final RuleCall cBuiltInTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NonArrayType: //QualifiedIdentifier|
		//	builtInType;
		public ParserRule getRule() { return rule; }

		////QualifiedIdentifier|
		//builtInType
		public RuleCall getBuiltInTypeParserRuleCall() { return cBuiltInTypeParserRuleCall; }
	}

	public class BuiltInTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "builtInType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegralTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltInClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDecimalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		/// *
		//QualifiedIdentifier:
		//   {identifier}+ 
		//;
		// * / builtInType:
		//	IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double";
		public ParserRule getRule() { return rule; }

		//IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_0() { return cIntegralTypeParserRuleCall_0; }

		//BuiltInClassType
		public RuleCall getBuiltInClassTypeParserRuleCall_1() { return cBuiltInClassTypeParserRuleCall_1; }

		//"bool"
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }

		//"decimal"
		public Keyword getDecimalKeyword_3() { return cDecimalKeyword_3; }

		//"float"
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }

		//"double"
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }
	}

	public class BuiltInClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInClassType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BuiltInClassType:
		//	"object" | "string";
		public ParserRule getRule() { return rule; }

		//"object" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class EnumBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////|'{' {EnumMemberDeclaration ','}+ ','? '}'
		//EnumBody:
		//	"{" "}";
		public ParserRule getRule() { return rule; }

		//"{" "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1() { return cRightCurlyBracketKeyword_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "identifier");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//identifier:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}

	public class EnumModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//EnumModifier:
		//	"new" | "public" | "protected" | "internal" | "private";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attributes");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//Attributes:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}
	
	
	private ModelElements pModel;
	private TerminalRule tNEW_LINE;
	private TerminalRule tWHITE_SPACE;
	private TerminalRule tSINGLE_LINE_COMMENT;
	private TerminalRule tDELIMITED_COMMENT;
	private TerminalRule tDECIMAL_DIGIT;
	private TerminalRule tINTEGER_TYPE_SUFFIX;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tLETTER;
	private InputElements pInput;
	private InputSectionPartElements pInputSectionPart;
	private InputElementElements pInputElement;
	private TokenElements pToken;
	private KeywordsElements pKeywords;
	private IntegerLiteralElements pIntegerLiteral;
	private CommentElements pComment;
	private TypeElements pType;
	private IntegralTypeElements pIntegralType;
	private ArrayTypeElements pArrayType;
	private EnumTypeElements pEnumType;
	private RANK_SPECIFIERElements pRANK_SPECIFIER;
	private NonArrayTypeElements pNonArrayType;
	private BuiltInTypeElements pBuiltInType;
	private BuiltInClassTypeElements pBuiltInClassType;
	private EnumBodyElements pEnumBody;
	private IdentifierElements pIdentifier;
	private EnumModifierElements pEnumModifier;
	private AttributesElements pAttributes;
	
	private final Grammar grammar;

	@Inject
	public CSharpGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.myModel.CSharp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	input+=Input*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal NEW_LINE:
	//	"\n" | "\r";
	public TerminalRule getNEW_LINERule() {
		return (tNEW_LINE != null) ? tNEW_LINE : (tNEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEW_LINE"));
	} 

	//terminal WHITE_SPACE:
	//	(" " | "\t" | NEW_LINE)+;
	public TerminalRule getWHITE_SPACERule() {
		return (tWHITE_SPACE != null) ? tWHITE_SPACE : (tWHITE_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHITE_SPACE"));
	} 

	//terminal SINGLE_LINE_COMMENT:
	//	"//" "/S"*;
	public TerminalRule getSINGLE_LINE_COMMENTRule() {
		return (tSINGLE_LINE_COMMENT != null) ? tSINGLE_LINE_COMMENT : (tSINGLE_LINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_LINE_COMMENT"));
	} 

	//terminal DELIMITED_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getDELIMITED_COMMENTRule() {
		return (tDELIMITED_COMMENT != null) ? tDELIMITED_COMMENT : (tDELIMITED_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DELIMITED_COMMENT"));
	} 

	//terminal DECIMAL_DIGIT:
	//	"0".."9";
	public TerminalRule getDECIMAL_DIGITRule() {
		return (tDECIMAL_DIGIT != null) ? tDECIMAL_DIGIT : (tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_DIGIT"));
	} 

	//terminal INTEGER_TYPE_SUFFIX:
	//	"U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu";
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return (tINTEGER_TYPE_SUFFIX != null) ? tINTEGER_TYPE_SUFFIX : (tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_TYPE_SUFFIX"));
	} 

	//terminal HEX_DIGIT:
	//	DECIMAL_DIGIT | LETTER;
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal LETTER:
	//	"A".."F" | "a".."f";
	public TerminalRule getLETTERRule() {
		return (tLETTER != null) ? tLETTER : (tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER"));
	} 

	//Input:
	//	InputSectionPart*;
	public InputElements getInputAccess() {
		return (pInput != null) ? pInput : (pInput = new InputElements());
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//InputSectionPart:
	//	InputElement* NEW_LINE | SINGLE_LINE_COMMENT;
	public InputSectionPartElements getInputSectionPartAccess() {
		return (pInputSectionPart != null) ? pInputSectionPart : (pInputSectionPart = new InputSectionPartElements());
	}
	
	public ParserRule getInputSectionPartRule() {
		return getInputSectionPartAccess().getRule();
	}

	//InputElement:
	//	WHITE_SPACE | Comment | Token;
	public InputElementElements getInputElementAccess() {
		return (pInputElement != null) ? pInputElement : (pInputElement = new InputElementElements());
	}
	
	public ParserRule getInputElementRule() {
		return getInputElementAccess().getRule();
	}

	/// *   |RealLiteral
	//    |CharacterLiteral
	//    |StringLiteral
	//    |OperatorOrPunctuator
	//    * / Token:
	//	identifier | Keywords | IntegerLiteral;
	public TokenElements getTokenAccess() {
		return (pToken != null) ? pToken : (pToken = new TokenElements());
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//Keywords:
	//	"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
	//	"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
	//	| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
	//	"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
	//	"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
	//	"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
	//	"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" |
	//	"while";
	public KeywordsElements getKeywordsAccess() {
		return (pKeywords != null) ? pKeywords : (pKeywords = new KeywordsElements());
	}
	
	public ParserRule getKeywordsRule() {
		return getKeywordsAccess().getRule();
	}

	//IntegerLiteral:
	//	DECIMAL_DIGIT+ INTEGER_TYPE_SUFFIX? | "0x" HEX_DIGIT+ INTEGER_TYPE_SUFFIX | "0X" HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	/// *
	//RealLiteral:
	//	
	//;
	//
	//CharacterLiteral:
	//	
	//;
	//
	//StringLiteral:
	//	
	//;
	//
	//OperatorOrPunctuator:
	//	
	//;
	// * 
	// * / Comment:
	//	SINGLE_LINE_COMMENT | DELIMITED_COMMENT;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Type:
	//	NonArrayType RANK_SPECIFIER*;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//IntegralType:
	//	"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char";
	public IntegralTypeElements getIntegralTypeAccess() {
		return (pIntegralType != null) ? pIntegralType : (pIntegralType = new IntegralTypeElements());
	}
	
	public ParserRule getIntegralTypeRule() {
		return getIntegralTypeAccess().getRule();
	}

	//ArrayType:
	//	NonArrayType RANK_SPECIFIER+;
	public ArrayTypeElements getArrayTypeAccess() {
		return (pArrayType != null) ? pArrayType : (pArrayType = new ArrayTypeElements());
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//EnumType:
	//	Attributes EnumModifier* "enum" identifier (":" IntegralType)? EnumBody ";"?;
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//RANK_SPECIFIER:
	//	"[" ","* "]";
	public RANK_SPECIFIERElements getRANK_SPECIFIERAccess() {
		return (pRANK_SPECIFIER != null) ? pRANK_SPECIFIER : (pRANK_SPECIFIER = new RANK_SPECIFIERElements());
	}
	
	public ParserRule getRANK_SPECIFIERRule() {
		return getRANK_SPECIFIERAccess().getRule();
	}

	//NonArrayType: //QualifiedIdentifier|
	//	builtInType;
	public NonArrayTypeElements getNonArrayTypeAccess() {
		return (pNonArrayType != null) ? pNonArrayType : (pNonArrayType = new NonArrayTypeElements());
	}
	
	public ParserRule getNonArrayTypeRule() {
		return getNonArrayTypeAccess().getRule();
	}

	/// *
	//QualifiedIdentifier:
	//   {identifier}+ 
	//;
	// * / builtInType:
	//	IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double";
	public BuiltInTypeElements getBuiltInTypeAccess() {
		return (pBuiltInType != null) ? pBuiltInType : (pBuiltInType = new BuiltInTypeElements());
	}
	
	public ParserRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}

	//BuiltInClassType:
	//	"object" | "string";
	public BuiltInClassTypeElements getBuiltInClassTypeAccess() {
		return (pBuiltInClassType != null) ? pBuiltInClassType : (pBuiltInClassType = new BuiltInClassTypeElements());
	}
	
	public ParserRule getBuiltInClassTypeRule() {
		return getBuiltInClassTypeAccess().getRule();
	}

	////|'{' {EnumMemberDeclaration ','}+ ','? '}'
	//EnumBody:
	//	"{" "}";
	public EnumBodyElements getEnumBodyAccess() {
		return (pEnumBody != null) ? pEnumBody : (pEnumBody = new EnumBodyElements());
	}
	
	public ParserRule getEnumBodyRule() {
		return getEnumBodyAccess().getRule();
	}

	//identifier:
	//	"null";
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//EnumModifier:
	//	"new" | "public" | "protected" | "internal" | "private";
	public EnumModifierElements getEnumModifierAccess() {
		return (pEnumModifier != null) ? pEnumModifier : (pEnumModifier = new EnumModifierElements());
	}
	
	public ParserRule getEnumModifierRule() {
		return getEnumModifierAccess().getRule();
	}

	//Attributes:
	//	"null";
	public AttributesElements getAttributesAccess() {
		return (pAttributes != null) ? pAttributes : (pAttributes = new AttributesElements());
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
}
