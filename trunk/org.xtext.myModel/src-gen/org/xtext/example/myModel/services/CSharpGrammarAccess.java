/*
* generated by Xtext
*/
package org.xtext.example.myModel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CSharpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cInputsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInputsInputParserRuleCall_0 = (RuleCall)cInputsAssignment.eContents().get(0);
		
		//Model:
		//	inputs?=Input;
		public ParserRule getRule() { return rule; }

		//inputs?=Input
		public Assignment getInputsAssignment() { return cInputsAssignment; }

		//Input
		public RuleCall getInputsInputParserRuleCall_0() { return cInputsInputParserRuleCall_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final RuleCall cInputSectionPartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Input:
		//	InputSectionPart;
		public ParserRule getRule() { return rule; }

		//InputSectionPart
		public RuleCall getInputSectionPartParserRuleCall() { return cInputSectionPartParserRuleCall; }
	}

	public class InputSectionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputSectionPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInputElementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cNEW_LINETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cPPDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////LEXICA
		//InputSectionPart:
		//	InputElement* NEW_LINE | PPDirective;
		public ParserRule getRule() { return rule; }

		//InputElement* NEW_LINE | PPDirective
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputElement* NEW_LINE
		public Group getGroup_0() { return cGroup_0; }

		//InputElement*
		public RuleCall getInputElementParserRuleCall_0_0() { return cInputElementParserRuleCall_0_0; }

		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_0_1() { return cNEW_LINETerminalRuleCall_0_1; }

		//PPDirective
		public RuleCall getPPDirectiveParserRuleCall_1() { return cPPDirectiveParserRuleCall_1; }
	}

	public class PPDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPPDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPPConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PPDirective:
		//	PPDeclaration | / *
		// |PPLine
		// |PPDiagnostic
		// |PPRegion * / PPConditional;
		public ParserRule getRule() { return rule; }

		//PPDeclaration | / *
		// |PPLine
		// |PPDiagnostic
		// |PPRegion * / PPConditional
		public Alternatives getAlternatives() { return cAlternatives; }

		//PPDeclaration
		public RuleCall getPPDeclarationParserRuleCall_0() { return cPPDeclarationParserRuleCall_0; }

		/// *
		// |PPLine
		// |PPDiagnostic
		// |PPRegion * / PPConditional
		public RuleCall getPPConditionalParserRuleCall_1() { return cPPConditionalParserRuleCall_1; }
	}

	public class PPConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPIfSectionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPPElifSectionsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPPElseSectionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cPPEndifParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PPConditional:
		//	WS* PPIfSection WS* PPElifSections? => PPElseSection? PPEndif;
		public ParserRule getRule() { return rule; }

		//WS* PPIfSection WS* PPElifSections? => PPElseSection? PPEndif
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//PPIfSection
		public RuleCall getPPIfSectionParserRuleCall_1() { return cPPIfSectionParserRuleCall_1; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//PPElifSections?
		public RuleCall getPPElifSectionsParserRuleCall_3() { return cPPElifSectionsParserRuleCall_3; }

		//=> PPElseSection?
		public RuleCall getPPElseSectionParserRuleCall_4() { return cPPElseSectionParserRuleCall_4; }

		//PPEndif
		public RuleCall getPPEndifParserRuleCall_5() { return cPPEndifParserRuleCall_5; }
	}

	public class PPEndifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPEndif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPPNewLineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPEndif:
		//	"endif" PPNewLine;
		public ParserRule getRule() { return rule; }

		//"endif" PPNewLine
		public Group getGroup() { return cGroup; }

		//"endif"
		public Keyword getEndifKeyword_0() { return cEndifKeyword_0; }

		//PPNewLine
		public RuleCall getPPNewLineParserRuleCall_1() { return cPPNewLineParserRuleCall_1; }
	}

	public class PPElseSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPElseSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPPNewLineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPElseSection:
		//	"else" //ConditionalSection?
		// PPNewLine;
		public ParserRule getRule() { return rule; }

		//"else" //ConditionalSection?
		// PPNewLine
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		////ConditionalSection?
		// PPNewLine
		public RuleCall getPPNewLineParserRuleCall_1() { return cPPNewLineParserRuleCall_1; }
	}

	public class PPElifSectionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPElifSections");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPElifSectionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPElifSections2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPElifSections:
		//	PPElifSection PPElifSections2;
		public ParserRule getRule() { return rule; }

		//PPElifSection PPElifSections2
		public Group getGroup() { return cGroup; }

		//PPElifSection
		public RuleCall getPPElifSectionParserRuleCall_0() { return cPPElifSectionParserRuleCall_0; }

		//PPElifSections2
		public RuleCall getPPElifSections2ParserRuleCall_1() { return cPPElifSections2ParserRuleCall_1; }
	}

	public class PPElifSections2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPElifSections2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPElifSectionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPElifSections2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPElifSections2:
		//	(PPElifSection PPElifSections2)*;
		public ParserRule getRule() { return rule; }

		//(PPElifSection PPElifSections2)*
		public Group getGroup() { return cGroup; }

		//PPElifSection
		public RuleCall getPPElifSectionParserRuleCall_0() { return cPPElifSectionParserRuleCall_0; }

		//PPElifSections2
		public RuleCall getPPElifSections2ParserRuleCall_1() { return cPPElifSections2ParserRuleCall_1; }
	}

	public class PPElifSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPElifSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPPNewLineParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PPElifSection:
		//	"elif" WS PPExpression //ConditionalSection?
		// PPNewLine;
		public ParserRule getRule() { return rule; }

		//=> "elif" WS PPExpression //ConditionalSection?
		// PPNewLine
		public Group getGroup() { return cGroup; }

		//=> "elif"
		public Keyword getElifKeyword_0() { return cElifKeyword_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//PPExpression
		public RuleCall getPPExpressionParserRuleCall_2() { return cPPExpressionParserRuleCall_2; }

		////ConditionalSection?
		// PPNewLine
		public RuleCall getPPNewLineParserRuleCall_3() { return cPPNewLineParserRuleCall_3; }
	}

	public class PPIfSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPIfSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPPExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPNewLineParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPIfSection:
		//	"if" PPExpression //ConditionalSection?
		// PPNewLine;
		public ParserRule getRule() { return rule; }

		//"if" PPExpression //ConditionalSection?
		// PPNewLine
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//PPExpression
		public RuleCall getPPExpressionParserRuleCall_1() { return cPPExpressionParserRuleCall_1; }

		////ConditionalSection?
		// PPNewLine
		public RuleCall getPPNewLineParserRuleCall_2() { return cPPNewLineParserRuleCall_2; }
	}

	public class PPExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPOrExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPExpression:
		//	WS PPOrExpression;
		public ParserRule getRule() { return rule; }

		//WS PPOrExpression
		public Group getGroup() { return cGroup; }

		//WS
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//PPOrExpression
		public RuleCall getPPOrExpressionParserRuleCall_1() { return cPPOrExpressionParserRuleCall_1; }
	}

	public class PPOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPOrExpression2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPOrExpression:
		//	PPAndExpression PPOrExpression2;
		public ParserRule getRule() { return rule; }

		//PPAndExpression PPOrExpression2
		public Group getGroup() { return cGroup; }

		//PPAndExpression
		public RuleCall getPPAndExpressionParserRuleCall_0() { return cPPAndExpressionParserRuleCall_0; }

		//PPOrExpression2
		public RuleCall getPPOrExpression2ParserRuleCall_1() { return cPPOrExpression2ParserRuleCall_1; }
	}

	public class PPOrExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPOrExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPPAndExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPOrExpression2ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPOrExpression2:
		//	("||" PPAndExpression PPOrExpression2)*;
		public ParserRule getRule() { return rule; }

		//(=> "||" PPAndExpression PPOrExpression2)*
		public Group getGroup() { return cGroup; }

		//=> "||"
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }

		//PPAndExpression
		public RuleCall getPPAndExpressionParserRuleCall_1() { return cPPAndExpressionParserRuleCall_1; }

		//PPOrExpression2
		public RuleCall getPPOrExpression2ParserRuleCall_2() { return cPPOrExpression2ParserRuleCall_2; }
	}

	public class PPAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPAndExpression2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPAndExpression:
		//	PPEqualityExpression PPAndExpression2;
		public ParserRule getRule() { return rule; }

		//PPEqualityExpression PPAndExpression2
		public Group getGroup() { return cGroup; }

		//PPEqualityExpression
		public RuleCall getPPEqualityExpressionParserRuleCall_0() { return cPPEqualityExpressionParserRuleCall_0; }

		//PPAndExpression2
		public RuleCall getPPAndExpression2ParserRuleCall_1() { return cPPAndExpression2ParserRuleCall_1; }
	}

	public class PPAndExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPAndExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPPEqualityExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPAndExpression2ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPAndExpression2:
		//	("&&" PPEqualityExpression PPAndExpression2)*;
		public ParserRule getRule() { return rule; }

		//(=> "&&" PPEqualityExpression PPAndExpression2)*
		public Group getGroup() { return cGroup; }

		//=> "&&"
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }

		//PPEqualityExpression
		public RuleCall getPPEqualityExpressionParserRuleCall_1() { return cPPEqualityExpressionParserRuleCall_1; }

		//PPAndExpression2
		public RuleCall getPPAndExpression2ParserRuleCall_2() { return cPPAndExpression2ParserRuleCall_2; }
	}

	public class PPEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPEqualityExpression2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPEqualityExpression:
		//	PPUnaryExpression PPEqualityExpression2*;
		public ParserRule getRule() { return rule; }

		//PPUnaryExpression PPEqualityExpression2*
		public Group getGroup() { return cGroup; }

		//PPUnaryExpression
		public RuleCall getPPUnaryExpressionParserRuleCall_0() { return cPPUnaryExpressionParserRuleCall_0; }

		//PPEqualityExpression2*
		public RuleCall getPPEqualityExpression2ParserRuleCall_1() { return cPPEqualityExpression2ParserRuleCall_1; }
	}

	public class PPEqualityExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPEqualityExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cPPUnaryExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPEqualityExpression2ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPEqualityExpression2:
		//	("==" | "!=") PPUnaryExpression PPEqualityExpression2;
		public ParserRule getRule() { return rule; }

		//("==" | "!=") PPUnaryExpression PPEqualityExpression2
		public Group getGroup() { return cGroup; }

		//"==" | "!="
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_0() { return cEqualsSignEqualsSignKeyword_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_0_1() { return cExclamationMarkEqualsSignKeyword_0_1; }

		//PPUnaryExpression
		public RuleCall getPPUnaryExpressionParserRuleCall_1() { return cPPUnaryExpressionParserRuleCall_1; }

		//PPEqualityExpression2
		public RuleCall getPPEqualityExpression2ParserRuleCall_2() { return cPPEqualityExpression2ParserRuleCall_2; }
	}

	public class PPUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPPPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPPUnaryExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PPUnaryExpression:
		//	PPPrimaryExpression | "!" PPUnaryExpression;
		public ParserRule getRule() { return rule; }

		//PPPrimaryExpression | "!" PPUnaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PPPrimaryExpression
		public RuleCall getPPPrimaryExpressionParserRuleCall_0() { return cPPPrimaryExpressionParserRuleCall_0; }

		//"!" PPUnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }

		//PPUnaryExpression
		public RuleCall getPPUnaryExpressionParserRuleCall_1_1() { return cPPUnaryExpressionParserRuleCall_1_1; }
	}

	public class PPPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalSymbolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cPPExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PPPrimaryExpression:
		//	"true" | "false" | ConditionalSymbol | "(" PPExpression ")";
		public ParserRule getRule() { return rule; }

		//"true" | "false" | ConditionalSymbol | "(" PPExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }

		//ConditionalSymbol
		public RuleCall getConditionalSymbolParserRuleCall_2() { return cConditionalSymbolParserRuleCall_2; }

		//"(" PPExpression ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//PPExpression
		public RuleCall getPPExpressionParserRuleCall_3_1() { return cPPExpressionParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class PPDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cDefineKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cUndefKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cConditionalSymbolParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cPPNewLineParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		/// *
		//ConditionalSection:
		//	InputSectionPart+
		//    |SkippedSectionPart+
		//;
		//
		/// *
		//SkippedSectionPart:
		//	SkippedCharacters? NEW_LINE
		//    |PPDirective
		//;
		//
		//SkippedCharacters:
		//	 WS? NotNumberSign InputCharacter*
		//;
		//
		//InputCharacter:
		//	('\n'|'\r')* ('\r'? '\n')?// ERRADO??
		//;
		//
		//NotNumberSign:
		//	STRING // ERRADO?
		//;
		// * / PPDeclaration:
		//	WS? "#" WS? ("define" | "undef") WS ConditionalSymbol PPNewLine;
		public ParserRule getRule() { return rule; }

		//WS? "#" WS? ("define" | "undef") WS ConditionalSymbol PPNewLine
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//"define" | "undef"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"define"
		public Keyword getDefineKeyword_3_0() { return cDefineKeyword_3_0; }

		//"undef"
		public Keyword getUndefKeyword_3_1() { return cUndefKeyword_3_1; }

		//WS
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//ConditionalSymbol
		public RuleCall getConditionalSymbolParserRuleCall_5() { return cConditionalSymbolParserRuleCall_5; }

		//PPNewLine
		public RuleCall getPPNewLineParserRuleCall_6() { return cPPNewLineParserRuleCall_6; }
	}

	public class PPNewLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPNewLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNEW_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPNewLine:
		//	WS? SL_COMMENT? NEW_LINE;
		public ParserRule getRule() { return rule; }

		//WS? SL_COMMENT? NEW_LINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }

		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_2() { return cNEW_LINETerminalRuleCall_2; }
	}

	public class ConditionalSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalSymbol");
		private final RuleCall cIdentifierOrKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConditionalSymbol:
		//	IdentifierOrKeyword;
		public ParserRule getRule() { return rule; }

		//IdentifierOrKeyword
		public RuleCall getIdentifierOrKeywordParserRuleCall() { return cIdentifierOrKeywordParserRuleCall; }
	}

	public class InputElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTokenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InputElement:
		//	WS | Comment | Token;
		public ParserRule getRule() { return rule; }

		//WS | Comment | Token
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }

		//Token
		public RuleCall getTokenParserRuleCall_2() { return cTokenParserRuleCall_2; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCharacterLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOPERATOR_OR_PUNCTUATORTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Token:
		//	ID | Keywords | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | OPERATOR_OR_PUNCTUATOR;
		public ParserRule getRule() { return rule; }

		//ID | Keywords | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | OPERATOR_OR_PUNCTUATOR
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Keywords
		public RuleCall getKeywordsParserRuleCall_1() { return cKeywordsParserRuleCall_1; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_2() { return cIntegerLiteralParserRuleCall_2; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_3() { return cRealLiteralParserRuleCall_3; }

		//CharacterLiteral
		public RuleCall getCharacterLiteralParserRuleCall_4() { return cCharacterLiteralParserRuleCall_4; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_5() { return cStringLiteralParserRuleCall_5; }

		//OPERATOR_OR_PUNCTUATOR
		public RuleCall getOPERATOR_OR_PUNCTUATORTerminalRuleCall_6() { return cOPERATOR_OR_PUNCTUATORTerminalRuleCall_6; }
	}

	public class KeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBaseKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBreakKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cByteKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCaseKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCatchKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCharKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCheckedKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cClassKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cConstKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cContinueKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDecimalKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cDefaultKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cDelegateKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cDoKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cDoubleKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cElseKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cEnumKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cEventKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cExplicitKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cExternKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cFalseKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cFinallyKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cFixedKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cFloatKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cForKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cForeachKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cGotoKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cIfKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cImplicitKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cInKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cIntKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cInterfaceKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cInternalKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cIsKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cLockKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cLongKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cNamespaceKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cNewKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cNullKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cObjectKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cOperatorKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cOutKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cOverrideKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cParamsKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cPrivateKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cProtectedKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cPublicKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cReadonlyKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cRefKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cReturnKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cSbyteKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cSealedKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cShortKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cSizeofKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cStackallocKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cStaticKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cStringKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cStructKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cSwitchKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cThisKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cThrowKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cTrueKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cTryKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cTypeofKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cUintKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		private final Keyword cUlongKeyword_68 = (Keyword)cAlternatives.eContents().get(68);
		private final Keyword cUncheckedKeyword_69 = (Keyword)cAlternatives.eContents().get(69);
		private final Keyword cUnsafeKeyword_70 = (Keyword)cAlternatives.eContents().get(70);
		private final Keyword cUshortKeyword_71 = (Keyword)cAlternatives.eContents().get(71);
		private final Keyword cUsingKeyword_72 = (Keyword)cAlternatives.eContents().get(72);
		private final Keyword cVirtualKeyword_73 = (Keyword)cAlternatives.eContents().get(73);
		private final Keyword cVoidKeyword_74 = (Keyword)cAlternatives.eContents().get(74);
		private final Keyword cVolatileKeyword_75 = (Keyword)cAlternatives.eContents().get(75);
		private final Keyword cWhileKeyword_76 = (Keyword)cAlternatives.eContents().get(76);
		
		//Keywords:
		//	"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
		//	"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
		//	| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
		//	"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
		//	"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
		//	"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
		//	"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" |
		//	"while";
		public ParserRule getRule() { return rule; }

		//"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
		//"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
		//| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
		//"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
		//"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
		//"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
		//"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//"base"
		public Keyword getBaseKeyword_2() { return cBaseKeyword_2; }

		//"bool"
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }

		//"break"
		public Keyword getBreakKeyword_4() { return cBreakKeyword_4; }

		//"byte"
		public Keyword getByteKeyword_5() { return cByteKeyword_5; }

		//"case"
		public Keyword getCaseKeyword_6() { return cCaseKeyword_6; }

		//"catch"
		public Keyword getCatchKeyword_7() { return cCatchKeyword_7; }

		//"char"
		public Keyword getCharKeyword_8() { return cCharKeyword_8; }

		//"checked"
		public Keyword getCheckedKeyword_9() { return cCheckedKeyword_9; }

		//"class"
		public Keyword getClassKeyword_10() { return cClassKeyword_10; }

		//"const"
		public Keyword getConstKeyword_11() { return cConstKeyword_11; }

		//"continue"
		public Keyword getContinueKeyword_12() { return cContinueKeyword_12; }

		//"decimal"
		public Keyword getDecimalKeyword_13() { return cDecimalKeyword_13; }

		//"default"
		public Keyword getDefaultKeyword_14() { return cDefaultKeyword_14; }

		//"delegate"
		public Keyword getDelegateKeyword_15() { return cDelegateKeyword_15; }

		//"do"
		public Keyword getDoKeyword_16() { return cDoKeyword_16; }

		//"double"
		public Keyword getDoubleKeyword_17() { return cDoubleKeyword_17; }

		//"else"
		public Keyword getElseKeyword_18() { return cElseKeyword_18; }

		//"enum"
		public Keyword getEnumKeyword_19() { return cEnumKeyword_19; }

		//"event"
		public Keyword getEventKeyword_20() { return cEventKeyword_20; }

		//"explicit"
		public Keyword getExplicitKeyword_21() { return cExplicitKeyword_21; }

		//"extern"
		public Keyword getExternKeyword_22() { return cExternKeyword_22; }

		//"false"
		public Keyword getFalseKeyword_23() { return cFalseKeyword_23; }

		//"finally"
		public Keyword getFinallyKeyword_24() { return cFinallyKeyword_24; }

		//"fixed"
		public Keyword getFixedKeyword_25() { return cFixedKeyword_25; }

		//"float"
		public Keyword getFloatKeyword_26() { return cFloatKeyword_26; }

		//"for"
		public Keyword getForKeyword_27() { return cForKeyword_27; }

		//"foreach"
		public Keyword getForeachKeyword_28() { return cForeachKeyword_28; }

		//"goto"
		public Keyword getGotoKeyword_29() { return cGotoKeyword_29; }

		//"if"
		public Keyword getIfKeyword_30() { return cIfKeyword_30; }

		//"implicit"
		public Keyword getImplicitKeyword_31() { return cImplicitKeyword_31; }

		//"in"
		public Keyword getInKeyword_32() { return cInKeyword_32; }

		//"int"
		public Keyword getIntKeyword_33() { return cIntKeyword_33; }

		//"interface"
		public Keyword getInterfaceKeyword_34() { return cInterfaceKeyword_34; }

		//"internal"
		public Keyword getInternalKeyword_35() { return cInternalKeyword_35; }

		//"is"
		public Keyword getIsKeyword_36() { return cIsKeyword_36; }

		//"lock"
		public Keyword getLockKeyword_37() { return cLockKeyword_37; }

		//"long"
		public Keyword getLongKeyword_38() { return cLongKeyword_38; }

		//"namespace"
		public Keyword getNamespaceKeyword_39() { return cNamespaceKeyword_39; }

		//"new"
		public Keyword getNewKeyword_40() { return cNewKeyword_40; }

		//"null"
		public Keyword getNullKeyword_41() { return cNullKeyword_41; }

		//"object"
		public Keyword getObjectKeyword_42() { return cObjectKeyword_42; }

		//"operator"
		public Keyword getOperatorKeyword_43() { return cOperatorKeyword_43; }

		//"out"
		public Keyword getOutKeyword_44() { return cOutKeyword_44; }

		//"override"
		public Keyword getOverrideKeyword_45() { return cOverrideKeyword_45; }

		//"params"
		public Keyword getParamsKeyword_46() { return cParamsKeyword_46; }

		//"private"
		public Keyword getPrivateKeyword_47() { return cPrivateKeyword_47; }

		//"protected"
		public Keyword getProtectedKeyword_48() { return cProtectedKeyword_48; }

		//"public"
		public Keyword getPublicKeyword_49() { return cPublicKeyword_49; }

		//"readonly"
		public Keyword getReadonlyKeyword_50() { return cReadonlyKeyword_50; }

		//"ref"
		public Keyword getRefKeyword_51() { return cRefKeyword_51; }

		//"return"
		public Keyword getReturnKeyword_52() { return cReturnKeyword_52; }

		//"sbyte"
		public Keyword getSbyteKeyword_53() { return cSbyteKeyword_53; }

		//"sealed"
		public Keyword getSealedKeyword_54() { return cSealedKeyword_54; }

		//"short"
		public Keyword getShortKeyword_55() { return cShortKeyword_55; }

		//"sizeof"
		public Keyword getSizeofKeyword_56() { return cSizeofKeyword_56; }

		//"stackalloc"
		public Keyword getStackallocKeyword_57() { return cStackallocKeyword_57; }

		//"static"
		public Keyword getStaticKeyword_58() { return cStaticKeyword_58; }

		//"string"
		public Keyword getStringKeyword_59() { return cStringKeyword_59; }

		//"struct"
		public Keyword getStructKeyword_60() { return cStructKeyword_60; }

		//"switch"
		public Keyword getSwitchKeyword_61() { return cSwitchKeyword_61; }

		//"this"
		public Keyword getThisKeyword_62() { return cThisKeyword_62; }

		//"throw"
		public Keyword getThrowKeyword_63() { return cThrowKeyword_63; }

		//"true"
		public Keyword getTrueKeyword_64() { return cTrueKeyword_64; }

		//"try"
		public Keyword getTryKeyword_65() { return cTryKeyword_65; }

		//"typeof"
		public Keyword getTypeofKeyword_66() { return cTypeofKeyword_66; }

		//"uint"
		public Keyword getUintKeyword_67() { return cUintKeyword_67; }

		//"ulong"
		public Keyword getUlongKeyword_68() { return cUlongKeyword_68; }

		//"unchecked"
		public Keyword getUncheckedKeyword_69() { return cUncheckedKeyword_69; }

		//"unsafe"
		public Keyword getUnsafeKeyword_70() { return cUnsafeKeyword_70; }

		//"ushort"
		public Keyword getUshortKeyword_71() { return cUshortKeyword_71; }

		//"using"
		public Keyword getUsingKeyword_72() { return cUsingKeyword_72; }

		//"virtual"
		public Keyword getVirtualKeyword_73() { return cVirtualKeyword_73; }

		//"void"
		public Keyword getVoidKeyword_74() { return cVoidKeyword_74; }

		//"volatile"
		public Keyword getVolatileKeyword_75() { return cVolatileKeyword_75; }

		//"while"
		public Keyword getWhileKeyword_76() { return cWhileKeyword_76; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IntegerLiteral:
		//	("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?;
		public ParserRule getRule() { return rule; }

		//("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?
		public Alternatives getAlternatives() { return cAlternatives; }

		//("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX
		public Group getGroup_0() { return cGroup_0; }

		//"0x" | "0X"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"0x"
		public Keyword getXKeyword_0_0_0() { return cXKeyword_0_0_0; }

		//"0X"
		public Keyword getXKeyword_0_0_1() { return cXKeyword_0_0_1; }

		//HEX_DIGIT+
		public RuleCall getHEX_DIGITTerminalRuleCall_0_1() { return cHEX_DIGITTerminalRuleCall_0_1; }

		//INTEGER_TYPE_SUFFIX
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2; }

		//INT INTEGER_TYPE_SUFFIX?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//INTEGER_TYPE_SUFFIX?
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExponentPartParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExponentPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//RealLiteral:
		//	INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX;
		public ParserRule getRule() { return rule; }

		//INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT "." INT ExponentPart? REAL_TYPE_SUFFIX?
		public Group getGroup_0() { return cGroup_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }

		//ExponentPart?
		public RuleCall getExponentPartParserRuleCall_0_3() { return cExponentPartParserRuleCall_0_3; }

		//REAL_TYPE_SUFFIX?
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_0_4() { return cREAL_TYPE_SUFFIXTerminalRuleCall_0_4; }

		//INT ExponentPart REAL_TYPE_SUFFIX?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//ExponentPart
		public RuleCall getExponentPartParserRuleCall_1_1() { return cExponentPartParserRuleCall_1_1; }

		//REAL_TYPE_SUFFIX?
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_1_2() { return cREAL_TYPE_SUFFIXTerminalRuleCall_1_2; }

		//INT REAL_TYPE_SUFFIX
		public Group getGroup_2() { return cGroup_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//REAL_TYPE_SUFFIX
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_2_1() { return cREAL_TYPE_SUFFIXTerminalRuleCall_2_1; }
	}

	public class ExponentPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExponentPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSIGNTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSIGNTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ExponentPart:
		//	"e" SIGN? INT | "E" SIGN? INT;
		public ParserRule getRule() { return rule; }

		//"e" SIGN? INT | "E" SIGN? INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"e" SIGN? INT
		public Group getGroup_0() { return cGroup_0; }

		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }

		//SIGN?
		public RuleCall getSIGNTerminalRuleCall_0_1() { return cSIGNTerminalRuleCall_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }

		//"E" SIGN? INT
		public Group getGroup_1() { return cGroup_1; }

		//"E"
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }

		//SIGN?
		public RuleCall getSIGNTerminalRuleCall_1_1() { return cSIGNTerminalRuleCall_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}

	public class CharacterLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharacterLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCharacterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CharacterLiteral:
		//	"\'" Character "\'";
		public ParserRule getRule() { return rule; }

		//"\'" Character "\'"
		public Group getGroup() { return cGroup; }

		//"\'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }

		//Character
		public RuleCall getCharacterParserRuleCall_1() { return cCharacterParserRuleCall_1; }

		//"\'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}

	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Character");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEscapeSequenceParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Character:
		//	SINGLE_CHARACTER | "\\" EscapeSequence;
		public ParserRule getRule() { return rule; }

		//SINGLE_CHARACTER | "\\" EscapeSequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//"\\" EscapeSequence
		public Group getGroup_1() { return cGroup_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_0() { return cReverseSolidusKeyword_1_0; }

		//EscapeSequence
		public RuleCall getEscapeSequenceParserRuleCall_1_1() { return cEscapeSequenceParserRuleCall_1_1; }
	}

	public class EscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapeSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cESCAPE_SEQUENCETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHexadecimalEscapeSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnicodeCharacterEscapeSequenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EscapeSequence:
		//	ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence;
		public ParserRule getRule() { return rule; }

		//ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//ESCAPE_SEQUENCE
		public RuleCall getESCAPE_SEQUENCETerminalRuleCall_0() { return cESCAPE_SEQUENCETerminalRuleCall_0; }

		//HexadecimalEscapeSequence
		public RuleCall getHexadecimalEscapeSequenceParserRuleCall_1() { return cHexadecimalEscapeSequenceParserRuleCall_1; }

		//UnicodeCharacterEscapeSequence
		public RuleCall getUnicodeCharacterEscapeSequenceParserRuleCall_2() { return cUnicodeCharacterEscapeSequenceParserRuleCall_2; }
	}

	public class UnicodeCharacterEscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnicodeCharacterEscapeSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_7 = (RuleCall)cGroup_1.eContents().get(7);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_8 = (RuleCall)cGroup_1.eContents().get(8);
		
		//UnicodeCharacterEscapeSequence:
		//	"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		//	HEX_DIGIT HEX_DIGIT;
		public ParserRule getRule() { return rule; }

		//"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		//HEX_DIGIT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup_0() { return cGroup_0; }

		//"u"
		public Keyword getUKeyword_0_0() { return cUKeyword_0_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_1() { return cHEX_DIGITTerminalRuleCall_0_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_2() { return cHEX_DIGITTerminalRuleCall_0_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_3() { return cHEX_DIGITTerminalRuleCall_0_3; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_4() { return cHEX_DIGITTerminalRuleCall_0_4; }

		//"U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup_1() { return cGroup_1; }

		//"U"
		public Keyword getUKeyword_1_0() { return cUKeyword_1_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_1() { return cHEX_DIGITTerminalRuleCall_1_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_2() { return cHEX_DIGITTerminalRuleCall_1_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_3() { return cHEX_DIGITTerminalRuleCall_1_3; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_4() { return cHEX_DIGITTerminalRuleCall_1_4; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_5() { return cHEX_DIGITTerminalRuleCall_1_5; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_6() { return cHEX_DIGITTerminalRuleCall_1_6; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_7() { return cHEX_DIGITTerminalRuleCall_1_7; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_8() { return cHEX_DIGITTerminalRuleCall_1_8; }
	}

	public class HexadecimalEscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexadecimalEscapeSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//HexadecimalEscapeSequence:
		//	"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?;
		public ParserRule getRule() { return rule; }

		//"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
		public Group getGroup() { return cGroup; }

		//"x"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1() { return cHEX_DIGITTerminalRuleCall_1; }

		//(HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
		public Group getGroup_2() { return cGroup_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2_0() { return cHEX_DIGITTerminalRuleCall_2_0; }

		//(HEX_DIGIT HEX_DIGIT?)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2_1_0() { return cHEX_DIGITTerminalRuleCall_2_1_0; }

		//HEX_DIGIT?
		public RuleCall getHEX_DIGITTerminalRuleCall_2_1_1() { return cHEX_DIGITTerminalRuleCall_2_1_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRegularStringCharacterParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVerbatimStringCharacterParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//StringLiteral:
		//	"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\"";
		public ParserRule getRule() { return rule; }

		//"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\""
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\"" RegularStringCharacter* "\""
		public Group getGroup_0() { return cGroup_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_0_0() { return cQuotationMarkKeyword_0_0; }

		//RegularStringCharacter*
		public RuleCall getRegularStringCharacterParserRuleCall_0_1() { return cRegularStringCharacterParserRuleCall_0_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_0_2() { return cQuotationMarkKeyword_0_2; }

		//"@" VerbatimStringCharacter* "\""
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//VerbatimStringCharacter*
		public RuleCall getVerbatimStringCharacterParserRuleCall_1_1() { return cVerbatimStringCharacterParserRuleCall_1_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_1_2() { return cQuotationMarkKeyword_1_2; }
	}

	public class VerbatimStringCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerbatimStringCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VerbatimStringCharacter: //Any character except "
		//	SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE;
		public ParserRule getRule() { return rule; }

		////Any character except "
		//SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		////Any character except "
		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//QUOTE_ESCAPE_SEQUENCE
		public RuleCall getQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1() { return cQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1; }
	}

	public class RegularStringCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularStringCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cESCAPE_SEQUENCETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//RegularStringCharacter: //Any character except " (U+0022), \ (U+005C), and new-line-character
		//	SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE;
		public ParserRule getRule() { return rule; }

		////Any character except " (U+0022), \ (U+005C), and new-line-character
		//SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		////Any character except " (U+0022), \ (U+005C), and new-line-character
		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//"\\" ESCAPE_SEQUENCE
		public Group getGroup_1() { return cGroup_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_0() { return cReverseSolidusKeyword_1_0; }

		//ESCAPE_SEQUENCE
		public RuleCall getESCAPE_SEQUENCETerminalRuleCall_1_1() { return cESCAPE_SEQUENCETerminalRuleCall_1_1; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cML_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Comment:
		//	SL_COMMENT | ML_COMMENT;
		public ParserRule getRule() { return rule; }

		//SL_COMMENT | ML_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_0() { return cSL_COMMENTTerminalRuleCall_0; }

		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_1() { return cML_COMMENTTerminalRuleCall_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAvailableIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Identifier:
		//	AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER;
		public ParserRule getRule() { return rule; }

		//AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER
		public Alternatives getAlternatives() { return cAlternatives; }

		//AvailableIdentifier
		public RuleCall getAvailableIdentifierParserRuleCall_0() { return cAvailableIdentifierParserRuleCall_0; }

		//"@" IDENTIFIER_START_CHARACTER
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//IDENTIFIER_START_CHARACTER
		public RuleCall getIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1() { return cIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1; }
	}

	public class AvailableIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AvailableIdentifier");
		private final RuleCall cIdentifierOrKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AvailableIdentifier:
		//	IdentifierOrKeyword;
		public ParserRule getRule() { return rule; }

		//IdentifierOrKeyword
		public RuleCall getIdentifierOrKeywordParserRuleCall() { return cIdentifierOrKeywordParserRuleCall; }
	}

	public class IdentifierOrKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierOrKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIER_START_CHARACTERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierPartCharacterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IdentifierOrKeyword:
		//	IDENTIFIER_START_CHARACTER IdentifierPartCharacter*;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER_START_CHARACTER IdentifierPartCharacter*
		public Group getGroup() { return cGroup; }

		//IDENTIFIER_START_CHARACTER
		public RuleCall getIDENTIFIER_START_CHARACTERTerminalRuleCall_0() { return cIDENTIFIER_START_CHARACTERTerminalRuleCall_0; }

		//IdentifierPartCharacter*
		public RuleCall getIdentifierPartCharacterParserRuleCall_1() { return cIdentifierPartCharacterParserRuleCall_1; }
	}

	public class IdentifierPartCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierPartCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IdentifierPartCharacter:
		//	LETTER | / *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT;
		public ParserRule getRule() { return rule; }

		//LETTER | / *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }

		/// *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonArrayTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRANK_SPECIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////FIM LEXICA 
		////SINTAXE
		//Type:
		//	NonArrayType RANK_SPECIFIER*;
		public ParserRule getRule() { return rule; }

		//NonArrayType RANK_SPECIFIER*
		public Group getGroup() { return cGroup; }

		//NonArrayType
		public RuleCall getNonArrayTypeParserRuleCall_0() { return cNonArrayTypeParserRuleCall_0; }

		//RANK_SPECIFIER*
		public RuleCall getRANK_SPECIFIERTerminalRuleCall_1() { return cRANK_SPECIFIERTerminalRuleCall_1; }
	}

	public class IntegralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSbyteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cShortKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUshortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUintKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUlongKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCharKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//IntegralType:
		//	"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char";
		public ParserRule getRule() { return rule; }

		//"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"sbyte"
		public Keyword getSbyteKeyword_0() { return cSbyteKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"short"
		public Keyword getShortKeyword_2() { return cShortKeyword_2; }

		//"ushort"
		public Keyword getUshortKeyword_3() { return cUshortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"uint"
		public Keyword getUintKeyword_5() { return cUintKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"ulong"
		public Keyword getUlongKeyword_7() { return cUlongKeyword_7; }

		//"char"
		public Keyword getCharKeyword_8() { return cCharKeyword_8; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonArrayTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRANK_SPECIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ArrayType:
		//	NonArrayType RANK_SPECIFIER+;
		public ParserRule getRule() { return rule; }

		//NonArrayType RANK_SPECIFIER+
		public Group getGroup() { return cGroup; }

		//NonArrayType
		public RuleCall getNonArrayTypeParserRuleCall_0() { return cNonArrayTypeParserRuleCall_0; }

		//RANK_SPECIFIER+
		public RuleCall getRANK_SPECIFIERTerminalRuleCall_1() { return cRANK_SPECIFIERTerminalRuleCall_1; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEnumModifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEnumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIntegralTypeParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cEnumBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumType:
		//	Attributes EnumModifier* "enum" ID (":" IntegralType)? EnumBody ";"?;
		public ParserRule getRule() { return rule; }

		//Attributes EnumModifier* "enum" ID (":" IntegralType)? EnumBody ";"?
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//EnumModifier*
		public RuleCall getEnumModifierParserRuleCall_1() { return cEnumModifierParserRuleCall_1; }

		//"enum"
		public Keyword getEnumKeyword_2() { return cEnumKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//(":" IntegralType)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_4_1() { return cIntegralTypeParserRuleCall_4_1; }

		//EnumBody
		public RuleCall getEnumBodyParserRuleCall_5() { return cEnumBodyParserRuleCall_5; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class NonArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonArrayType");
		private final RuleCall cBuiltInTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NonArrayType: //QualifiedIdentifier|
		//	BuiltInType;
		public ParserRule getRule() { return rule; }

		////QualifiedIdentifier|
		//BuiltInType
		public RuleCall getBuiltInTypeParserRuleCall() { return cBuiltInTypeParserRuleCall; }
	}

	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIdentifier");
		private final Action cIDAction = (Action)rule.eContents().get(1);
		
		//QualifiedIdentifier:
		//	{ID};
		public ParserRule getRule() { return rule; }

		//{ID}
		public Action getIDAction() { return cIDAction; }
	}

	public class BuiltInTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegralTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltInClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDecimalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BuiltInType:
		//	IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double";
		public ParserRule getRule() { return rule; }

		//IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_0() { return cIntegralTypeParserRuleCall_0; }

		//BuiltInClassType
		public RuleCall getBuiltInClassTypeParserRuleCall_1() { return cBuiltInClassTypeParserRuleCall_1; }

		//"bool"
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }

		//"decimal"
		public Keyword getDecimalKeyword_3() { return cDecimalKeyword_3; }

		//"float"
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }

		//"double"
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }
	}

	public class BuiltInClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInClassType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BuiltInClassType:
		//	"object" | "string";
		public ParserRule getRule() { return rule; }

		//"object" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class EnumBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////|'{' {EnumMemberDeclaration ','}+ ','? '}'
		//EnumBody:
		//	"{" "}";
		public ParserRule getRule() { return rule; }

		//"{" "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1() { return cRightCurlyBracketKeyword_1; }
	}

	public class EnumModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//EnumModifier:
		//	"new" | "public" | "protected" | "internal" | "private";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attributes");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//Attributes:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}
	
	
	private ModelElements pModel;
	private InputElements pInput;
	private InputSectionPartElements pInputSectionPart;
	private PPDirectiveElements pPPDirective;
	private PPConditionalElements pPPConditional;
	private PPEndifElements pPPEndif;
	private PPElseSectionElements pPPElseSection;
	private PPElifSectionsElements pPPElifSections;
	private PPElifSections2Elements pPPElifSections2;
	private PPElifSectionElements pPPElifSection;
	private PPIfSectionElements pPPIfSection;
	private PPExpressionElements pPPExpression;
	private PPOrExpressionElements pPPOrExpression;
	private PPOrExpression2Elements pPPOrExpression2;
	private PPAndExpressionElements pPPAndExpression;
	private PPAndExpression2Elements pPPAndExpression2;
	private PPEqualityExpressionElements pPPEqualityExpression;
	private PPEqualityExpression2Elements pPPEqualityExpression2;
	private PPUnaryExpressionElements pPPUnaryExpression;
	private PPPrimaryExpressionElements pPPPrimaryExpression;
	private PPDeclarationElements pPPDeclaration;
	private PPNewLineElements pPPNewLine;
	private ConditionalSymbolElements pConditionalSymbol;
	private InputElementElements pInputElement;
	private TokenElements pToken;
	private KeywordsElements pKeywords;
	private IntegerLiteralElements pIntegerLiteral;
	private RealLiteralElements pRealLiteral;
	private ExponentPartElements pExponentPart;
	private CharacterLiteralElements pCharacterLiteral;
	private CharacterElements pCharacter;
	private EscapeSequenceElements pEscapeSequence;
	private UnicodeCharacterEscapeSequenceElements pUnicodeCharacterEscapeSequence;
	private HexadecimalEscapeSequenceElements pHexadecimalEscapeSequence;
	private StringLiteralElements pStringLiteral;
	private VerbatimStringCharacterElements pVerbatimStringCharacter;
	private RegularStringCharacterElements pRegularStringCharacter;
	private CommentElements pComment;
	private IdentifierElements pIdentifier;
	private AvailableIdentifierElements pAvailableIdentifier;
	private IdentifierOrKeywordElements pIdentifierOrKeyword;
	private IdentifierPartCharacterElements pIdentifierPartCharacter;
	private TypeElements pType;
	private IntegralTypeElements pIntegralType;
	private ArrayTypeElements pArrayType;
	private EnumTypeElements pEnumType;
	private NonArrayTypeElements pNonArrayType;
	private QualifiedIdentifierElements pQualifiedIdentifier;
	private BuiltInTypeElements pBuiltInType;
	private BuiltInClassTypeElements pBuiltInClassType;
	private EnumBodyElements pEnumBody;
	private EnumModifierElements pEnumModifier;
	private AttributesElements pAttributes;
	private TerminalRule tREAL_TYPE_SUFFIX;
	private TerminalRule tLETTER;
	private TerminalRule tIDENTIFIER_START_CHARACTER;
	private TerminalRule tQUOTE_ESCAPE_SEQUENCE;
	private TerminalRule tESCAPE_SEQUENCE;
	private TerminalRule tNEW_LINE;
	private TerminalRule tRANK_SPECIFIER;
	private TerminalRule tINTEGER_TYPE_SUFFIX;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tSIGN;
	private TerminalRule tOPERATOR_OR_PUNCTUATOR;
	private TerminalRule tSINGLE_CHARACTER;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public CSharpGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.myModel.CSharp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	inputs?=Input;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Input:
	//	InputSectionPart;
	public InputElements getInputAccess() {
		return (pInput != null) ? pInput : (pInput = new InputElements());
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	////LEXICA
	//InputSectionPart:
	//	InputElement* NEW_LINE | PPDirective;
	public InputSectionPartElements getInputSectionPartAccess() {
		return (pInputSectionPart != null) ? pInputSectionPart : (pInputSectionPart = new InputSectionPartElements());
	}
	
	public ParserRule getInputSectionPartRule() {
		return getInputSectionPartAccess().getRule();
	}

	//PPDirective:
	//	PPDeclaration | / *
	// |PPLine
	// |PPDiagnostic
	// |PPRegion * / PPConditional;
	public PPDirectiveElements getPPDirectiveAccess() {
		return (pPPDirective != null) ? pPPDirective : (pPPDirective = new PPDirectiveElements());
	}
	
	public ParserRule getPPDirectiveRule() {
		return getPPDirectiveAccess().getRule();
	}

	//PPConditional:
	//	WS* PPIfSection WS* PPElifSections? => PPElseSection? PPEndif;
	public PPConditionalElements getPPConditionalAccess() {
		return (pPPConditional != null) ? pPPConditional : (pPPConditional = new PPConditionalElements());
	}
	
	public ParserRule getPPConditionalRule() {
		return getPPConditionalAccess().getRule();
	}

	//PPEndif:
	//	"endif" PPNewLine;
	public PPEndifElements getPPEndifAccess() {
		return (pPPEndif != null) ? pPPEndif : (pPPEndif = new PPEndifElements());
	}
	
	public ParserRule getPPEndifRule() {
		return getPPEndifAccess().getRule();
	}

	//PPElseSection:
	//	"else" //ConditionalSection?
	// PPNewLine;
	public PPElseSectionElements getPPElseSectionAccess() {
		return (pPPElseSection != null) ? pPPElseSection : (pPPElseSection = new PPElseSectionElements());
	}
	
	public ParserRule getPPElseSectionRule() {
		return getPPElseSectionAccess().getRule();
	}

	//PPElifSections:
	//	PPElifSection PPElifSections2;
	public PPElifSectionsElements getPPElifSectionsAccess() {
		return (pPPElifSections != null) ? pPPElifSections : (pPPElifSections = new PPElifSectionsElements());
	}
	
	public ParserRule getPPElifSectionsRule() {
		return getPPElifSectionsAccess().getRule();
	}

	//PPElifSections2:
	//	(PPElifSection PPElifSections2)*;
	public PPElifSections2Elements getPPElifSections2Access() {
		return (pPPElifSections2 != null) ? pPPElifSections2 : (pPPElifSections2 = new PPElifSections2Elements());
	}
	
	public ParserRule getPPElifSections2Rule() {
		return getPPElifSections2Access().getRule();
	}

	//PPElifSection:
	//	"elif" WS PPExpression //ConditionalSection?
	// PPNewLine;
	public PPElifSectionElements getPPElifSectionAccess() {
		return (pPPElifSection != null) ? pPPElifSection : (pPPElifSection = new PPElifSectionElements());
	}
	
	public ParserRule getPPElifSectionRule() {
		return getPPElifSectionAccess().getRule();
	}

	//PPIfSection:
	//	"if" PPExpression //ConditionalSection?
	// PPNewLine;
	public PPIfSectionElements getPPIfSectionAccess() {
		return (pPPIfSection != null) ? pPPIfSection : (pPPIfSection = new PPIfSectionElements());
	}
	
	public ParserRule getPPIfSectionRule() {
		return getPPIfSectionAccess().getRule();
	}

	//PPExpression:
	//	WS PPOrExpression;
	public PPExpressionElements getPPExpressionAccess() {
		return (pPPExpression != null) ? pPPExpression : (pPPExpression = new PPExpressionElements());
	}
	
	public ParserRule getPPExpressionRule() {
		return getPPExpressionAccess().getRule();
	}

	//PPOrExpression:
	//	PPAndExpression PPOrExpression2;
	public PPOrExpressionElements getPPOrExpressionAccess() {
		return (pPPOrExpression != null) ? pPPOrExpression : (pPPOrExpression = new PPOrExpressionElements());
	}
	
	public ParserRule getPPOrExpressionRule() {
		return getPPOrExpressionAccess().getRule();
	}

	//PPOrExpression2:
	//	("||" PPAndExpression PPOrExpression2)*;
	public PPOrExpression2Elements getPPOrExpression2Access() {
		return (pPPOrExpression2 != null) ? pPPOrExpression2 : (pPPOrExpression2 = new PPOrExpression2Elements());
	}
	
	public ParserRule getPPOrExpression2Rule() {
		return getPPOrExpression2Access().getRule();
	}

	//PPAndExpression:
	//	PPEqualityExpression PPAndExpression2;
	public PPAndExpressionElements getPPAndExpressionAccess() {
		return (pPPAndExpression != null) ? pPPAndExpression : (pPPAndExpression = new PPAndExpressionElements());
	}
	
	public ParserRule getPPAndExpressionRule() {
		return getPPAndExpressionAccess().getRule();
	}

	//PPAndExpression2:
	//	("&&" PPEqualityExpression PPAndExpression2)*;
	public PPAndExpression2Elements getPPAndExpression2Access() {
		return (pPPAndExpression2 != null) ? pPPAndExpression2 : (pPPAndExpression2 = new PPAndExpression2Elements());
	}
	
	public ParserRule getPPAndExpression2Rule() {
		return getPPAndExpression2Access().getRule();
	}

	//PPEqualityExpression:
	//	PPUnaryExpression PPEqualityExpression2*;
	public PPEqualityExpressionElements getPPEqualityExpressionAccess() {
		return (pPPEqualityExpression != null) ? pPPEqualityExpression : (pPPEqualityExpression = new PPEqualityExpressionElements());
	}
	
	public ParserRule getPPEqualityExpressionRule() {
		return getPPEqualityExpressionAccess().getRule();
	}

	//PPEqualityExpression2:
	//	("==" | "!=") PPUnaryExpression PPEqualityExpression2;
	public PPEqualityExpression2Elements getPPEqualityExpression2Access() {
		return (pPPEqualityExpression2 != null) ? pPPEqualityExpression2 : (pPPEqualityExpression2 = new PPEqualityExpression2Elements());
	}
	
	public ParserRule getPPEqualityExpression2Rule() {
		return getPPEqualityExpression2Access().getRule();
	}

	//PPUnaryExpression:
	//	PPPrimaryExpression | "!" PPUnaryExpression;
	public PPUnaryExpressionElements getPPUnaryExpressionAccess() {
		return (pPPUnaryExpression != null) ? pPPUnaryExpression : (pPPUnaryExpression = new PPUnaryExpressionElements());
	}
	
	public ParserRule getPPUnaryExpressionRule() {
		return getPPUnaryExpressionAccess().getRule();
	}

	//PPPrimaryExpression:
	//	"true" | "false" | ConditionalSymbol | "(" PPExpression ")";
	public PPPrimaryExpressionElements getPPPrimaryExpressionAccess() {
		return (pPPPrimaryExpression != null) ? pPPPrimaryExpression : (pPPPrimaryExpression = new PPPrimaryExpressionElements());
	}
	
	public ParserRule getPPPrimaryExpressionRule() {
		return getPPPrimaryExpressionAccess().getRule();
	}

	/// *
	//ConditionalSection:
	//	InputSectionPart+
	//    |SkippedSectionPart+
	//;
	//
	/// *
	//SkippedSectionPart:
	//	SkippedCharacters? NEW_LINE
	//    |PPDirective
	//;
	//
	//SkippedCharacters:
	//	 WS? NotNumberSign InputCharacter*
	//;
	//
	//InputCharacter:
	//	('\n'|'\r')* ('\r'? '\n')?// ERRADO??
	//;
	//
	//NotNumberSign:
	//	STRING // ERRADO?
	//;
	// * / PPDeclaration:
	//	WS? "#" WS? ("define" | "undef") WS ConditionalSymbol PPNewLine;
	public PPDeclarationElements getPPDeclarationAccess() {
		return (pPPDeclaration != null) ? pPPDeclaration : (pPPDeclaration = new PPDeclarationElements());
	}
	
	public ParserRule getPPDeclarationRule() {
		return getPPDeclarationAccess().getRule();
	}

	//PPNewLine:
	//	WS? SL_COMMENT? NEW_LINE;
	public PPNewLineElements getPPNewLineAccess() {
		return (pPPNewLine != null) ? pPPNewLine : (pPPNewLine = new PPNewLineElements());
	}
	
	public ParserRule getPPNewLineRule() {
		return getPPNewLineAccess().getRule();
	}

	//ConditionalSymbol:
	//	IdentifierOrKeyword;
	public ConditionalSymbolElements getConditionalSymbolAccess() {
		return (pConditionalSymbol != null) ? pConditionalSymbol : (pConditionalSymbol = new ConditionalSymbolElements());
	}
	
	public ParserRule getConditionalSymbolRule() {
		return getConditionalSymbolAccess().getRule();
	}

	//InputElement:
	//	WS | Comment | Token;
	public InputElementElements getInputElementAccess() {
		return (pInputElement != null) ? pInputElement : (pInputElement = new InputElementElements());
	}
	
	public ParserRule getInputElementRule() {
		return getInputElementAccess().getRule();
	}

	//Token:
	//	ID | Keywords | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | OPERATOR_OR_PUNCTUATOR;
	public TokenElements getTokenAccess() {
		return (pToken != null) ? pToken : (pToken = new TokenElements());
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//Keywords:
	//	"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
	//	"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
	//	| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
	//	"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
	//	"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
	//	"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
	//	"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" |
	//	"while";
	public KeywordsElements getKeywordsAccess() {
		return (pKeywords != null) ? pKeywords : (pKeywords = new KeywordsElements());
	}
	
	public ParserRule getKeywordsRule() {
		return getKeywordsAccess().getRule();
	}

	//IntegerLiteral:
	//	("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//RealLiteral:
	//	INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//ExponentPart:
	//	"e" SIGN? INT | "E" SIGN? INT;
	public ExponentPartElements getExponentPartAccess() {
		return (pExponentPart != null) ? pExponentPart : (pExponentPart = new ExponentPartElements());
	}
	
	public ParserRule getExponentPartRule() {
		return getExponentPartAccess().getRule();
	}

	//CharacterLiteral:
	//	"\'" Character "\'";
	public CharacterLiteralElements getCharacterLiteralAccess() {
		return (pCharacterLiteral != null) ? pCharacterLiteral : (pCharacterLiteral = new CharacterLiteralElements());
	}
	
	public ParserRule getCharacterLiteralRule() {
		return getCharacterLiteralAccess().getRule();
	}

	//Character:
	//	SINGLE_CHARACTER | "\\" EscapeSequence;
	public CharacterElements getCharacterAccess() {
		return (pCharacter != null) ? pCharacter : (pCharacter = new CharacterElements());
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}

	//EscapeSequence:
	//	ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence;
	public EscapeSequenceElements getEscapeSequenceAccess() {
		return (pEscapeSequence != null) ? pEscapeSequence : (pEscapeSequence = new EscapeSequenceElements());
	}
	
	public ParserRule getEscapeSequenceRule() {
		return getEscapeSequenceAccess().getRule();
	}

	//UnicodeCharacterEscapeSequence:
	//	"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
	//	HEX_DIGIT HEX_DIGIT;
	public UnicodeCharacterEscapeSequenceElements getUnicodeCharacterEscapeSequenceAccess() {
		return (pUnicodeCharacterEscapeSequence != null) ? pUnicodeCharacterEscapeSequence : (pUnicodeCharacterEscapeSequence = new UnicodeCharacterEscapeSequenceElements());
	}
	
	public ParserRule getUnicodeCharacterEscapeSequenceRule() {
		return getUnicodeCharacterEscapeSequenceAccess().getRule();
	}

	//HexadecimalEscapeSequence:
	//	"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?;
	public HexadecimalEscapeSequenceElements getHexadecimalEscapeSequenceAccess() {
		return (pHexadecimalEscapeSequence != null) ? pHexadecimalEscapeSequence : (pHexadecimalEscapeSequence = new HexadecimalEscapeSequenceElements());
	}
	
	public ParserRule getHexadecimalEscapeSequenceRule() {
		return getHexadecimalEscapeSequenceAccess().getRule();
	}

	//StringLiteral:
	//	"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\"";
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//VerbatimStringCharacter: //Any character except "
	//	SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE;
	public VerbatimStringCharacterElements getVerbatimStringCharacterAccess() {
		return (pVerbatimStringCharacter != null) ? pVerbatimStringCharacter : (pVerbatimStringCharacter = new VerbatimStringCharacterElements());
	}
	
	public ParserRule getVerbatimStringCharacterRule() {
		return getVerbatimStringCharacterAccess().getRule();
	}

	//RegularStringCharacter: //Any character except " (U+0022), \ (U+005C), and new-line-character
	//	SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE;
	public RegularStringCharacterElements getRegularStringCharacterAccess() {
		return (pRegularStringCharacter != null) ? pRegularStringCharacter : (pRegularStringCharacter = new RegularStringCharacterElements());
	}
	
	public ParserRule getRegularStringCharacterRule() {
		return getRegularStringCharacterAccess().getRule();
	}

	//Comment:
	//	SL_COMMENT | ML_COMMENT;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Identifier:
	//	AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//AvailableIdentifier:
	//	IdentifierOrKeyword;
	public AvailableIdentifierElements getAvailableIdentifierAccess() {
		return (pAvailableIdentifier != null) ? pAvailableIdentifier : (pAvailableIdentifier = new AvailableIdentifierElements());
	}
	
	public ParserRule getAvailableIdentifierRule() {
		return getAvailableIdentifierAccess().getRule();
	}

	//IdentifierOrKeyword:
	//	IDENTIFIER_START_CHARACTER IdentifierPartCharacter*;
	public IdentifierOrKeywordElements getIdentifierOrKeywordAccess() {
		return (pIdentifierOrKeyword != null) ? pIdentifierOrKeyword : (pIdentifierOrKeyword = new IdentifierOrKeywordElements());
	}
	
	public ParserRule getIdentifierOrKeywordRule() {
		return getIdentifierOrKeywordAccess().getRule();
	}

	//IdentifierPartCharacter:
	//	LETTER | / *
	//    |connecting-character
	//    |combining-character
	//    |formatting-character * / INT;
	public IdentifierPartCharacterElements getIdentifierPartCharacterAccess() {
		return (pIdentifierPartCharacter != null) ? pIdentifierPartCharacter : (pIdentifierPartCharacter = new IdentifierPartCharacterElements());
	}
	
	public ParserRule getIdentifierPartCharacterRule() {
		return getIdentifierPartCharacterAccess().getRule();
	}

	////FIM LEXICA 
	////SINTAXE
	//Type:
	//	NonArrayType RANK_SPECIFIER*;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//IntegralType:
	//	"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char";
	public IntegralTypeElements getIntegralTypeAccess() {
		return (pIntegralType != null) ? pIntegralType : (pIntegralType = new IntegralTypeElements());
	}
	
	public ParserRule getIntegralTypeRule() {
		return getIntegralTypeAccess().getRule();
	}

	//ArrayType:
	//	NonArrayType RANK_SPECIFIER+;
	public ArrayTypeElements getArrayTypeAccess() {
		return (pArrayType != null) ? pArrayType : (pArrayType = new ArrayTypeElements());
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//EnumType:
	//	Attributes EnumModifier* "enum" ID (":" IntegralType)? EnumBody ";"?;
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//NonArrayType: //QualifiedIdentifier|
	//	BuiltInType;
	public NonArrayTypeElements getNonArrayTypeAccess() {
		return (pNonArrayType != null) ? pNonArrayType : (pNonArrayType = new NonArrayTypeElements());
	}
	
	public ParserRule getNonArrayTypeRule() {
		return getNonArrayTypeAccess().getRule();
	}

	//QualifiedIdentifier:
	//	{ID};
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return (pQualifiedIdentifier != null) ? pQualifiedIdentifier : (pQualifiedIdentifier = new QualifiedIdentifierElements());
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}

	//BuiltInType:
	//	IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double";
	public BuiltInTypeElements getBuiltInTypeAccess() {
		return (pBuiltInType != null) ? pBuiltInType : (pBuiltInType = new BuiltInTypeElements());
	}
	
	public ParserRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}

	//BuiltInClassType:
	//	"object" | "string";
	public BuiltInClassTypeElements getBuiltInClassTypeAccess() {
		return (pBuiltInClassType != null) ? pBuiltInClassType : (pBuiltInClassType = new BuiltInClassTypeElements());
	}
	
	public ParserRule getBuiltInClassTypeRule() {
		return getBuiltInClassTypeAccess().getRule();
	}

	////|'{' {EnumMemberDeclaration ','}+ ','? '}'
	//EnumBody:
	//	"{" "}";
	public EnumBodyElements getEnumBodyAccess() {
		return (pEnumBody != null) ? pEnumBody : (pEnumBody = new EnumBodyElements());
	}
	
	public ParserRule getEnumBodyRule() {
		return getEnumBodyAccess().getRule();
	}

	//EnumModifier:
	//	"new" | "public" | "protected" | "internal" | "private";
	public EnumModifierElements getEnumModifierAccess() {
		return (pEnumModifier != null) ? pEnumModifier : (pEnumModifier = new EnumModifierElements());
	}
	
	public ParserRule getEnumModifierRule() {
		return getEnumModifierAccess().getRule();
	}

	//Attributes:
	//	"null";
	public AttributesElements getAttributesAccess() {
		return (pAttributes != null) ? pAttributes : (pAttributes = new AttributesElements());
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}

	//terminal REAL_TYPE_SUFFIX:
	//	"F" | "f" | "D" | "d" | "M" | "m";
	public TerminalRule getREAL_TYPE_SUFFIXRule() {
		return (tREAL_TYPE_SUFFIX != null) ? tREAL_TYPE_SUFFIX : (tREAL_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL_TYPE_SUFFIX"));
	} 

	//terminal LETTER:
	//	"A".."Z" | "a".."z";
	public TerminalRule getLETTERRule() {
		return (tLETTER != null) ? tLETTER : (tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER"));
	} 

	//terminal IDENTIFIER_START_CHARACTER:
	//	LETTER | "_";
	public TerminalRule getIDENTIFIER_START_CHARACTERRule() {
		return (tIDENTIFIER_START_CHARACTER != null) ? tIDENTIFIER_START_CHARACTER : (tIDENTIFIER_START_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER_START_CHARACTER"));
	} 

	//terminal QUOTE_ESCAPE_SEQUENCE:
	//	"\"\"";
	public TerminalRule getQUOTE_ESCAPE_SEQUENCERule() {
		return (tQUOTE_ESCAPE_SEQUENCE != null) ? tQUOTE_ESCAPE_SEQUENCE : (tQUOTE_ESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTE_ESCAPE_SEQUENCE"));
	} 

	//terminal ESCAPE_SEQUENCE:
	//	"\'" | "\"" | "\\" | "0" | "a" | "b" | "f" | "n" | "r" | "t" | "v";
	public TerminalRule getESCAPE_SEQUENCERule() {
		return (tESCAPE_SEQUENCE != null) ? tESCAPE_SEQUENCE : (tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE"));
	} 

	//terminal NEW_LINE:
	//	("\r" | "\n")* EOF;
	public TerminalRule getNEW_LINERule() {
		return (tNEW_LINE != null) ? tNEW_LINE : (tNEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEW_LINE"));
	} 

	//terminal RANK_SPECIFIER:
	//	"[" ","* "]";
	public TerminalRule getRANK_SPECIFIERRule() {
		return (tRANK_SPECIFIER != null) ? tRANK_SPECIFIER : (tRANK_SPECIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RANK_SPECIFIER"));
	} 

	//terminal INTEGER_TYPE_SUFFIX:
	//	"U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu";
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return (tINTEGER_TYPE_SUFFIX != null) ? tINTEGER_TYPE_SUFFIX : (tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_TYPE_SUFFIX"));
	} 

	//terminal HEX_DIGIT:
	//	"0".."9" | ("A".."F" | "a".."f");
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal SIGN:
	//	"+" | "-";
	public TerminalRule getSIGNRule() {
		return (tSIGN != null) ? tSIGN : (tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGN"));
	} 

	//terminal OPERATOR_OR_PUNCTUATOR:
	//	"{" | "}" | "[" | "]" | "(" | ")" | "." | "," | ":" | ";" | "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "!" | "~"
	//	| "=" | "<" | ">" | "?" | "++" | "--" | "&&" | "||" | "<<" | ">>" | "==" | "!=" | "<=" | ">=" | "+=" | "-=" | "*=" |
	//	"/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "->";
	public TerminalRule getOPERATOR_OR_PUNCTUATORRule() {
		return (tOPERATOR_OR_PUNCTUATOR != null) ? tOPERATOR_OR_PUNCTUATOR : (tOPERATOR_OR_PUNCTUATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR_OR_PUNCTUATOR"));
	} 

	//terminal SINGLE_CHARACTER:
	//	.?;
	public TerminalRule getSINGLE_CHARACTERRule() {
		return (tSINGLE_CHARACTER != null) ? tSINGLE_CHARACTER : (tSINGLE_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_CHARACTER"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
