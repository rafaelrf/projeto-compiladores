/*
* generated by Xtext
*/
grammar InternalCSharp;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.myModel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.myModel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.myModel.services.CSharpGrammarAccess;

}

@parser::members {

 	private CSharpGrammarAccess grammarAccess;
 	
    public InternalCSharpParser(TokenStream input, CSharpGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CSharpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTypiesTypeParserRuleCall_0()); 
	    }
		lv_typies_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"typies",
        		lv_typies_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getIntDefinitionParserRuleCall_0()); 
    }
    this_intDefinition_0=ruleintDefinition
    { 
        $current = $this_intDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getCharDefinitionsParserRuleCall_1()); 
    }
    this_charDefinitions_1=rulecharDefinitions
    { 
        $current = $this_charDefinitions_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulecharDefinitions
entryRulecharDefinitions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharDefinitionsRule()); }
	 iv_rulecharDefinitions=rulecharDefinitions 
	 { $current=$iv_rulecharDefinitions.current; } 
	 EOF 
;

// Rule charDefinitions
rulecharDefinitions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='char' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCharDefinitionsAccess().getCharKeyword_0_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCharDefinitionsAccess().getNameIDTerminalRuleCall_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharDefinitionsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
    |(	otherlv_2='System.Char' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCharDefinitionsAccess().getSystemCharKeyword_0_1_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getCharDefinitionsAccess().getNameIDTerminalRuleCall_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharDefinitionsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)))(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCharDefinitionsAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_5_0=RULE_INT
		{
			newLeafNode(lv_value_5_0, grammarAccess.getCharDefinitionsAccess().getValueINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharDefinitionsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"INT");
	    }

)
))?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCharDefinitionsAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleintDefinition
entryRuleintDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntDefinitionRule()); }
	 iv_ruleintDefinition=ruleintDefinition 
	 { $current=$iv_ruleintDefinition.current; } 
	 EOF 
;

// Rule intDefinition
ruleintDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='int' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntDefinitionAccess().getIntKeyword_0_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIntDefinitionAccess().getNameIDTerminalRuleCall_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
    |(	otherlv_2='System.Int32' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntDefinitionAccess().getSystemInt32Keyword_0_1_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getIntDefinitionAccess().getNameIDTerminalRuleCall_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)))(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIntDefinitionAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_5_0=RULE_INT
		{
			newLeafNode(lv_value_5_0, grammarAccess.getIntDefinitionAccess().getValueINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"INT");
	    }

)
))?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIntDefinitionAccess().getSemicolonKeyword_2());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


