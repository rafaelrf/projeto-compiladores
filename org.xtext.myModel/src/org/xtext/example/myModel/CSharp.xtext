grammar org.xtext.example.myModel.CSharp  hidden(WS, ML_COMMENT, SL_COMMENT)

generate cSharp 'http://www.xtext.org/example/myModel/CSharp'
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Model:
  	inputs?=Input
;

Input:
	InputSectionPart	
;
//LEXICA
InputSectionPart:
	(InputElement)* NEW_LINE
	| PPDirective
;
PPDirective:
 PPDeclaration
 |PPConditional/*
 |PPLine
 |PPDiagnostic
 |PPRegion */	
;
PPConditional:
	(WS)* PPIfSection PPElifSections? =>PPElseSection? PPEndif
;
PPEndif:
	'endif' PPNewLine
;
PPElseSection:
	'else' PPNewLine  (WS)* //ConditionalSection? 
;
PPElifSections:
	PPElifSection PPElifSections2
;
PPElifSections2:
	(PPElifSection PPElifSections2)*
;
PPElifSection:
	 =>'elif' (WS)* PPExpression PPNewLine (WS)* //ConditionalSection?
;
PPIfSection:
	 'if' (WS)* PPExpression PPNewLine  (WS)*//ConditionalSection?
;
PPExpression:
	PPOrExpression
;
PPOrExpression:	
	PPAndExpression (WS)* PPOrExpression2  
;
PPOrExpression2:
	(=>'||' (WS)*  PPAndExpression PPOrExpression2)*  
;
PPAndExpression:
	PPEqualityExpression (WS)* PPAndExpression2 
;
PPAndExpression2:
	(=>'&&' (WS)* PPEqualityExpression PPAndExpression2)*
;
PPEqualityExpression:
	PPUnaryExpression PPEqualityExpression2*
;
PPEqualityExpression2:
	('=='|'!=') (WS)* PPUnaryExpression PPEqualityExpression2
;
PPUnaryExpression:
	PPPrimaryExpression
    |'!' PPUnaryExpression
;
PPPrimaryExpression:
	 'true'
    |'false'
    |ConditionalSymbol
    |'(' (WS)* PPExpression (WS)*')'
;
/*
ConditionalSection:
	InputSectionPart+
    |SkippedSectionPart+
;

/*
SkippedSectionPart:
	SkippedCharacters? NEW_LINE
    |PPDirective
;

SkippedCharacters:
	 WS? NotNumberSign InputCharacter*
;

InputCharacter:
	('\n'|'\r')* ('\r'? '\n')?// ERRADO??
;

NotNumberSign:
	STRING // ERRADO?
;
*/
PPDeclaration:
	WS? '#' WS? ('define'|'undef') WS ConditionalSymbol PPNewLine
;
PPNewLine:
	 (WS)* SL_COMMENT? NEW_LINE 
;
ConditionalSymbol:
	IdentifierOrKeyword
;
InputElement:
	WS
	| Comment
	| Token;
Token:
	ID
	| Keywords
	| IntegerLiteral
	|RealLiteral
    |CharacterLiteral 
    |StringLiteral
    |OPERATOR_OR_PUNCTUATOR
    ;
Keywords:
	'abstract'
	| 'as'
	| 'base'
	| 'bool'
	| 'break'
	| 'byte'
	| 'case'
	| 'catch'
	| 'char'
	| 'checked'
	| 'class'
	| 'const'
	| 'continue'
	| 'decimal'
	| 'default'
	| 'delegate'
	| 'do'
	| 'double'
	| 'else'
	| 'enum'
	| 'event'
	| 'explicit'
	| 'extern'
	| 'false'
	| 'finally'
	| 'fixed'
	| 'float'
	| 'for'
	| 'foreach'
	| 'goto'
	| 'if'
	| 'implicit'
	| 'in'
	| 'int'
	| 'interface'
	| 'internal'
	| 'is'
	| 'lock'
	| 'long'
	| 'namespace'
	| 'new'
	| 'null'
	| 'object'
	| 'operator'
	| 'out'
	| 'override'
	| 'params'
	| 'private'
	| 'protected'
	| 'public'
	| 'readonly'
	| 'ref'
	| 'return'
	| 'sbyte'
	| 'sealed'
	| 'short'
	| 'sizeof'
	| 'stackalloc'
	| 'static'
	| 'string'
	| 'struct'
	| 'switch'
	| 'this'
	| 'throw'
	| 'true'
	| 'try'
	| 'typeof'
	| 'uint'
	| 'ulong'
	| 'unchecked'
	| 'unsafe'
	| 'ushort'
	| 'using'
	| 'virtual'
	| 'void'
	| 'volatile'
	| 'while';
IntegerLiteral:
	('0x'|'0X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX
	|INT (INTEGER_TYPE_SUFFIX)?
	;	
RealLiteral:
	INT '.' INT ExponentPart? REAL_TYPE_SUFFIX?
    | INT ExponentPart REAL_TYPE_SUFFIX?
    | INT REAL_TYPE_SUFFIX
;
ExponentPart:
  'e' OPERATOR_OR_SIGN? INT
  |'E' OPERATOR_OR_SIGN? INT
;
CharacterLiteral:
	  "'" Character "'"
;
Character:
	SINGLE_CHARACTER
    |'\\' EscapeSequence
;
EscapeSequence:
	ESCAPE_SEQUENCE
    | HexadecimalEscapeSequence
    | UnicodeCharacterEscapeSequence
	
;
UnicodeCharacterEscapeSequence:
	 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT 
	 |'U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT 
;
HexadecimalEscapeSequence:
	'x' HEX_DIGIT (HEX_DIGIT(HEX_DIGIT HEX_DIGIT?)?)?
;
StringLiteral:
	 '"' RegularStringCharacter* '"'
    |'@' VerbatimStringCharacter* '"'	
;
VerbatimStringCharacter:
	  SINGLE_CHARACTER //Any character except "
	  |QUOTE_ESCAPE_SEQUENCE
;
RegularStringCharacter:
	 SINGLE_CHARACTER //Any character except " (U+0022), \ (U+005C), and new-line-character
    |'\\' ESCAPE_SEQUENCE
;
Comment:
	SL_COMMENT
	| ML_COMMENT;
Identifier:
	AvailableIdentifier
    |'@' IDENTIFIER_START_CHARACTER
;
AvailableIdentifier:
	IdentifierOrKeyword
;
IdentifierOrKeyword:
 IDENTIFIER_START_CHARACTER IdentifierPartCharacter*	
;
IdentifierPartCharacter:
	LETTER
    |INT/*
    |connecting-character
    |combining-character
    |formatting-character */
;
//FIM LEXICA 


//SINTAXE
CompilationUnit:
    UsingDirective* GlobalAttributes NamespaceMemberDeclaration*    
;

NamespaceMemberDeclaration:
	 NamespaceDeclaration
    |TypeDeclaration
;


NamespaceDeclaration:
	    "namespace" QualifiedIdentifier NamespaceBody ";"?
;

NamespaceBody:
	 "{" UsingDirective* NamespaceMemberDeclaration* "}"
;

TypeDeclaration:
	Attributes
   (ClassDeclaration
    |StructDeclaration
    |InterfaceDeclaration
    |EnumDeclaration
    |DelegateDeclaration)
;

DelegateDeclaration:
	DelegateModifier* "delegate" TypeOrVoid Identifier "(" FormalParameterList? ")" ";"
;

DelegateModifier:
	"new"
    |"public"
    |"protected"
    |"internal"
    |"private"
;

EnumDeclaration:
	 Attributes EnumModifier* "enum" Identifier ( ":" IntegralType )? EnumBody ";"?
;

InterfaceDeclaration:
  Attributes InterfaceModifier* "struct" Identifier ( ":" QualifiedIdentifierList )? InterfaceBody ";"?
;

InterfaceModifier:
	"new"
    |"public"
    |"protected"
    |"internal"
    |"private"
;

InterfaceBody:
 "{"InterfaceMemberDeclaration* "}"
;

InterfaceMemberDeclaration:
   Attributes 'new'? 
  (InterfaceMethodDeclaration
  |InterfaceEventDeclaration
  |Type (InterfaceIndexerDeclaration|InterfacePropertyDeclaration))
;

InterfaceIndexerDeclaration:
	"this" "[" FormalParameterList "]" "{" InterfaceAccessors "}"
;

InterfaceEventDeclaration:
	"event" Type Identifier ";"
;

InterfacePropertyDeclaration:
	Identifier "{" InterfaceAccessors "}"
;

InterfaceAccessors:
	 Attributes ("get" ";" ( Attributes "set" ";" )? | "set" ";" ( Attributes "get" ";" )?)
;

InterfaceMethodDeclaration:
	TypeOrVoid Identifier "(" FormalParameterList? ")" ";"
;

StructDeclaration:
Attributes StructModifier* "struct" Identifier ( ":" QualifiedIdentifierList )? StructBody ";"?
;

StructBody:
  "{" StructMemberDeclaration* "}"
;

StructMemberDeclarations:
  StructMemberDeclaration (StructMemberDeclarations2)*
;

StructMemberDeclarations2:
	StructMemberDeclaration StructMemberDeclarations2
;

StructMemberDeclaration:
	ConstantDeclaration
    |FieldDeclaration
    |MethodDeclaration
    |PropertyDeclaration
    |EventDeclaration
    |IndexerDeclaration
    |OperatorDeclaration
    |ConstructorDeclaration
    |StaticConstructorDeclaration
    |TypeDeclaration
;

StructModifier:
	"new"
    |"public"
    |"protected"
    |"internal"
    |"private"
;

ClassDeclaration:
	  Attributes ClassModifier* "class" Identifier ClassBase? ClassBody ";"?
;

ClassBody:
	"{" ClassMemberDeclaration* "}"
;

ClassMemberDeclaration:
	ConstantDeclaration
    |FieldDeclaration
    |MethodDeclaration
    |PropertyDeclaration
    |EventDeclaration
    |IndexerDeclaration
    |OperatorDeclaration
    |ConstructorDeclaration
    |DestructorDeclaration
    |StaticConstructorDeclaration
    |TypeDeclaration 
;

StaticConstructorDeclaration:
  Attributes StaticConstructorModifiers Identifier "(" ")" //maybe-empty-block
;

StaticConstructorModifiers:
	"extern"? "static"
    |"static" "extern"
;

DestructorDeclaration:
	 Attributes "extern"? "~" Identifier "(" ")" //maybe-empty-block
;

ConstructorDeclaration:
   Attributes ConstructorModifier* ConstructorDeclarator //MaybeEmptyBlock
;

ConstructorDeclarator:
   Identifier "(" FormalParameterList? ")" ConstructorInitializer?
;

ConstructorInitializer:
   ":" "base" "(" ArgumentList ")"
   |":" "this" "(" ArgumentList ")"
;

ArgumentList:
	(Argument",")*
;

Argument:
  RefOrOut? //Expression	
;

RefOrOut:
  "ref"
  |"out"
;

ConstructorModifier:
	"public"
    |"protected"
    |"internal"
    |"private"
    |"extern"
;

OperatorDeclaration:
	Attributes OperatorModifier+ OperatorDeclarator //MaybeEmptyBlock
;

OperatorDeclarator:
	 UnaryOperatorDeclarator
    |BinaryOperatorDeclarator
    |ConversionOperatorDeclarator
;

ConversionOperatorDeclarator:
	    ConversionKind "operator" Type "(" Type Identifier ")"
	
;

ConversionKind:
	"implicit"
    |"explicit"
	
;

BinaryOperatorDeclarator:
	Type "operator" OverloadableBinaryOperator "(" Type Identifier "," Type Identifier ")"
;

OverloadableBinaryOperator:
	 OPERATOR_OR_SIGN
    |"*"
    |"/"
    |"%"
    |AMPERSAND
    |BAR
    |"^"
    |"<<"
    |">>"
    |"=="
    |"!="
    |GREATER_THAN
    |LESS_THAN
    |">="
    |"<="
	
;

UnaryOperatorDeclarator:
	Type "operator" OverloadableUnaryOperator "(" Type Identifier ")"
;

OverloadableUnaryOperator:
	 OPERATOR_OR_SIGN
    |INCREMENT_DECREMENT
    |"!"
    |"~"
    |"true"
    |"false"
;

OperatorModifier:
	"public"
    |"static"
    |"extern"
;

IndexerDeclaration:
	    Attributes IndexerModifier* IndexerDeclarator "{" AccessorDeclarations "}"
;

IndexerDeclarator:
	Type "this" "[" FormalParameterList "]"
    |Type QualifiedIdentifier "." "this" "[" FormalParameterList "]"
	
;

IndexerModifier:
	 "new"
    |"public"
    |"protected"
    |"internal"
    |"private"
    |"virtual"
    |"sealed"
    |"override"
    |"abstract"
    |"extern"
;

EventDeclaration:
	Attributes EventModifier* "event" Type ((VariableDeclarator ",")+ ";"|QualifiedIdentifier "{" EventAccessorDeclarations "}")
;

EventAccessorDeclarations:
	AddAccessorDeclaration RemoveAccessorDeclaration
    |RemoveAccessorDeclaration AddAccessorDeclaration
;

RemoveAccessorDeclaration:
	    Attributes "remove" //Block	
;
/*
Block:
	 "{" Statement* "}"
;
 */
AddAccessorDeclaration:
	    Attributes "add" //Block
;

EventModifier:
	"new"
    |"public"
    |"protected"
    |"internal"
    |"private"
    |"static"
    |"virtual"
    |"sealed"
    |"override"
    |"abstract"
    |"extern"
;

PropertyDeclaration:
   Attributes PropertyModifier* Type QualifiedIdentifier "{" AccessorDeclarations "}"
;

AccessorDeclarations:
	 GetAccessorDeclaration (SetAccessorDeclaration)?
    |SetAccessorDeclaration (GetAccessorDeclaration)?
;

SetAccessorDeclaration:
	 Attributes "set" //MaybeEmptyBlock	
;
GetAccessorDeclaration:
	 Attributes "get" //MaybeEmptyBlock
;

PropertyModifier:
	"new"
    |"public"
    |"protected"
    |"internal"
    |"private"
    |"static"
    |"virtual"
    |"sealed"
    |"override"
    |"abstract"
    |"extern"
;

MethodDeclaration:
	MethodHeader //MaybeEmptyBlock
;

MethodHeader:
	Attributes MethodModifier* TypeOrVoid QualifiedIdentifier "(" FormalParameterList? ")"
;

FormalParameterList:
	FixedParameters
    |FixedParameters "," ParameterArray
    |ParameterArray
	
;

ParameterArray:
	    Attributes "params" ArrayType Identifier
;

FixedParameters:
	(FixedParameter ",")+
;

FixedParameter:
   Attributes ParameterModifier? Type Identifier
;

ParameterModifier:
	 "ref"
    |"out"
;

TypeOrVoid:
	 Type
    |"void"
;

MethodModifier:
	 "new"
    |"public"
    |"protected"
    |"internal"
    |"private"
    |"static"
    |"virtual"
    |"sealed"
    |"override"
    |"abstract"
    |"extern"
	
;

FieldDeclaration:
	    Attributes FieldModifier* Type (VariableDeclarator ",")+ ";"
;

VariableDeclarator:
	Identifier
    Identifier "=" VariableInitializer
;

VariableInitializer:
	//Expression|
	ArrayInitializer
;

ArrayInitializer:
	 "{" "}"
    |"{" (VariableInitializer ",") + ","? "}"
;

FieldModifier:
	"new"
    |"public"
    |"protected"
    |"internal"
    |"private"
    |"static"
    |"readonly"
    |"volatile"
;

ConstantDeclaration:
	    Attributes ConstantModifier* "const" Type (ConstantDeclarator ",") + ";"
;

ConstantModifier:
	 "new"
    |"public"
    |"protected"
    |"internal"
    |"private"
;

ConstantDeclarator: //TODO
	 Identifier "=" //Expression
;


ClassBase:
	":" (QualifiedIdentifierList | BuiltInClassType ( "," QualifiedIdentifierList )?)
;

QualifiedIdentifierList:
	    (QualifiedIdentifier ",")+
;

ClassModifier:
	"new"
    |"public"
    |"protected"
    |"internal"
    |"private"
    |"abstract"
    |"sealed"
;
GlobalAttributes:
	  GlobalAttributeSection*
;

GlobalAttributeSection:
	'[' 'assembly' ':' AttributeList ','? ']'
;

Attributes:
 AttributeSection*
;

AttributeSection:
    '[' ( AttributeTarget ':' )? AttributeList ','? ']'	
;

AttributeTarget:
	 'field'
    |'event'
    |'method'
    |'module'
    |'param'
    |'property'
    |'return'
    |'type'
;

AttributeList:
	  (Attribute ',') +
;

Attribute:// AQUI
	 AttributeName AttributeArguments?
;

AttributeArguments:
	    "(" ExpressionList? ")"
;

ExpressionList:
   (Expression ",")+
;

Expression:
   	UnaryExpression  (Expression2|BAR Expression Expression2)
;

Expression2:
	("?" Expression ":" Expression Expression2 
	|"||" Expression Expression2
    | "&&" Expression Expression2
    |BAR Expression Expression2
    | "^" Expression Expression2
    | AMPERSAND Expression Expression2
    |EXPRESSION_EQUALITY_OPERATOR Expression Expression2
    |ExpressionRelationalOperator Expression Expression2
    |"is" BuiltInType Expression2
    |ExpressionShiftOperator Expression Expression2
    |OPERATOR_OR_SIGN Expression Expression2
    |"*" Expression Expression2
    |"/" Expression Expression2
    |"%" Expression  Expression2)*
;




UnaryExpression:
	 ExpressionUnaryOperator UnaryExpression
    |"(" Type ")" UnaryExpression
//    |PrimaryExpression
;


ExpressionUnaryOperator:
	 OPERATOR_OR_PUNCTUATOR
    |INCREMENT_DECREMENT
    |"!"
    |"~"
    |"*"
;


ExpressionShiftOperator:
	"<<"
    |">>"
;

ExpressionRelationalOperator:
	LESS_THAN
    |GREATER_THAN
    |"<="
    |">="
    |"is"
    |"as"
;


AttributeName:
	 QualifiedIdentifier
;

UsingDirective:
	 'using' (Identifier '=')? QualifiedIdentifier ';'
;

Type:
	NonArrayType RANK_SPECIFIER*
;


IntegralType:
	'sbyte'
	| 'byte'
	| 'short'
	| 'ushort'
	| 'int'
	| 'uint'
	| 'long'
	| 'ulong'
	| 'char';

ArrayType:
	NonArrayType RANK_SPECIFIER+;

EnumType:
	Attributes EnumModifier* 'enum' ID (':' IntegralType)? EnumBody
	';'?;

NonArrayType:
//QualifiedIdentifier|
	BuiltInType;
	
QualifiedIdentifier:
   (Identifier '.')+
   ;
 
BuiltInType:
	IntegralType | BuiltInClassType | 'bool' | 'decimal' | 'float' | 'double';

BuiltInClassType:
	'object' | 'string';

EnumBody:
	'{' '}'
	|'{' (EnumMemberDeclaration ',')+ ','? '}'
;

EnumMemberDeclaration:
	  Attributes Identifier ( "=" Expression )?
;


EnumModifier:
	'new' | 'public' | 'protected' | 'internal' | 'private';



terminal EXPRESSION_EQUALITY_OPERATOR:
	"=="
    |"!="
;
terminal LESS_THAN:	'<';
terminal GREATER_THAN: '>';
terminal BAR: '|';
terminal AMPERSAND: '&';
terminal INCREMENT_DECREMENT: "++"|"--";
terminal OPERATOR_OR_SIGN: '+'|'-';
terminal REAL_TYPE_SUFFIX:	'F'|'f'|'D'|'d'|'M'|'m';
terminal LETTER:('A'..'Z') | ('a'..'z');
terminal IDENTIFIER_START_CHARACTER: LETTER|'_';
terminal QUOTE_ESCAPE_SEQUENCE:	'""';
terminal ESCAPE_SEQUENCE:("'"|'"'|"\\"|'0'|'a'|'b'|'f'|'n'|'r'|'t'|'v');
terminal NEW_LINE:	 ('\r'|'\n')*EOF;
terminal RANK_SPECIFIER: '[' ','* ']';
terminal INTEGER_TYPE_SUFFIX:'U' | 'u' | 'L' | 'l' | 'UL' | 'Ul' | 'uL' | 'ul' | 'LU' | 'Lu' | 'lU' | 'lu';
terminal HEX_DIGIT:	('0'..'9')|(('A'..'F') | ('a'..'f'));
terminal OPERATOR_OR_PUNCTUATOR:
	'{'
    |'}'
    |'['
    |']'
    |'('
    |')'
    |'.'
    |','
    |':'
    |';'
    |'+'
    |'-'
    |'*'
    |'/'
    |'%'
    |'&'
    |'|'
    |'^'
    |'!'
    |'~'
    |'='
    |'<'
    |'>'
    |'?'
    |'++'
    |'--'
    |'&&'
    |'||'
    |'<<'
    |'>>'
    |'=='
    |'!='
    |'<='
    |'>='
    |'+='
    |'-='
    |'*='
    |'/='
    |'%='
    |'&='
    |'|='
    |'^='
    |'<<='
    |'>>='
    |'->'	
;
terminal SINGLE_CHARACTER: .?;
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING	: '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' 
			|"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"; 
terminal ML_COMMENT: '/*' -> '*/';
terminal SL_COMMENT:'//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS: (' '|'\t'|'\r'|'\n')+;



 

	