grammar org.xtext.example.myModel.CSharp hidden(WS,NEW_LINE,ML_COMMENT, SL_COMMENT) 
generate cSharp 'http://www.xtext.org/example/myModel/CSharp'
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

CompilationUnit:
 usingDirectives+=UsingDirective* globalAtt=GlobalAttributes nameSpaces+=NamespaceMemberDeclaration*;

Keywords:	
	'abstract'
	| 'as'
	| 'base'
	| 'break'
	| 'case'
	| 'catch'
	| 'checked'
	| 'class'
	| 'const'
	| 'continue'
	| 'default'
	| 'delegate'
	| 'do'
	| 'else'
	| 'enum'
	| 'event'
	| 'explicit'
	| 'extern'
	| 'false'
	| 'finally'
	| 'fixed'
	| 'for'
	| 'foreach'
	| 'goto'
	| 'if'
	| 'implicit'
	| 'in'
	| 'interface'
	| 'internal'
	| 'is'
	| 'lock'
	| 'namespace'
	| 'new'
	| 'null'
	| 'operator'
	| 'out'
	| 'override'
	| 'params'
	| 'private'
	| 'protected'
	| 'public'
	| 'readonly'
	| 'ref'
	| 'return'
	| 'sealed'
	| 'sizeof'
	| 'stackalloc'
	| 'static'
	| 'struct'
	| 'switch'
	| 'this'
	| 'throw'
	| 'true'
	| 'try'
	| 'typeof'
	| 'unchecked'
	| 'unsafe'
	| 'using'
	| 'virtual'
	| 'void'
	| 'volatile'
	| 'while'
	| PredefinedType;

Literal:
	BooleanLiteral
	| CharacterLiteral
	| StringLiteral
	| NullLiteral;

NullLiteral:
	'null';

BooleanLiteral:
	'true'
	| 'false';
	

CharacterLiteral: Character;

Character:
	STRING| EscapeSequence;

EscapeSequence:
	ESCAPE_SEQUENCE
	|( HexadecimalEscapeSequence
		   |UnicodeCharacterEscapeSequence);

UnicodeCharacterEscapeSequence:
	'\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
	| '\\U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

HexadecimalEscapeSequence:
	'\\x' HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?;

StringLiteral:
	  STRING*
	| '@'STRING*;

Identifier:
	{Identifier}ID
	|{Identifier} "@" ID
	;
//SINTAXE

UsingDirective:
	{UsingDirective} 'using' (name=Identifier ASSIGNEMENT_OPERATOR)? usings=QualifiedIdentifier SEMICOLON;


ArrayType:
	NonArrayType RANK_SPECIFIER+;


GlobalAttributes returns GlobalAttributes:
	{GlobalAttributes}
	globalAttSections+=GlobalAttributeSection*;

GlobalAttributeSection:
	{GlobalAttributeSection}
	COLCHETEESQ 'assembly' DOISPONTOS attributes=AttributeList  COLCHETEDIR;

Attributes returns Attributes:
	{Attributes} (attributes+=AttributeSection)*;

AttributeSection:
	
	COLCHETEESQ (AttributeTarget DOISPONTOS)? AttributeList COLCHETEDIR;

AttributeTarget:
	'field'
	| 'event'
	| 'method'
	| 'module'
	| 'param'
	| 'property'
	| 'return'
	| 'type';

AttributeList returns AttributeList:
	{AttributeList}
	attribute=Attribute (COMMA attributes+=Attribute )*;

Attribute returns Attribute:
	name=AttributeName attArguments=AttributeArguments?;

AttributeArguments returns AttributeArguments:
	{AttributeArguments}
	PARENTESQ expresionList=ExpressionList PARENTDIR;

ExpressionList returns ExpressionList:
	{ExpressionList}
	expression=Expression ( COMMA expressions+=Expression)*;

Expression returns Expression:
	{Expression}
	unary=UnaryExpression (BAR exp=Expression)? exp2=Expression2?
	;


Expression2 returns Expression2:
	{Expression2}
	(('?' interExp=Expression SEMICOLON interExp2=Expression2  
	| '||' pipelineExp=Expression pipelineExp2=Expression2 
	| '&&' inExp=Expression inExp2=Expression2 
	| BAR barExp=Expression  =>barExp2=Expression2
	| CHAPEU exp=Expression exp2=Expression2 
	| AMPERSAND ampExp=Expression ampExp2=Expression2 
	| EXPRESSION_EQUALITY_OPERATOR equalityExp=Expression equalityExp2=Expression2 
	| ExpressionRelationalOperator relopExp=Expression relopExp2=Expression2 
	| 'is' buildInType=BuiltInType 
	| EXPRESSION_SHIFT_OPERATOR shiftExp=Expression shiftExp2=Expression2 
	| ('-'|'+') operatorExp=Expression operatorExp2=Expression2 
	| MULTIP multipExp=Expression multipExp2=Expression2 
	| DIVISAO divExp=Expression divExp2=Expression2 
	| MOD modExp=Expression modExp2=Expression2));

UnaryExpression returns UnaryExpression:
	{UnaryExpression}
	((expUnaryOperator=ExpressionUnaryOperator | PARENTESQ type=Type PARENTDIR) unaryExp=UnaryExpression
	| primaryExp=PrimaryExpression)
	;


PrimaryExpression returns PrimaryExpression:
		{PrimaryExpression}((('new' ((nonArrayType=NonArrayType COLCHETEESQ expressionList=ExpressionList COLCHETEDIR rankSpecifier+=RANK_SPECIFIER* arrayInitializer+=ArrayInitializer?)
		    |(arrayType=ArrayType arrayInitializer2=ArrayInitializer) 
			| (tipo=Type	PARENTESQ argumentList=ArgumentList PARENTDIR))) 
		| ('this') 
		| (id=Identifier)
		| literal=Literal 
		|PARENTESQ expression=Expression PARENTDIR
		| ('base' ((PONTO id=Identifier) 
		| (COLCHETEESQ expressionList=ExpressionList COLCHETEDIR))) 
		| predefinedType=PredefinedType PONTO id=Identifier 
		| ('typeof' PARENTESQ typeOrVoid=TypeOrVoid PARENTDIR) 
		| ('checked'|'unchecked') PARENTESQ expression=Expression PARENTDIR) primaryExoression2=PrimaryExpression2);

PrimaryExpression2 returns PrimaryExpression2:
	{PrimaryExpression2}(((PONTO id+=Identifier) 
	  |(PARENTESQ argumentList+=ArgumentList PARENTDIR) 
	  |(COLCHETEESQ expressionList+=ExpressionList COLCHETEDIR) 
	  | (incrementeDecrement+=INCREMENT_DECREMENT)
	) primaryExpression2+=PrimaryExpression2)*;

ArrayInitializer returns ArrayInitializer:
	{ArrayInitializer}
	LEFT_CURLY_BRACKETS RIGHT_CURLY_BRACKETS
	| LEFT_CURLY_BRACKETS  variableInitalizer=VariableInitializer (COMMA variableInitalizers+=VariableInitializer )* RIGHT_CURLY_BRACKETS;

VariableInitializer returns VariableInitializer:
	Expression | ArrayInitializer;

 
ExpressionRelationalOperator:
	LESS_THAN
    |GREATER_THAN
    |MENORIGUAL
    |MAIORIGUAL
    |'is'
    |'as'
;

AttributeName:
	{AttributeName}
	qualifiedId=QualifiedIdentifier;

Type returns Type:
	(nonArray=NonArrayType) RANK_SPECIFIER*;

IntegralType returns IntegralType:
	{SByte}'sbyte'
	|{Byte} 'byte'
	|{Short} 'short'
	|{UShort} 'ushort'
	|{Int} 'int'
	|{UInt} 'uint'
	|{Long} 'long'
	|{ULong} 'ulong'
	|{Char} 'char';

NonArrayType returns NonArrayType:
	( builtType=BuiltInType 
	|qualified=QualifiedIdentifier
	);
	

BuiltInType returns BuiltInType:
	BuiltInClassType
	|IntegralType
	|{Bool} 'bool'
	|{Decimal} 'decimal'
	|{Float} 'float'
	|{Double} 'double';

BuiltInClassType returns BuiltInClassType:
	{Object}'object' |
	{String} 'string';

ExpressionUnaryOperator:
	 ('+' | '-')
    |INCREMENT_DECREMENT
    |"!"
    |"~"
    |MULTIP
;

QualifiedIdentifier:
	{QualifiedIdentifier}
	id=Identifier (PONTO ids+=Identifier)*;

NamespaceMemberDeclaration returns NamespaceMemberDeclaration:
	{NamespaceMemberDeclaration}
	nameDeclaretion=NamespaceDeclaration
	| typeDeclaration=TypeDeclaration;
NamespaceDeclaration returns NamespaceDeclaration:
	'namespace' qId=QualifiedIdentifier nameBody=NamespaceBody SEMICOLON?;

NamespaceBody returns NamespaceBody:
	{NamespaceBody}
	LEFT_CURLY_BRACKETS usingDirectives+=UsingDirective* nameSpaces+=NamespaceMemberDeclaration* RIGHT_CURLY_BRACKETS;
	
TypeDeclaration returns TypeDeclaration:
	{TypeDeclaration}
	(classDeclaration=ClassDeclaration
	| interfaceDeclaration=InterfaceDeclaration
	| enumDeclaration=EnumDeclaration
	| delegateDeclaration=DelegateDeclaration);

DelegateDeclaration:
	'delegate' TypeOrVoid name=Identifier PARENTESQ formalParameters=FormalParameterList? PARENTDIR SEMICOLON;

EnumDeclaration:
	'enum' name=Identifier (DOISPONTOS intType=IntegralType)? enumBody=EnumBody SEMICOLON?;

EnumBody returns EnumBody:
	{EnumBody}
	LEFT_CURLY_BRACKETS RIGHT_CURLY_BRACKETS
	| LEFT_CURLY_BRACKETS enumDeclaration=EnumMemberDeclaration (COMMA enumDeclarations+=EnumMemberDeclaration)* RIGHT_CURLY_BRACKETS;

EnumMemberDeclaration returns EnumMemberDeclaration:
	att=Attributes name=Identifier (ASSIGNEMENT_OPERATOR exp=Expression)?;

EnumModifier:
	'new' | 'public' | 'protected' | 'internal' | 'private';


InterfaceDeclaration:
	'interface' name=Identifier (DOISPONTOS qIdentifiers=QualifiedIdentifierList)? interBody=InterfaceBody? SEMICOLON?;

Modifier:
	'new'
	| 'public'
	| 'protected'
	| 'internal'
	| 'private';

InterfaceBody returns InterfaceBody:
	{InterfaceBody}
	LEFT_CURLY_BRACKETS interfaceMemberDeclarations+=InterfaceMemberDeclaration* RIGHT_CURLY_BRACKETS;

InterfaceMemberDeclaration returns InterfaceMemberDeclaration:
	{InterfaceMemberDeclaration}
	'new'?
	(intermethodDeclaration=InterfaceMethodDeclaration
	| interEventDeclaration=InterfaceEventDeclaration
	| type1=Type (interfaceIndexerDecla=InterfaceIndexerDeclaration | interProperty=InterfacePropertyDeclaration));

InterfaceIndexerDeclaration returns InterfaceIndexerDeclaration:
	{InterfaceIndexerDeclaration}
	'this' COLCHETEESQ parameterList=FormalParameterList COLCHETEDIR LEFT_CURLY_BRACKETS interAccessors=InterfaceAccessors RIGHT_CURLY_BRACKETS;

InterfaceEventDeclaration returns InterfaceEventDeclaration:
	{InterfaceEventDeclaration}
	'event' type=Type name=Identifier SEMICOLON;

InterfacePropertyDeclaration returns InterfacePropertyDeclaration:
	{InterfacePropertyDeclaration}
	name=Identifier LEFT_CURLY_BRACKETS interAccessor=InterfaceAccessors RIGHT_CURLY_BRACKETS;

InterfaceAccessors:
	att=Attributes ('get' SEMICOLON (newAtt=Attributes 'set' SEMICOLON)? | 'set' SEMICOLON (otherAtt=Attributes 'get'
	SEMICOLON)?);

InterfaceMethodDeclaration:
	type=TypeOrVoid name=Identifier PARENTESQ parameterList=FormalParameterList? PARENTDIR SEMICOLON;

	
	ClassDeclaration returns ClassDeclaration:
	{ClassDeclaration}
	classModifier+=ClassModifier* 'class' className=Identifier classBase=ClassBase? LEFT_CURLY_BRACKETS classBody=ClassBody RIGHT_CURLY_BRACKETS ;

ClassBody returns ClassBody:
	{ClassBody} (classAtt+=Attributes classDeclaration+=ClassMemberDeclaration)* ;

ClassMemberDeclaration returns ClassMemberDeclaration:
	( (Modifier*(fieldDeclaration=FieldDeclaration//certeza
				 |methodDeclaration=MethodDeclaration//certeza
	             |constDeclaration=ConstantDeclaration//certeza
				 | propertyDeclaration=PropertyDeclaration//certeza
				 | eventDeclaration=EventDeclaration//certeza
				 | indexDeclaration=IndexerDeclaration//certeza
				 | typeDeclaration=TypeDeclaration
				 ))
	| opDeclaration=OperatorDeclaration
	| constructorDeclaration=ConstructorDeclaration
	| destructorDeclaration=DestructorDeclaration
	| staticDeclaration=StaticConstructorDeclaration
	);
	

StaticConstructorDeclaration:
	staticCosntModifier=StaticConstructorModifiers name=Identifier PARENTESQ PARENTDIR emptyBlock=MaybeEmptyBlock;

StaticConstructorModifiers:
	'extern'? 'static'
	| 'static' 'extern';

DestructorDeclaration:
	'extern'? '~' name=Identifier PARENTESQ WS* PARENTDIR emptyBlock=MaybeEmptyBlock;

ConstructorDeclaration:
	constModifier+=ConstructorModifier* constrDeclarator=ConstructorDeclarator emptyBlock=MaybeEmptyBlock;

ConstructorDeclarator:
	className=Identifier PARENTESQ formalList=FormalParameterList? PARENTDIR constInitializer=ConstructorInitializer?;

ConstructorInitializer:
	DOISPONTOS 'base' PARENTESQ ArgumentList PARENTDIR
	| DOISPONTOS 'this' PARENTESQ ArgumentList PARENTDIR;

ArgumentList returns ArgumentList:
	{ArgumentList}
	arg=Argument (COMMA args+=Argument)*;

Argument:
	RefOrOut? Expression;

RefOrOut:
	'ref'
	| 'out';

ConstructorModifier:
	'public'
	| 'protected'
	| 'internal'
	| 'private'
	| 'extern';

OperatorDeclaration:
	opModifier+=OperatorModifier+ opDeclarator=OperatorDeclarator emptyBlock=MaybeEmptyBlock;

OperatorDeclarator:
	UnaryOperatorDeclarator
	| BinaryOperatorDeclarator
	| ConversionOperatorDeclarator;

ConversionOperatorDeclarator:
	ConversionKind 'operator' firstType=Type PARENTESQ type=Type conversionName=Identifier PARENTDIR;

ConversionKind:
	'implicit'
	| 'explicit';

BinaryOperatorDeclarator:
	binType=Type 'operator' overBinOperator=OverloadableBinaryOperator PARENTESQ type=Type otherName=Identifier COMMA
	secondType=Type secondName=Identifier PARENTDIR;

OverloadableBinaryOperator:
	('-'|'+')
	| MULTIP
	| DIVISAO
	| MOD
	| AMPERSAND
	| BAR
	| CHAPEU
	|EXPRESSION_SHIFT_OPERATOR
	| EXPRESSION_EQUALITY_OPERATOR
	| GREATER_THAN
	| LESS_THAN
	| MAIORIGUAL
	| MENORIGUAL;

UnaryOperatorDeclarator:
	type=Type 'operator' OverloadableUnaryOperator PARENTESQ otherType=Type name=Identifier PARENTDIR;

OverloadableUnaryOperator:
	('-'|'+')
	| INCREMENT_DECREMENT
	| '!'
	| '~'
	| 'true'
	| 'false';

OperatorModifier:
	'public'
	| 'static'
	| 'extern';

IndexerDeclaration:
	idModifier+=IndexerModifier* indexerDeclarator=IndexerDeclarator LEFT_CURLY_BRACKETS accDeclaration=AccessorDeclarations RIGHT_CURLY_BRACKETS;

IndexerDeclarator:
	type=Type ('this' COLCHETEESQ formalList=FormalParameterList COLCHETEDIR
	| qualifiedId=QualifiedIdentifier PONTO 'this' COLCHETEESQ formalList=FormalParameterList COLCHETEDIR);

IndexerModifier:	
	 'virtual'
	| 'sealed'
	| 'override'
	| 'abstract'
	| 'extern';

EventDeclaration:
	EventModifier* 'event' Type (variableDeclarator=VariableDeclarator (COMMA variableDeclarators+=VariableDeclarator)* SEMICOLON | qIdent=QualifiedIdentifier LEFT_CURLY_BRACKETS
	eventAccessorDeclarations=EventAccessorDeclarations RIGHT_CURLY_BRACKETS);

EventAccessorDeclarations:
	att1=Attributes (addAccessor=AddAccessorDeclaration att=Attributes removAccessor=RemoveAccessorDeclaration
	| removAccessor=RemoveAccessorDeclaration att=Attributes addAccessor=AddAccessorDeclaration);

RemoveAccessorDeclaration:
	'remove' Block;

AddAccessorDeclaration:
	'add' Block;

EventModifier:
	 'static'
	| 'virtual'
	| 'sealed'
	| 'override'
	| 'abstract'
	| 'extern';

PropertyDeclaration:
	PropertyModifier* Type qualifiedId=QualifiedIdentifier LEFT_CURLY_BRACKETS accDeclarate=AccessorDeclarations RIGHT_CURLY_BRACKETS;

AccessorDeclarations:
	att=Attributes (getAcc=GetAccessorDeclaration att2=Attributes (setAcc=SetAccessorDeclaration)?
	| setAcc=SetAccessorDeclaration att2=Attributes (getAcc=GetAccessorDeclaration)?);

SetAccessorDeclaration:
	'set' MaybeEmptyBlock;

GetAccessorDeclaration:
	'get' MaybeEmptyBlock;

PropertyModifier:
	'static'
	| 'virtual'
	| 'sealed'
	| 'override'
	| 'abstract'
	| 'extern';

MethodDeclaration:
	methodHeader=MethodHeader maybeEmpty=MaybeEmptyBlock;

MethodHeader:
	modifier+=MethodModifier* typeOrVoid=TypeOrVoid qualifiedIdentifier=QualifiedIdentifier PARENTESQ formalParameters=FormalParameterList? PARENTDIR;

FormalParameterList:
	FixedParameters (COMMA parameterArray=ParameterArray)?
    |parameterArray=ParameterArray;

ParameterArray returns ParameterArray:
	{ParameterArray}
	att=Attributes 'params' array=ArrayType name=Identifier;

FixedParameters returns FixedParameters:
	fixParameter=FixedParameter (COMMA fixParameters+=FixedParameter)*;

FixedParameter returns FixedParameter:
	Att=Attributes RefOrOut? type=Type name=Identifier;
	
TypeOrVoid returns TypeOrVoid:
	{TypeOrVoid}
	type=Type
	| {Void} 'void';

MethodModifier:
	 'static'
	| 'virtual'
	| 'sealed'
	| 'override'
	| 'abstract'
	| 'extern';

FieldDeclaration returns FieldDeclaration:
	FieldModifier* Type variable=VariableDeclarator (COMMA variables+=VariableDeclarator)* SEMICOLON;

VariableDeclarator returns VariableDeclarator:
	variableName=Identifier (ASSIGNEMENT_OPERATOR variable=VariableInitializer)?;

FieldModifier:
	 'static'
	| 'readonly'
	| 'volatile';

ConstantDeclaration:
	ConstantModifier* 'const' Type constDeclarator=ConstantDeclarator ( COMMA constDeclarators+=ConstantDeclarator)* SEMICOLON;

ConstantModifier:
	Modifier;

ConstantDeclarator returns ConstantDeclarator:
	{ConstantDeclarator}
	name=Identifier ASSIGNEMENT_OPERATOR exp=Expression;

ClassBase:
	DOISPONTOS (qIDs=QualifiedIdentifierList | BuiltInClassType (COMMA qID2=QualifiedIdentifierList)?);
	
QualifiedIdentifierList returns QualifiedIdentifierList:
	id=QualifiedIdentifier (COMMA ids+=QualifiedIdentifier)*;

ClassModifier:
	 'abstract'
	| 'sealed';

PredefinedType:
    ("bool"
    |"byte"
    |"char"
    |"decimal"
    |"double"
    |"float"
    |"int"
    |"long"
    |"object"
    |"sbyte"
    |"short"
    |"string"
    |"uint"
    |"ulong"
    |"ushort")
    ;
    
Statement returns Statement:
	{Statement}(
	labelStat=LabeledStatement
	|declareStat=DeclarationStatement
	|embeddedStat=EmbeddedStatement
	);

DeclarationStatement returns DeclarationStatment:
	{DeclarationStatment}
	(
	localVariableDeclaration=LocalVariableDeclaration 
	| localCOnstant=LocalConstantDeclaration 
	) SEMICOLON;

LocalConstantDeclaration returns LocalconstantDeclaration:
	{LocalconstantDeclaration}
	'const' (tipo=Type)  constDeclarator=ConstantDeclarator( COMMA constDeclarators+=ConstantDeclarator)*;

LabeledStatement returns LabeledStatement:
	{LabeledStatement}
	(id=Identifier) DOISPONTOS stat=Statement;

EmbeddedStatement returns EmbeddedStatement:
	{EmbeddedStatement}
	 (maybeEmpty=MaybeEmptyBlock
	| statExp=StatementExpression
	| selectionStat=SelectionStatement
	| iterationStat=IterationStatement
	| jumpStat=JumpStatement
	| tryStat=TryStatement
	| ('checked' | 'unchecked') block=Block
	| lockStat=LockStatement
	| usingStat=UsingStatement);

UsingStatement returns UsingStatement:
	{UsingStatement} ('using' PARENTESQ resourcAquisition=ResourceAquisition PARENTDIR embeddedStat=EmbeddedStatement);

ResourceAquisition returns ResourceAquisition:
	LocalVariableDeclaration | Expression;

LocalVariableDeclaration returns LocalVariableDeclaration:
	{LocalVariableDeclaration} (tipo=Type) variable=VariableDeclarator (COMMA variables+=VariableDeclarator )* ;

LockStatement returns LockStatement:
	{LockStatement} 'lock' PARENTESQ exp=Expression PARENTDIR embeddedStat=EmbeddedStatement;

TryStatement returns TryStatement:
	{TryStatement} 'try' (block=Block) ((catchClauses=CatchClauses (finally=FinallyClause)?) | (finallyClause=FinallyClause));

FinallyClause returns FinallyClause:
	{FinallyClause} 'finally' (block=Block);

CatchClauses returns CatchClauses:
	{CatchClauses} ((speciCatchClause+=SpecificCatchClause)+ (genCatchClause=GeneralCatchClause)? | (specCatchClause+=SpecificCatchClause)* => genCatchClause=GeneralCatchClause);

GeneralCatchClause returns GeneralCatchclause:
	{GeneralCatchclause} 'catch' block=Block;

SpecificCatchClause returns SpecificCatchClause:
	{SpecificCatchClause} 'catch' PARENTESQ (classType=BuiltInClassType | qualiId=QualifiedIdentifier) id=Identifier? PARENTDIR block=Block;

JumpStatement returns JumpStatement:
	{JumpStatement} 
	(breakStat=BreakStatement
	| continueStat=ContinueStatement
	| gotoStat=GotoStatement
	| returnStat=ReturnStatement
	| throwStat=ThrowStatement);

ThrowStatement returns ThrowStatement:
	{ThrowStatement} 'throw' expression=Expression? SEMICOLON ;

ReturnStatement returns ReturnStatement:
	{ReturnStatement} ('return' expression=Expression? SEMICOLON);

GotoStatement returns GotoStatement:
	{GotoStatement} ('goto' id=Identifier SEMICOLON 'goto' 'case' expression=Expression SEMICOLON 'goto' 'default' SEMICOLON);

ContinueStatement returns ContinueStatement:
	{ContinueStatement} 'continue' SEMICOLON;

BreakStatement returns BreakStatement:
	{BreakStatement} 'break' SEMICOLON;

IterationStatement returns IterationStatement:
	{IterationStatement}(
	whileStatement=WhileStatement 
	| doStatement=DoStatement 
	| forStatement=ForStatement 
	| foreachStatement=ForeachStatement);

ForeachStatement returns ForeachStatement:
	{ForeachStatement}('foreach' PARENTESQ tipo=Type id=Identifier 'in' expression=Expression PARENTDIR embeddedStatement=EmbeddedStatement);

ForStatement returns ForStatement:
	{ForStatement}('for' PARENTESQ forInitializer+=ForInitializer? SEMICOLON expression+=Expression? SEMICOLON statementExpressionList+=StatementExpressionList? PARENTDIR embeddedStatement=EmbeddedStatement);

ForInitializer returns ForInitializer:
	{ForInitializer}(localVariableDeclaration=LocalVariableDeclaration 
	| statementExpressionList=StatementExpressionList);

StatementExpressionList returns StatementExpressionList:
	{StatementExpressionList}
	list=StatementExpression  (COMMA lists+=StatementExpression)*;

StatementExpression returns StatementExpression:
	{StatementExpression}
	( 'new' tipo=Type PARENTESQ argumentList=ArgumentList PARENTDIR 
	|(primaryExpression=PrimaryExpression ((PARENTESQ argumentList=ArgumentList PARENTDIR) | (incrimentDecrement=INCREMENT_DECREMENT))) 
	| unaryExpression=UnaryExpression assignementOperator=ASSIGNEMENT_OPERATOR expression=Expression 
	| incrimentDecrement=INCREMENT_DECREMENT primaryExpression=PrimaryExpression);


DoStatement returns DoStatement:
	{DoStatement}('do' embeddedStatement=EmbeddedStatement 'while' PARENTESQ expression=Expression PARENTDIR SEMICOLON);

WhileStatement returns WhileStatement:
	{WhileStatement}'while' PARENTESQ expression=Expression PARENTDIR embeddedStatement=EmbeddedStatement;

SelectionStatement returns SelectionStatement:
	{SelectionStatement}(ifStatement=IfStatement | switchStatement=SwitchStatement);

SwitchStatement returns SwitchStatement:
	{SwitchStatement}('switch' PARENTESQ expression=Expression PARENTDIR LEFT_CURLY_BRACKETS switchSection+=SwitchSection* RIGHT_CURLY_BRACKETS);

SwitchSection returns SwitchSection:
	{SwitchSection}(switchlabel+=SwitchLabel+ statement+=Statement+);

SwitchLabel returns SwitchLabel:
	{SwitchLabel}('case' expression=Expression |'default') DOISPONTOS;

IfStatement returns IfStatement:
	{IfStatement}('if' PARENTESQ expression=Expression PARENTDIR embeddedStatement=EmbeddedStatement elsePart=ElsePart?);

ElsePart returns ElsePart:
	{ElsePart}('else' embeddedStatement=EmbeddedStatement);

Block returns Block:
	{Block}(LEFT_CURLY_BRACKETS statement+=Statement* RIGHT_CURLY_BRACKETS);

MaybeEmptyBlock returns MaybeEmptyBlock:
	Block|{MaybeEmptyBlock} SEMICOLON
	;

//TERMINAIS
terminal  LETTER : ('a'..'z' |  'A'..'Z');
terminal ID: LETTER (LETTER | DIGIT)*;
terminal HEX_DIGIT:('0'..'9') | (('A'..'F') | ('a'..'f'));
terminal STRING	: 
			'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\')* | !('\\'|'"')*) '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
terminal EXPRESSION_EQUALITY_OPERATOR:'=='|'!=';
terminal MOD: '%';
terminal MENORIGUAL : "<=";
terminal  MAIORIGUAL : ">=";
terminal MULTIP : "*";
terminal  DIVISAO : "/";
terminal EXPRESSION_SHIFT_OPERATOR:	"<<"|">>";
terminal RANK_SPECIFIER: COLCHETEESQ COMMA* COLCHETEDIR;
terminal INCREMENT_DECREMENT: "++"|"--";
terminal LESS_THAN:	'<';
terminal GREATER_THAN: '>';
terminal BAR: '|';
terminal AMPERSAND: '&';
terminal ESCAPE_SEQUENCE:	'\\' ("'" | '"' | "\\" | '0' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v');
terminal ASSIGNEMENT_OPERATOR:
	SIMPLE_ASSIGNEMT 
	|ADDTIVE_ASSIGNEMT 
	|SUBTRACTIVE_ASSIGNMENT 
	|ATTRIBUTION_MULTIPLICATIVE 
	|DIVISION_ASSIGNMENT
	|ASSIGNMENT_MODULE
	|AND_ASSIGNEMENT 
	|OR_ASSIGNEMENT
	|LEFT_SHIFT_ASSIGNMENT 
	|RIGHT_SHIFT_ASSIGNMENT;
terminal fragment  RIGHT_SHIFT_ASSIGNMENT:'>>='; 	
terminal fragment  LEFT_SHIFT_ASSIGNMENT:'<<='; 	
terminal fragment OR_ASSIGNEMENT:'^=';	
terminal fragment AND_ASSIGNEMENT:'&=';
terminal fragment ASSIGNMENT_MODULE:'%=';	
terminal fragment DIVISION_ASSIGNMENT:'/=';	
terminal fragment ATTRIBUTION_MULTIPLICATIVE:'*=';
terminal fragment SUBTRACTIVE_ASSIGNMENT:'-=';
terminal fragment ADDTIVE_ASSIGNEMT:'+=';
terminal fragment SIMPLE_ASSIGNEMT:'='; 
terminal SEMICOLON : ";";
terminal COMMA : ",";
terminal LEFT_CURLY_BRACKETS:'{'; 
terminal RIGHT_CURLY_BRACKETS:'}';
terminal PONTO : ".";
terminal DOISPONTOS : ":";
terminal PARENTESQ : "(";
terminal PARENTDIR : ")";
terminal COLCHETEESQ : "[";
terminal COLCHETEDIR : ']';
terminal CHAPEU : '^';
terminal fragment DIGIT : ('0'..'9');
terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal ML_COMMENT:'/*' -> '*/';
terminal NEW_LINE:	('\r'|'n')+;
terminal WS:(' '|'\t'|'\r'|'\n')+;