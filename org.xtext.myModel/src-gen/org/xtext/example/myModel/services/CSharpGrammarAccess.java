/*
* generated by Xtext
*/
package org.xtext.example.myModel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CSharpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cInputsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInputsInputParserRuleCall_0 = (RuleCall)cInputsAssignment.eContents().get(0);
		
		//Model:
		//	inputs?=Input;
		public ParserRule getRule() { return rule; }

		//inputs?=Input
		public Assignment getInputsAssignment() { return cInputsAssignment; }

		//Input
		public RuleCall getInputsInputParserRuleCall_0() { return cInputsInputParserRuleCall_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final RuleCall cInputSectionPartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Input:
		//	InputSectionPart;
		public ParserRule getRule() { return rule; }

		//InputSectionPart
		public RuleCall getInputSectionPartParserRuleCall() { return cInputSectionPartParserRuleCall; }
	}

	public class InputSectionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputSectionPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInputElementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cNEW_LINETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cPPDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////LEXICA
		//InputSectionPart:
		//	InputElement* NEW_LINE | PPDirective;
		public ParserRule getRule() { return rule; }

		//InputElement* NEW_LINE | PPDirective
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputElement* NEW_LINE
		public Group getGroup_0() { return cGroup_0; }

		//InputElement*
		public RuleCall getInputElementParserRuleCall_0_0() { return cInputElementParserRuleCall_0_0; }

		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_0_1() { return cNEW_LINETerminalRuleCall_0_1; }

		//PPDirective
		public RuleCall getPPDirectiveParserRuleCall_1() { return cPPDirectiveParserRuleCall_1; }
	}

	public class PPDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPPDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPPConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PPDirective:
		//	PPDeclaration | / *
		// |PPLine
		// |PPDiagnostic
		// |PPRegion * / PPConditional;
		public ParserRule getRule() { return rule; }

		//PPDeclaration | / *
		// |PPLine
		// |PPDiagnostic
		// |PPRegion * / PPConditional
		public Alternatives getAlternatives() { return cAlternatives; }

		//PPDeclaration
		public RuleCall getPPDeclarationParserRuleCall_0() { return cPPDeclarationParserRuleCall_0; }

		/// *
		// |PPLine
		// |PPDiagnostic
		// |PPRegion * / PPConditional
		public RuleCall getPPConditionalParserRuleCall_1() { return cPPConditionalParserRuleCall_1; }
	}

	public class PPConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPIfSectionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPElifSectionsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPPElseSectionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPPEndifParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//PPConditional:
		//	WS* PPIfSection PPElifSections? => PPElseSection? PPEndif;
		public ParserRule getRule() { return rule; }

		//WS* PPIfSection PPElifSections? => PPElseSection? PPEndif
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//PPIfSection
		public RuleCall getPPIfSectionParserRuleCall_1() { return cPPIfSectionParserRuleCall_1; }

		//PPElifSections?
		public RuleCall getPPElifSectionsParserRuleCall_2() { return cPPElifSectionsParserRuleCall_2; }

		//=> PPElseSection?
		public RuleCall getPPElseSectionParserRuleCall_3() { return cPPElseSectionParserRuleCall_3; }

		//PPEndif
		public RuleCall getPPEndifParserRuleCall_4() { return cPPEndifParserRuleCall_4; }
	}

	public class PPEndifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPEndif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPPNewLineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPEndif:
		//	"endif" PPNewLine;
		public ParserRule getRule() { return rule; }

		//"endif" PPNewLine
		public Group getGroup() { return cGroup; }

		//"endif"
		public Keyword getEndifKeyword_0() { return cEndifKeyword_0; }

		//PPNewLine
		public RuleCall getPPNewLineParserRuleCall_1() { return cPPNewLineParserRuleCall_1; }
	}

	public class PPElseSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPElseSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPPNewLineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPElseSection:
		//	"else" PPNewLine WS* //ConditionalSection? 
		//;
		public ParserRule getRule() { return rule; }

		//"else" PPNewLine WS* //ConditionalSection?
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//PPNewLine
		public RuleCall getPPNewLineParserRuleCall_1() { return cPPNewLineParserRuleCall_1; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
	}

	public class PPElifSectionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPElifSections");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPElifSectionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPElifSections2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPElifSections:
		//	PPElifSection PPElifSections2;
		public ParserRule getRule() { return rule; }

		//PPElifSection PPElifSections2
		public Group getGroup() { return cGroup; }

		//PPElifSection
		public RuleCall getPPElifSectionParserRuleCall_0() { return cPPElifSectionParserRuleCall_0; }

		//PPElifSections2
		public RuleCall getPPElifSections2ParserRuleCall_1() { return cPPElifSections2ParserRuleCall_1; }
	}

	public class PPElifSections2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPElifSections2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPElifSectionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPElifSections2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPElifSections2:
		//	(PPElifSection PPElifSections2)*;
		public ParserRule getRule() { return rule; }

		//(PPElifSection PPElifSections2)*
		public Group getGroup() { return cGroup; }

		//PPElifSection
		public RuleCall getPPElifSectionParserRuleCall_0() { return cPPElifSectionParserRuleCall_0; }

		//PPElifSections2
		public RuleCall getPPElifSections2ParserRuleCall_1() { return cPPElifSections2ParserRuleCall_1; }
	}

	public class PPElifSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPElifSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPPNewLineParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//PPElifSection:
		//	"elif" WS* PPExpression PPNewLine WS* //ConditionalSection?
		//;
		public ParserRule getRule() { return rule; }

		//=> "elif" WS* PPExpression PPNewLine WS* //ConditionalSection?
		public Group getGroup() { return cGroup; }

		//=> "elif"
		public Keyword getElifKeyword_0() { return cElifKeyword_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//PPExpression
		public RuleCall getPPExpressionParserRuleCall_2() { return cPPExpressionParserRuleCall_2; }

		//PPNewLine
		public RuleCall getPPNewLineParserRuleCall_3() { return cPPNewLineParserRuleCall_3; }

		//WS*
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }
	}

	public class PPIfSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPIfSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPPNewLineParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//PPIfSection:
		//	"if" WS* PPExpression PPNewLine WS* //ConditionalSection?
		//;
		public ParserRule getRule() { return rule; }

		//"if" WS* PPExpression PPNewLine WS* //ConditionalSection?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//PPExpression
		public RuleCall getPPExpressionParserRuleCall_2() { return cPPExpressionParserRuleCall_2; }

		//PPNewLine
		public RuleCall getPPNewLineParserRuleCall_3() { return cPPNewLineParserRuleCall_3; }

		//WS*
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }
	}

	public class PPExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPExpression");
		private final RuleCall cPPOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PPExpression:
		//	PPOrExpression;
		public ParserRule getRule() { return rule; }

		//PPOrExpression
		public RuleCall getPPOrExpressionParserRuleCall() { return cPPOrExpressionParserRuleCall; }
	}

	public class PPOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPOrExpression2ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPOrExpression:
		//	PPAndExpression WS* PPOrExpression2;
		public ParserRule getRule() { return rule; }

		//PPAndExpression WS* PPOrExpression2
		public Group getGroup() { return cGroup; }

		//PPAndExpression
		public RuleCall getPPAndExpressionParserRuleCall_0() { return cPPAndExpressionParserRuleCall_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//PPOrExpression2
		public RuleCall getPPOrExpression2ParserRuleCall_2() { return cPPOrExpression2ParserRuleCall_2; }
	}

	public class PPOrExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPOrExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPAndExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPPOrExpression2ParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PPOrExpression2:
		//	("||" WS* PPAndExpression PPOrExpression2)*;
		public ParserRule getRule() { return rule; }

		//(=> "||" WS* PPAndExpression PPOrExpression2)*
		public Group getGroup() { return cGroup; }

		//=> "||"
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//PPAndExpression
		public RuleCall getPPAndExpressionParserRuleCall_2() { return cPPAndExpressionParserRuleCall_2; }

		//PPOrExpression2
		public RuleCall getPPOrExpression2ParserRuleCall_3() { return cPPOrExpression2ParserRuleCall_3; }
	}

	public class PPAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPAndExpression2ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPAndExpression:
		//	PPEqualityExpression WS* PPAndExpression2;
		public ParserRule getRule() { return rule; }

		//PPEqualityExpression WS* PPAndExpression2
		public Group getGroup() { return cGroup; }

		//PPEqualityExpression
		public RuleCall getPPEqualityExpressionParserRuleCall_0() { return cPPEqualityExpressionParserRuleCall_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//PPAndExpression2
		public RuleCall getPPAndExpression2ParserRuleCall_2() { return cPPAndExpression2ParserRuleCall_2; }
	}

	public class PPAndExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPAndExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPEqualityExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPPAndExpression2ParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PPAndExpression2:
		//	("&&" WS* PPEqualityExpression PPAndExpression2)*;
		public ParserRule getRule() { return rule; }

		//(=> "&&" WS* PPEqualityExpression PPAndExpression2)*
		public Group getGroup() { return cGroup; }

		//=> "&&"
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//PPEqualityExpression
		public RuleCall getPPEqualityExpressionParserRuleCall_2() { return cPPEqualityExpressionParserRuleCall_2; }

		//PPAndExpression2
		public RuleCall getPPAndExpression2ParserRuleCall_3() { return cPPAndExpression2ParserRuleCall_3; }
	}

	public class PPEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPPUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPPEqualityExpression2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PPEqualityExpression:
		//	PPUnaryExpression PPEqualityExpression2*;
		public ParserRule getRule() { return rule; }

		//PPUnaryExpression PPEqualityExpression2*
		public Group getGroup() { return cGroup; }

		//PPUnaryExpression
		public RuleCall getPPUnaryExpressionParserRuleCall_0() { return cPPUnaryExpressionParserRuleCall_0; }

		//PPEqualityExpression2*
		public RuleCall getPPEqualityExpression2ParserRuleCall_1() { return cPPEqualityExpression2ParserRuleCall_1; }
	}

	public class PPEqualityExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPEqualityExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPPUnaryExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPPEqualityExpression2ParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PPEqualityExpression2:
		//	("==" | "!=") WS* PPUnaryExpression PPEqualityExpression2;
		public ParserRule getRule() { return rule; }

		//("==" | "!=") WS* PPUnaryExpression PPEqualityExpression2
		public Group getGroup() { return cGroup; }

		//"==" | "!="
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_0() { return cEqualsSignEqualsSignKeyword_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_0_1() { return cExclamationMarkEqualsSignKeyword_0_1; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//PPUnaryExpression
		public RuleCall getPPUnaryExpressionParserRuleCall_2() { return cPPUnaryExpressionParserRuleCall_2; }

		//PPEqualityExpression2
		public RuleCall getPPEqualityExpression2ParserRuleCall_3() { return cPPEqualityExpression2ParserRuleCall_3; }
	}

	public class PPUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPPPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPPUnaryExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PPUnaryExpression:
		//	PPPrimaryExpression | "!" PPUnaryExpression;
		public ParserRule getRule() { return rule; }

		//PPPrimaryExpression | "!" PPUnaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PPPrimaryExpression
		public RuleCall getPPPrimaryExpressionParserRuleCall_0() { return cPPPrimaryExpressionParserRuleCall_0; }

		//"!" PPUnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }

		//PPUnaryExpression
		public RuleCall getPPUnaryExpressionParserRuleCall_1_1() { return cPPUnaryExpressionParserRuleCall_1_1; }
	}

	public class PPPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalSymbolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cPPExpressionParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//PPPrimaryExpression:
		//	"true" | "false" | ConditionalSymbol | "(" WS* PPExpression WS* ")";
		public ParserRule getRule() { return rule; }

		//"true" | "false" | ConditionalSymbol | "(" WS* PPExpression WS* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }

		//ConditionalSymbol
		public RuleCall getConditionalSymbolParserRuleCall_2() { return cConditionalSymbolParserRuleCall_2; }

		//"(" WS* PPExpression WS* ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3_1() { return cWSTerminalRuleCall_3_1; }

		//PPExpression
		public RuleCall getPPExpressionParserRuleCall_3_2() { return cPPExpressionParserRuleCall_3_2; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3_3() { return cWSTerminalRuleCall_3_3; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class PPDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cDefineKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cUndefKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cConditionalSymbolParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cPPNewLineParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		/// *
		//ConditionalSection:
		//	InputSectionPart+
		//    |SkippedSectionPart+
		//;
		//
		/// *
		//SkippedSectionPart:
		//	SkippedCharacters? NEW_LINE
		//    |PPDirective
		//;
		//
		//SkippedCharacters:
		//	 WS? NotNumberSign InputCharacter*
		//;
		//
		//InputCharacter:
		//	('\n'|'\r')* ('\r'? '\n')?// ERRADO??
		//;
		//
		//NotNumberSign:
		//	STRING // ERRADO?
		//;
		// * / PPDeclaration:
		//	WS? "#" WS? ("define" | "undef") WS ConditionalSymbol PPNewLine;
		public ParserRule getRule() { return rule; }

		//WS? "#" WS? ("define" | "undef") WS ConditionalSymbol PPNewLine
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//"define" | "undef"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"define"
		public Keyword getDefineKeyword_3_0() { return cDefineKeyword_3_0; }

		//"undef"
		public Keyword getUndefKeyword_3_1() { return cUndefKeyword_3_1; }

		//WS
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//ConditionalSymbol
		public RuleCall getConditionalSymbolParserRuleCall_5() { return cConditionalSymbolParserRuleCall_5; }

		//PPNewLine
		public RuleCall getPPNewLineParserRuleCall_6() { return cPPNewLineParserRuleCall_6; }
	}

	public class PPNewLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPNewLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNEW_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PPNewLine:
		//	WS* SL_COMMENT? NEW_LINE;
		public ParserRule getRule() { return rule; }

		//WS* SL_COMMENT? NEW_LINE
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }

		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_2() { return cNEW_LINETerminalRuleCall_2; }
	}

	public class ConditionalSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalSymbol");
		private final RuleCall cIdentifierOrKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConditionalSymbol:
		//	IdentifierOrKeyword;
		public ParserRule getRule() { return rule; }

		//IdentifierOrKeyword
		public RuleCall getIdentifierOrKeywordParserRuleCall() { return cIdentifierOrKeywordParserRuleCall; }
	}

	public class InputElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTokenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InputElement:
		//	WS | Comment | Token;
		public ParserRule getRule() { return rule; }

		//WS | Comment | Token
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }

		//Token
		public RuleCall getTokenParserRuleCall_2() { return cTokenParserRuleCall_2; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCharacterLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOPERATOR_OR_PUNCTUATORTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Token:
		//	ID | Keywords | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | OPERATOR_OR_PUNCTUATOR;
		public ParserRule getRule() { return rule; }

		//ID | Keywords | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | OPERATOR_OR_PUNCTUATOR
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Keywords
		public RuleCall getKeywordsParserRuleCall_1() { return cKeywordsParserRuleCall_1; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_2() { return cIntegerLiteralParserRuleCall_2; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_3() { return cRealLiteralParserRuleCall_3; }

		//CharacterLiteral
		public RuleCall getCharacterLiteralParserRuleCall_4() { return cCharacterLiteralParserRuleCall_4; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_5() { return cStringLiteralParserRuleCall_5; }

		//OPERATOR_OR_PUNCTUATOR
		public RuleCall getOPERATOR_OR_PUNCTUATORTerminalRuleCall_6() { return cOPERATOR_OR_PUNCTUATORTerminalRuleCall_6; }
	}

	public class KeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBaseKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBreakKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cByteKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCaseKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCatchKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCharKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCheckedKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cClassKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cConstKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cContinueKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDecimalKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cDefaultKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cDelegateKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cDoKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cDoubleKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cElseKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cEnumKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cEventKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cExplicitKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cExternKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cFalseKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cFinallyKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cFixedKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cFloatKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cForKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cForeachKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cGotoKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cIfKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cImplicitKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cInKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cIntKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cInterfaceKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cInternalKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cIsKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cLockKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cLongKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cNamespaceKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cNewKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cNullKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cObjectKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cOperatorKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cOutKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cOverrideKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cParamsKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cPrivateKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cProtectedKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cPublicKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cReadonlyKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cRefKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cReturnKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cSbyteKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cSealedKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cShortKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cSizeofKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cStackallocKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cStaticKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cStringKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cStructKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cSwitchKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cThisKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cThrowKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cTrueKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cTryKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cTypeofKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cUintKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		private final Keyword cUlongKeyword_68 = (Keyword)cAlternatives.eContents().get(68);
		private final Keyword cUncheckedKeyword_69 = (Keyword)cAlternatives.eContents().get(69);
		private final Keyword cUnsafeKeyword_70 = (Keyword)cAlternatives.eContents().get(70);
		private final Keyword cUshortKeyword_71 = (Keyword)cAlternatives.eContents().get(71);
		private final Keyword cUsingKeyword_72 = (Keyword)cAlternatives.eContents().get(72);
		private final Keyword cVirtualKeyword_73 = (Keyword)cAlternatives.eContents().get(73);
		private final Keyword cVoidKeyword_74 = (Keyword)cAlternatives.eContents().get(74);
		private final Keyword cVolatileKeyword_75 = (Keyword)cAlternatives.eContents().get(75);
		private final Keyword cWhileKeyword_76 = (Keyword)cAlternatives.eContents().get(76);
		
		//Keywords:
		//	"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
		//	"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
		//	| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
		//	"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
		//	"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
		//	"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
		//	"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" |
		//	"while";
		public ParserRule getRule() { return rule; }

		//"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
		//"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
		//| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
		//"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
		//"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
		//"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
		//"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//"base"
		public Keyword getBaseKeyword_2() { return cBaseKeyword_2; }

		//"bool"
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }

		//"break"
		public Keyword getBreakKeyword_4() { return cBreakKeyword_4; }

		//"byte"
		public Keyword getByteKeyword_5() { return cByteKeyword_5; }

		//"case"
		public Keyword getCaseKeyword_6() { return cCaseKeyword_6; }

		//"catch"
		public Keyword getCatchKeyword_7() { return cCatchKeyword_7; }

		//"char"
		public Keyword getCharKeyword_8() { return cCharKeyword_8; }

		//"checked"
		public Keyword getCheckedKeyword_9() { return cCheckedKeyword_9; }

		//"class"
		public Keyword getClassKeyword_10() { return cClassKeyword_10; }

		//"const"
		public Keyword getConstKeyword_11() { return cConstKeyword_11; }

		//"continue"
		public Keyword getContinueKeyword_12() { return cContinueKeyword_12; }

		//"decimal"
		public Keyword getDecimalKeyword_13() { return cDecimalKeyword_13; }

		//"default"
		public Keyword getDefaultKeyword_14() { return cDefaultKeyword_14; }

		//"delegate"
		public Keyword getDelegateKeyword_15() { return cDelegateKeyword_15; }

		//"do"
		public Keyword getDoKeyword_16() { return cDoKeyword_16; }

		//"double"
		public Keyword getDoubleKeyword_17() { return cDoubleKeyword_17; }

		//"else"
		public Keyword getElseKeyword_18() { return cElseKeyword_18; }

		//"enum"
		public Keyword getEnumKeyword_19() { return cEnumKeyword_19; }

		//"event"
		public Keyword getEventKeyword_20() { return cEventKeyword_20; }

		//"explicit"
		public Keyword getExplicitKeyword_21() { return cExplicitKeyword_21; }

		//"extern"
		public Keyword getExternKeyword_22() { return cExternKeyword_22; }

		//"false"
		public Keyword getFalseKeyword_23() { return cFalseKeyword_23; }

		//"finally"
		public Keyword getFinallyKeyword_24() { return cFinallyKeyword_24; }

		//"fixed"
		public Keyword getFixedKeyword_25() { return cFixedKeyword_25; }

		//"float"
		public Keyword getFloatKeyword_26() { return cFloatKeyword_26; }

		//"for"
		public Keyword getForKeyword_27() { return cForKeyword_27; }

		//"foreach"
		public Keyword getForeachKeyword_28() { return cForeachKeyword_28; }

		//"goto"
		public Keyword getGotoKeyword_29() { return cGotoKeyword_29; }

		//"if"
		public Keyword getIfKeyword_30() { return cIfKeyword_30; }

		//"implicit"
		public Keyword getImplicitKeyword_31() { return cImplicitKeyword_31; }

		//"in"
		public Keyword getInKeyword_32() { return cInKeyword_32; }

		//"int"
		public Keyword getIntKeyword_33() { return cIntKeyword_33; }

		//"interface"
		public Keyword getInterfaceKeyword_34() { return cInterfaceKeyword_34; }

		//"internal"
		public Keyword getInternalKeyword_35() { return cInternalKeyword_35; }

		//"is"
		public Keyword getIsKeyword_36() { return cIsKeyword_36; }

		//"lock"
		public Keyword getLockKeyword_37() { return cLockKeyword_37; }

		//"long"
		public Keyword getLongKeyword_38() { return cLongKeyword_38; }

		//"namespace"
		public Keyword getNamespaceKeyword_39() { return cNamespaceKeyword_39; }

		//"new"
		public Keyword getNewKeyword_40() { return cNewKeyword_40; }

		//"null"
		public Keyword getNullKeyword_41() { return cNullKeyword_41; }

		//"object"
		public Keyword getObjectKeyword_42() { return cObjectKeyword_42; }

		//"operator"
		public Keyword getOperatorKeyword_43() { return cOperatorKeyword_43; }

		//"out"
		public Keyword getOutKeyword_44() { return cOutKeyword_44; }

		//"override"
		public Keyword getOverrideKeyword_45() { return cOverrideKeyword_45; }

		//"params"
		public Keyword getParamsKeyword_46() { return cParamsKeyword_46; }

		//"private"
		public Keyword getPrivateKeyword_47() { return cPrivateKeyword_47; }

		//"protected"
		public Keyword getProtectedKeyword_48() { return cProtectedKeyword_48; }

		//"public"
		public Keyword getPublicKeyword_49() { return cPublicKeyword_49; }

		//"readonly"
		public Keyword getReadonlyKeyword_50() { return cReadonlyKeyword_50; }

		//"ref"
		public Keyword getRefKeyword_51() { return cRefKeyword_51; }

		//"return"
		public Keyword getReturnKeyword_52() { return cReturnKeyword_52; }

		//"sbyte"
		public Keyword getSbyteKeyword_53() { return cSbyteKeyword_53; }

		//"sealed"
		public Keyword getSealedKeyword_54() { return cSealedKeyword_54; }

		//"short"
		public Keyword getShortKeyword_55() { return cShortKeyword_55; }

		//"sizeof"
		public Keyword getSizeofKeyword_56() { return cSizeofKeyword_56; }

		//"stackalloc"
		public Keyword getStackallocKeyword_57() { return cStackallocKeyword_57; }

		//"static"
		public Keyword getStaticKeyword_58() { return cStaticKeyword_58; }

		//"string"
		public Keyword getStringKeyword_59() { return cStringKeyword_59; }

		//"struct"
		public Keyword getStructKeyword_60() { return cStructKeyword_60; }

		//"switch"
		public Keyword getSwitchKeyword_61() { return cSwitchKeyword_61; }

		//"this"
		public Keyword getThisKeyword_62() { return cThisKeyword_62; }

		//"throw"
		public Keyword getThrowKeyword_63() { return cThrowKeyword_63; }

		//"true"
		public Keyword getTrueKeyword_64() { return cTrueKeyword_64; }

		//"try"
		public Keyword getTryKeyword_65() { return cTryKeyword_65; }

		//"typeof"
		public Keyword getTypeofKeyword_66() { return cTypeofKeyword_66; }

		//"uint"
		public Keyword getUintKeyword_67() { return cUintKeyword_67; }

		//"ulong"
		public Keyword getUlongKeyword_68() { return cUlongKeyword_68; }

		//"unchecked"
		public Keyword getUncheckedKeyword_69() { return cUncheckedKeyword_69; }

		//"unsafe"
		public Keyword getUnsafeKeyword_70() { return cUnsafeKeyword_70; }

		//"ushort"
		public Keyword getUshortKeyword_71() { return cUshortKeyword_71; }

		//"using"
		public Keyword getUsingKeyword_72() { return cUsingKeyword_72; }

		//"virtual"
		public Keyword getVirtualKeyword_73() { return cVirtualKeyword_73; }

		//"void"
		public Keyword getVoidKeyword_74() { return cVoidKeyword_74; }

		//"volatile"
		public Keyword getVolatileKeyword_75() { return cVolatileKeyword_75; }

		//"while"
		public Keyword getWhileKeyword_76() { return cWhileKeyword_76; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IntegerLiteral:
		//	("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?;
		public ParserRule getRule() { return rule; }

		//("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?
		public Alternatives getAlternatives() { return cAlternatives; }

		//("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX
		public Group getGroup_0() { return cGroup_0; }

		//"0x" | "0X"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"0x"
		public Keyword getXKeyword_0_0_0() { return cXKeyword_0_0_0; }

		//"0X"
		public Keyword getXKeyword_0_0_1() { return cXKeyword_0_0_1; }

		//HEX_DIGIT+
		public RuleCall getHEX_DIGITTerminalRuleCall_0_1() { return cHEX_DIGITTerminalRuleCall_0_1; }

		//INTEGER_TYPE_SUFFIX
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2; }

		//INT INTEGER_TYPE_SUFFIX?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//INTEGER_TYPE_SUFFIX?
		public RuleCall getINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1() { return cINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExponentPartParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExponentPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cREAL_TYPE_SUFFIXTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//RealLiteral:
		//	INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX;
		public ParserRule getRule() { return rule; }

		//INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT "." INT ExponentPart? REAL_TYPE_SUFFIX?
		public Group getGroup_0() { return cGroup_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }

		//ExponentPart?
		public RuleCall getExponentPartParserRuleCall_0_3() { return cExponentPartParserRuleCall_0_3; }

		//REAL_TYPE_SUFFIX?
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_0_4() { return cREAL_TYPE_SUFFIXTerminalRuleCall_0_4; }

		//INT ExponentPart REAL_TYPE_SUFFIX?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//ExponentPart
		public RuleCall getExponentPartParserRuleCall_1_1() { return cExponentPartParserRuleCall_1_1; }

		//REAL_TYPE_SUFFIX?
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_1_2() { return cREAL_TYPE_SUFFIXTerminalRuleCall_1_2; }

		//INT REAL_TYPE_SUFFIX
		public Group getGroup_2() { return cGroup_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//REAL_TYPE_SUFFIX
		public RuleCall getREAL_TYPE_SUFFIXTerminalRuleCall_2_1() { return cREAL_TYPE_SUFFIXTerminalRuleCall_2_1; }
	}

	public class ExponentPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExponentPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ExponentPart:
		//	"e" OPERATOR_OR_SIGN? INT | "E" OPERATOR_OR_SIGN? INT;
		public ParserRule getRule() { return rule; }

		//"e" OPERATOR_OR_SIGN? INT | "E" OPERATOR_OR_SIGN? INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"e" OPERATOR_OR_SIGN? INT
		public Group getGroup_0() { return cGroup_0; }

		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }

		//OPERATOR_OR_SIGN?
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_0_1() { return cOPERATOR_OR_SIGNTerminalRuleCall_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }

		//"E" OPERATOR_OR_SIGN? INT
		public Group getGroup_1() { return cGroup_1; }

		//"E"
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }

		//OPERATOR_OR_SIGN?
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_1_1() { return cOPERATOR_OR_SIGNTerminalRuleCall_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}

	public class CharacterLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharacterLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCharacterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CharacterLiteral:
		//	"\'" Character "\'";
		public ParserRule getRule() { return rule; }

		//"\'" Character "\'"
		public Group getGroup() { return cGroup; }

		//"\'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }

		//Character
		public RuleCall getCharacterParserRuleCall_1() { return cCharacterParserRuleCall_1; }

		//"\'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}

	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Character");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEscapeSequenceParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Character:
		//	SINGLE_CHARACTER | "\\" EscapeSequence;
		public ParserRule getRule() { return rule; }

		//SINGLE_CHARACTER | "\\" EscapeSequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//"\\" EscapeSequence
		public Group getGroup_1() { return cGroup_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_0() { return cReverseSolidusKeyword_1_0; }

		//EscapeSequence
		public RuleCall getEscapeSequenceParserRuleCall_1_1() { return cEscapeSequenceParserRuleCall_1_1; }
	}

	public class EscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapeSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cESCAPE_SEQUENCETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHexadecimalEscapeSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnicodeCharacterEscapeSequenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EscapeSequence:
		//	ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence;
		public ParserRule getRule() { return rule; }

		//ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//ESCAPE_SEQUENCE
		public RuleCall getESCAPE_SEQUENCETerminalRuleCall_0() { return cESCAPE_SEQUENCETerminalRuleCall_0; }

		//HexadecimalEscapeSequence
		public RuleCall getHexadecimalEscapeSequenceParserRuleCall_1() { return cHexadecimalEscapeSequenceParserRuleCall_1; }

		//UnicodeCharacterEscapeSequence
		public RuleCall getUnicodeCharacterEscapeSequenceParserRuleCall_2() { return cUnicodeCharacterEscapeSequenceParserRuleCall_2; }
	}

	public class UnicodeCharacterEscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnicodeCharacterEscapeSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_7 = (RuleCall)cGroup_1.eContents().get(7);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1_8 = (RuleCall)cGroup_1.eContents().get(8);
		
		//UnicodeCharacterEscapeSequence:
		//	"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		//	HEX_DIGIT HEX_DIGIT;
		public ParserRule getRule() { return rule; }

		//"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		//HEX_DIGIT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup_0() { return cGroup_0; }

		//"u"
		public Keyword getUKeyword_0_0() { return cUKeyword_0_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_1() { return cHEX_DIGITTerminalRuleCall_0_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_2() { return cHEX_DIGITTerminalRuleCall_0_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_3() { return cHEX_DIGITTerminalRuleCall_0_3; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_0_4() { return cHEX_DIGITTerminalRuleCall_0_4; }

		//"U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup_1() { return cGroup_1; }

		//"U"
		public Keyword getUKeyword_1_0() { return cUKeyword_1_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_1() { return cHEX_DIGITTerminalRuleCall_1_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_2() { return cHEX_DIGITTerminalRuleCall_1_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_3() { return cHEX_DIGITTerminalRuleCall_1_3; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_4() { return cHEX_DIGITTerminalRuleCall_1_4; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_5() { return cHEX_DIGITTerminalRuleCall_1_5; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_6() { return cHEX_DIGITTerminalRuleCall_1_6; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_7() { return cHEX_DIGITTerminalRuleCall_1_7; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1_8() { return cHEX_DIGITTerminalRuleCall_1_8; }
	}

	public class HexadecimalEscapeSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexadecimalEscapeSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//HexadecimalEscapeSequence:
		//	"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?;
		public ParserRule getRule() { return rule; }

		//"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
		public Group getGroup() { return cGroup; }

		//"x"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_1() { return cHEX_DIGITTerminalRuleCall_1; }

		//(HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
		public Group getGroup_2() { return cGroup_2; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2_0() { return cHEX_DIGITTerminalRuleCall_2_0; }

		//(HEX_DIGIT HEX_DIGIT?)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2_1_0() { return cHEX_DIGITTerminalRuleCall_2_1_0; }

		//HEX_DIGIT?
		public RuleCall getHEX_DIGITTerminalRuleCall_2_1_1() { return cHEX_DIGITTerminalRuleCall_2_1_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRegularStringCharacterParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVerbatimStringCharacterParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//StringLiteral:
		//	"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\"";
		public ParserRule getRule() { return rule; }

		//"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\""
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\"" RegularStringCharacter* "\""
		public Group getGroup_0() { return cGroup_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_0_0() { return cQuotationMarkKeyword_0_0; }

		//RegularStringCharacter*
		public RuleCall getRegularStringCharacterParserRuleCall_0_1() { return cRegularStringCharacterParserRuleCall_0_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_0_2() { return cQuotationMarkKeyword_0_2; }

		//"@" VerbatimStringCharacter* "\""
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//VerbatimStringCharacter*
		public RuleCall getVerbatimStringCharacterParserRuleCall_1_1() { return cVerbatimStringCharacterParserRuleCall_1_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_1_2() { return cQuotationMarkKeyword_1_2; }
	}

	public class VerbatimStringCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerbatimStringCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VerbatimStringCharacter: //Any character except "
		//	SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE;
		public ParserRule getRule() { return rule; }

		////Any character except "
		//SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		////Any character except "
		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//QUOTE_ESCAPE_SEQUENCE
		public RuleCall getQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1() { return cQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1; }
	}

	public class RegularStringCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularStringCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSINGLE_CHARACTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cESCAPE_SEQUENCETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//RegularStringCharacter: //Any character except " (U+0022), \ (U+005C), and new-line-character
		//	SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE;
		public ParserRule getRule() { return rule; }

		////Any character except " (U+0022), \ (U+005C), and new-line-character
		//SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		////Any character except " (U+0022), \ (U+005C), and new-line-character
		//SINGLE_CHARACTER
		public RuleCall getSINGLE_CHARACTERTerminalRuleCall_0() { return cSINGLE_CHARACTERTerminalRuleCall_0; }

		//"\\" ESCAPE_SEQUENCE
		public Group getGroup_1() { return cGroup_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_0() { return cReverseSolidusKeyword_1_0; }

		//ESCAPE_SEQUENCE
		public RuleCall getESCAPE_SEQUENCETerminalRuleCall_1_1() { return cESCAPE_SEQUENCETerminalRuleCall_1_1; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cML_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Comment:
		//	SL_COMMENT | ML_COMMENT;
		public ParserRule getRule() { return rule; }

		//SL_COMMENT | ML_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_0() { return cSL_COMMENTTerminalRuleCall_0; }

		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_1() { return cML_COMMENTTerminalRuleCall_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAvailableIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Identifier:
		//	AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER;
		public ParserRule getRule() { return rule; }

		//AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER
		public Alternatives getAlternatives() { return cAlternatives; }

		//AvailableIdentifier
		public RuleCall getAvailableIdentifierParserRuleCall_0() { return cAvailableIdentifierParserRuleCall_0; }

		//"@" IDENTIFIER_START_CHARACTER
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//IDENTIFIER_START_CHARACTER
		public RuleCall getIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1() { return cIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1; }
	}

	public class AvailableIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AvailableIdentifier");
		private final RuleCall cIdentifierOrKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AvailableIdentifier:
		//	IdentifierOrKeyword;
		public ParserRule getRule() { return rule; }

		//IdentifierOrKeyword
		public RuleCall getIdentifierOrKeywordParserRuleCall() { return cIdentifierOrKeywordParserRuleCall; }
	}

	public class IdentifierOrKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierOrKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIER_START_CHARACTERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierPartCharacterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IdentifierOrKeyword:
		//	IDENTIFIER_START_CHARACTER IdentifierPartCharacter*;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER_START_CHARACTER IdentifierPartCharacter*
		public Group getGroup() { return cGroup; }

		//IDENTIFIER_START_CHARACTER
		public RuleCall getIDENTIFIER_START_CHARACTERTerminalRuleCall_0() { return cIDENTIFIER_START_CHARACTERTerminalRuleCall_0; }

		//IdentifierPartCharacter*
		public RuleCall getIdentifierPartCharacterParserRuleCall_1() { return cIdentifierPartCharacterParserRuleCall_1; }
	}

	public class IdentifierPartCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierPartCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IdentifierPartCharacter:
		//	LETTER | / *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT;
		public ParserRule getRule() { return rule; }

		//LETTER | / *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }

		/// *
		//    |connecting-character
		//    |combining-character
		//    |formatting-character * / INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsingDirectiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cGlobalAttributesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNamespaceMemberDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////FIM LEXICA 
		////SINTAXE
		//CompilationUnit:
		//	UsingDirective* GlobalAttributes NamespaceMemberDeclaration*;
		public ParserRule getRule() { return rule; }

		//UsingDirective* GlobalAttributes NamespaceMemberDeclaration*
		public Group getGroup() { return cGroup; }

		//UsingDirective*
		public RuleCall getUsingDirectiveParserRuleCall_0() { return cUsingDirectiveParserRuleCall_0; }

		//GlobalAttributes
		public RuleCall getGlobalAttributesParserRuleCall_1() { return cGlobalAttributesParserRuleCall_1; }

		//NamespaceMemberDeclaration*
		public RuleCall getNamespaceMemberDeclarationParserRuleCall_2() { return cNamespaceMemberDeclarationParserRuleCall_2; }
	}

	public class NamespaceMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamespaceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamespaceMemberDeclaration:
		//	NamespaceDeclaration | TypeDeclaration;
		public ParserRule getRule() { return rule; }

		//NamespaceDeclaration | TypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//NamespaceDeclaration
		public RuleCall getNamespaceDeclarationParserRuleCall_0() { return cNamespaceDeclarationParserRuleCall_0; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_1() { return cTypeDeclarationParserRuleCall_1; }
	}

	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNamespaceBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NamespaceDeclaration:
		//	"namespace" QualifiedIdentifier NamespaceBody ";"?;
		public ParserRule getRule() { return rule; }

		//"namespace" QualifiedIdentifier NamespaceBody ";"?
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_1() { return cQualifiedIdentifierParserRuleCall_1; }

		//NamespaceBody
		public RuleCall getNamespaceBodyParserRuleCall_2() { return cNamespaceBodyParserRuleCall_2; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class NamespaceBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUsingDirectiveParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNamespaceMemberDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NamespaceBody:
		//	"{" UsingDirective* NamespaceMemberDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"{" UsingDirective* NamespaceMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//UsingDirective*
		public RuleCall getUsingDirectiveParserRuleCall_1() { return cUsingDirectiveParserRuleCall_1; }

		//NamespaceMemberDeclaration*
		public RuleCall getNamespaceMemberDeclarationParserRuleCall_2() { return cNamespaceMemberDeclarationParserRuleCall_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cStructDeclarationParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cInterfaceDeclarationParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cEnumDeclarationParserRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cDelegateDeclarationParserRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		
		//TypeDeclaration:
		//	ClassDeclaration | Modifier* (StructDeclaration | InterfaceDeclaration | EnumDeclaration | DelegateDeclaration);
		public ParserRule getRule() { return rule; }

		//ClassDeclaration | Modifier* (StructDeclaration | InterfaceDeclaration | EnumDeclaration | DelegateDeclaration)
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }

		//Modifier* (StructDeclaration | InterfaceDeclaration | EnumDeclaration | DelegateDeclaration)
		public Group getGroup_1() { return cGroup_1; }

		//Modifier*
		public RuleCall getModifierParserRuleCall_1_0() { return cModifierParserRuleCall_1_0; }

		//StructDeclaration | InterfaceDeclaration | EnumDeclaration | DelegateDeclaration
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//StructDeclaration
		public RuleCall getStructDeclarationParserRuleCall_1_1_0() { return cStructDeclarationParserRuleCall_1_1_0; }

		//InterfaceDeclaration
		public RuleCall getInterfaceDeclarationParserRuleCall_1_1_1() { return cInterfaceDeclarationParserRuleCall_1_1_1; }

		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_1_1_2() { return cEnumDeclarationParserRuleCall_1_1_2; }

		//DelegateDeclaration
		public RuleCall getDelegateDeclarationParserRuleCall_1_1_3() { return cDelegateDeclarationParserRuleCall_1_1_3; }
	}

	public class DelegateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelegateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelegateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeOrVoidParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cFormalParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DelegateDeclaration:
		//	"delegate" TypeOrVoid Identifier "(" FormalParameterList? ")" ";";
		public ParserRule getRule() { return rule; }

		//"delegate" TypeOrVoid Identifier "(" FormalParameterList? ")" ";"
		public Group getGroup() { return cGroup; }

		//"delegate"
		public Keyword getDelegateKeyword_0() { return cDelegateKeyword_0; }

		//TypeOrVoid
		public RuleCall getTypeOrVoidParserRuleCall_1() { return cTypeOrVoidParserRuleCall_1; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//FormalParameterList?
		public RuleCall getFormalParameterListParserRuleCall_4() { return cFormalParameterListParserRuleCall_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIntegralTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cEnumBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumDeclaration:
		//	"enum" Identifier (":" IntegralType)? EnumBody ";"?;
		public ParserRule getRule() { return rule; }

		//"enum" Identifier (":" IntegralType)? EnumBody ";"?
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }

		//(":" IntegralType)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_2_1() { return cIntegralTypeParserRuleCall_2_1; }

		//EnumBody
		public RuleCall getEnumBodyParserRuleCall_3() { return cEnumBodyParserRuleCall_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cQualifiedIdentifierListParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfaceDeclaration:
		//	"struct" Identifier (":" QualifiedIdentifierList)? InterfaceBody ";"?;
		public ParserRule getRule() { return rule; }

		//"struct" Identifier (":" QualifiedIdentifierList)? InterfaceBody ";"?
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }

		//(":" QualifiedIdentifierList)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//QualifiedIdentifierList
		public RuleCall getQualifiedIdentifierListParserRuleCall_2_1() { return cQualifiedIdentifierListParserRuleCall_2_1; }

		//InterfaceBody
		public RuleCall getInterfaceBodyParserRuleCall_3() { return cInterfaceBodyParserRuleCall_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Modifier:
		//	"new" | "public" | "protected" | "internal" | "private";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class InterfaceBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInterfaceMemberDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InterfaceBody:
		//	"{" InterfaceMemberDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"{" InterfaceMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//InterfaceMemberDeclaration*
		public RuleCall getInterfaceMemberDeclarationParserRuleCall_1() { return cInterfaceMemberDeclarationParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class InterfaceMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cInterfaceMethodDeclarationParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cInterfaceEventDeclarationParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final RuleCall cInterfaceIndexerDeclarationParserRuleCall_1_2_1_0 = (RuleCall)cAlternatives_1_2_1.eContents().get(0);
		private final RuleCall cInterfacePropertyDeclarationParserRuleCall_1_2_1_1 = (RuleCall)cAlternatives_1_2_1.eContents().get(1);
		
		//InterfaceMemberDeclaration:
		//	"new"? (InterfaceMethodDeclaration | InterfaceEventDeclaration | Type (InterfaceIndexerDeclaration |
		//	InterfacePropertyDeclaration));
		public ParserRule getRule() { return rule; }

		//"new"? (InterfaceMethodDeclaration | InterfaceEventDeclaration | Type (InterfaceIndexerDeclaration |
		//InterfacePropertyDeclaration))
		public Group getGroup() { return cGroup; }

		//"new"?
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//InterfaceMethodDeclaration | InterfaceEventDeclaration | Type (InterfaceIndexerDeclaration |
		//InterfacePropertyDeclaration)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//InterfaceMethodDeclaration
		public RuleCall getInterfaceMethodDeclarationParserRuleCall_1_0() { return cInterfaceMethodDeclarationParserRuleCall_1_0; }

		//InterfaceEventDeclaration
		public RuleCall getInterfaceEventDeclarationParserRuleCall_1_1() { return cInterfaceEventDeclarationParserRuleCall_1_1; }

		//Type (InterfaceIndexerDeclaration | InterfacePropertyDeclaration)
		public Group getGroup_1_2() { return cGroup_1_2; }

		//Type
		public RuleCall getTypeParserRuleCall_1_2_0() { return cTypeParserRuleCall_1_2_0; }

		//InterfaceIndexerDeclaration | InterfacePropertyDeclaration
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }

		//InterfaceIndexerDeclaration
		public RuleCall getInterfaceIndexerDeclarationParserRuleCall_1_2_1_0() { return cInterfaceIndexerDeclarationParserRuleCall_1_2_1_0; }

		//InterfacePropertyDeclaration
		public RuleCall getInterfacePropertyDeclarationParserRuleCall_1_2_1_1() { return cInterfacePropertyDeclarationParserRuleCall_1_2_1_1; }
	}

	public class InterfaceIndexerDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceIndexerDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFormalParameterListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cInterfaceAccessorsParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InterfaceIndexerDeclaration:
		//	"this" "[" FormalParameterList "]" "{" InterfaceAccessors "}";
		public ParserRule getRule() { return rule; }

		//"this" "[" FormalParameterList "]" "{" InterfaceAccessors "}"
		public Group getGroup() { return cGroup; }

		//"this"
		public Keyword getThisKeyword_0() { return cThisKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//FormalParameterList
		public RuleCall getFormalParameterListParserRuleCall_2() { return cFormalParameterListParserRuleCall_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//InterfaceAccessors
		public RuleCall getInterfaceAccessorsParserRuleCall_5() { return cInterfaceAccessorsParserRuleCall_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class InterfaceEventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceEventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InterfaceEventDeclaration:
		//	"event" Type Identifier ";";
		public ParserRule getRule() { return rule; }

		//"event" Type Identifier ";"
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InterfacePropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfacePropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cInterfaceAccessorsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InterfacePropertyDeclaration:
		//	Identifier "{" InterfaceAccessors "}";
		public ParserRule getRule() { return rule; }

		//Identifier "{" InterfaceAccessors "}"
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//InterfaceAccessors
		public RuleCall getInterfaceAccessorsParserRuleCall_2() { return cInterfaceAccessorsParserRuleCall_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class InterfaceAccessorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceAccessors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGetKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final RuleCall cAttributesParserRuleCall_1_0_2_0 = (RuleCall)cGroup_1_0_2.eContents().get(0);
		private final Keyword cSetKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0_2_2 = (Keyword)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSetKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final RuleCall cAttributesParserRuleCall_1_1_2_0 = (RuleCall)cGroup_1_1_2.eContents().get(0);
		private final Keyword cGetKeyword_1_1_2_1 = (Keyword)cGroup_1_1_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		
		//InterfaceAccessors:
		//	Attributes ("get" ";" (Attributes "set" ";")? | "set" ";" (Attributes "get" ";")?);
		public ParserRule getRule() { return rule; }

		//Attributes ("get" ";" (Attributes "set" ";")? | "set" ";" (Attributes "get" ";")?)
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//"get" ";" (Attributes "set" ";")? | "set" ";" (Attributes "get" ";")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"get" ";" (Attributes "set" ";")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"get"
		public Keyword getGetKeyword_1_0_0() { return cGetKeyword_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }

		//(Attributes "set" ";")?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_1_0_2_0() { return cAttributesParserRuleCall_1_0_2_0; }

		//"set"
		public Keyword getSetKeyword_1_0_2_1() { return cSetKeyword_1_0_2_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0_2_2() { return cSemicolonKeyword_1_0_2_2; }

		//"set" ";" (Attributes "get" ";")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"set"
		public Keyword getSetKeyword_1_1_0() { return cSetKeyword_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }

		//(Attributes "get" ";")?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_1_1_2_0() { return cAttributesParserRuleCall_1_1_2_0; }

		//"get"
		public Keyword getGetKeyword_1_1_2_1() { return cGetKeyword_1_1_2_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_2_2() { return cSemicolonKeyword_1_1_2_2; }
	}

	public class InterfaceMethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeOrVoidParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cFormalParameterListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InterfaceMethodDeclaration:
		//	TypeOrVoid Identifier "(" FormalParameterList? ")" ";";
		public ParserRule getRule() { return rule; }

		//TypeOrVoid Identifier "(" FormalParameterList? ")" ";"
		public Group getGroup() { return cGroup; }

		//TypeOrVoid
		public RuleCall getTypeOrVoidParserRuleCall_0() { return cTypeOrVoidParserRuleCall_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//FormalParameterList?
		public RuleCall getFormalParameterListParserRuleCall_3() { return cFormalParameterListParserRuleCall_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class StructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cQualifiedIdentifierListParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cStructBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructDeclaration:
		//	"struct" Identifier (":" QualifiedIdentifierList)? StructBody ";"?;
		public ParserRule getRule() { return rule; }

		//"struct" Identifier (":" QualifiedIdentifierList)? StructBody ";"?
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }

		//(":" QualifiedIdentifierList)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//QualifiedIdentifierList
		public RuleCall getQualifiedIdentifierListParserRuleCall_2_1() { return cQualifiedIdentifierListParserRuleCall_2_1; }

		//StructBody
		public RuleCall getStructBodyParserRuleCall_3() { return cStructBodyParserRuleCall_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class StructBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStructMemberDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StructBody:
		//	"{" StructMemberDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"{" StructMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//StructMemberDeclaration*
		public RuleCall getStructMemberDeclarationParserRuleCall_1() { return cStructMemberDeclarationParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class StructMemberDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructMemberDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStructMemberDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStructMemberDeclarations2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StructMemberDeclarations:
		//	StructMemberDeclaration StructMemberDeclarations2*;
		public ParserRule getRule() { return rule; }

		//StructMemberDeclaration StructMemberDeclarations2*
		public Group getGroup() { return cGroup; }

		//StructMemberDeclaration
		public RuleCall getStructMemberDeclarationParserRuleCall_0() { return cStructMemberDeclarationParserRuleCall_0; }

		//StructMemberDeclarations2*
		public RuleCall getStructMemberDeclarations2ParserRuleCall_1() { return cStructMemberDeclarations2ParserRuleCall_1; }
	}

	public class StructMemberDeclarations2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructMemberDeclarations2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStructMemberDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStructMemberDeclarations2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StructMemberDeclarations2:
		//	StructMemberDeclaration StructMemberDeclarations2;
		public ParserRule getRule() { return rule; }

		//StructMemberDeclaration StructMemberDeclarations2
		public Group getGroup() { return cGroup; }

		//StructMemberDeclaration
		public RuleCall getStructMemberDeclarationParserRuleCall_0() { return cStructMemberDeclarationParserRuleCall_0; }

		//StructMemberDeclarations2
		public RuleCall getStructMemberDeclarations2ParserRuleCall_1() { return cStructMemberDeclarations2ParserRuleCall_1; }
	}

	public class StructMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEventDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIndexerDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOperatorDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cConstructorDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStaticConstructorDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTypeDeclarationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//StructMemberDeclaration:
		//	ConstantDeclaration | FieldDeclaration | MethodDeclaration | PropertyDeclaration | EventDeclaration |
		//	IndexerDeclaration | OperatorDeclaration | ConstructorDeclaration | StaticConstructorDeclaration | TypeDeclaration;
		public ParserRule getRule() { return rule; }

		//ConstantDeclaration | FieldDeclaration | MethodDeclaration | PropertyDeclaration | EventDeclaration | IndexerDeclaration
		//| OperatorDeclaration | ConstructorDeclaration | StaticConstructorDeclaration | TypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstantDeclaration
		public RuleCall getConstantDeclarationParserRuleCall_0() { return cConstantDeclarationParserRuleCall_0; }

		//FieldDeclaration
		public RuleCall getFieldDeclarationParserRuleCall_1() { return cFieldDeclarationParserRuleCall_1; }

		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_2() { return cMethodDeclarationParserRuleCall_2; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_3() { return cPropertyDeclarationParserRuleCall_3; }

		//EventDeclaration
		public RuleCall getEventDeclarationParserRuleCall_4() { return cEventDeclarationParserRuleCall_4; }

		//IndexerDeclaration
		public RuleCall getIndexerDeclarationParserRuleCall_5() { return cIndexerDeclarationParserRuleCall_5; }

		//OperatorDeclaration
		public RuleCall getOperatorDeclarationParserRuleCall_6() { return cOperatorDeclarationParserRuleCall_6; }

		//ConstructorDeclaration
		public RuleCall getConstructorDeclarationParserRuleCall_7() { return cConstructorDeclarationParserRuleCall_7; }

		//StaticConstructorDeclaration
		public RuleCall getStaticConstructorDeclarationParserRuleCall_8() { return cStaticConstructorDeclarationParserRuleCall_8; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_9() { return cTypeDeclarationParserRuleCall_9; }
	}

	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cClassBaseParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cClassBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassDeclaration:
		//	ClassModifier* "class" Identifier ClassBase? ClassBody ";"?;
		public ParserRule getRule() { return rule; }

		//ClassModifier* "class" Identifier ClassBase? ClassBody ";"?
		public Group getGroup() { return cGroup; }

		//ClassModifier*
		public RuleCall getClassModifierParserRuleCall_0() { return cClassModifierParserRuleCall_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }

		//ClassBase?
		public RuleCall getClassBaseParserRuleCall_3() { return cClassBaseParserRuleCall_3; }

		//ClassBody
		public RuleCall getClassBodyParserRuleCall_4() { return cClassBodyParserRuleCall_4; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ClassBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cClassMemberDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClassBody:
		//	"{" ClassMemberDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"{" ClassMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//ClassMemberDeclaration*
		public RuleCall getClassMemberDeclarationParserRuleCall_1() { return cClassMemberDeclarationParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ClassMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cConstantDeclarationParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cFieldDeclarationParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cPropertyDeclarationParserRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cEventDeclarationParserRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cIndexerDeclarationParserRuleCall_1_1_4 = (RuleCall)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cOperatorDeclarationParserRuleCall_1_1_5 = (RuleCall)cAlternatives_1_1.eContents().get(5);
		private final RuleCall cConstructorDeclarationParserRuleCall_1_1_6 = (RuleCall)cAlternatives_1_1.eContents().get(6);
		private final RuleCall cDestructorDeclarationParserRuleCall_1_1_7 = (RuleCall)cAlternatives_1_1.eContents().get(7);
		private final RuleCall cStaticConstructorDeclarationParserRuleCall_1_1_8 = (RuleCall)cAlternatives_1_1.eContents().get(8);
		private final RuleCall cTypeDeclarationParserRuleCall_1_1_9 = (RuleCall)cAlternatives_1_1.eContents().get(9);
		
		//ClassMemberDeclaration:
		//	MethodDeclaration | Attributes (ConstantDeclaration | FieldDeclaration | PropertyDeclaration | EventDeclaration |
		//	IndexerDeclaration | OperatorDeclaration | ConstructorDeclaration | DestructorDeclaration |
		//	StaticConstructorDeclaration | TypeDeclaration);
		public ParserRule getRule() { return rule; }

		//MethodDeclaration | Attributes (ConstantDeclaration | FieldDeclaration | PropertyDeclaration | EventDeclaration |
		//IndexerDeclaration | OperatorDeclaration | ConstructorDeclaration | DestructorDeclaration |
		//StaticConstructorDeclaration | TypeDeclaration)
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_0() { return cMethodDeclarationParserRuleCall_0; }

		//Attributes (ConstantDeclaration | FieldDeclaration | PropertyDeclaration | EventDeclaration | IndexerDeclaration |
		//OperatorDeclaration | ConstructorDeclaration | DestructorDeclaration | StaticConstructorDeclaration | TypeDeclaration)
		public Group getGroup_1() { return cGroup_1; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_1_0() { return cAttributesParserRuleCall_1_0; }

		//ConstantDeclaration | FieldDeclaration | PropertyDeclaration | EventDeclaration | IndexerDeclaration |
		//OperatorDeclaration | ConstructorDeclaration | DestructorDeclaration | StaticConstructorDeclaration | TypeDeclaration
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//ConstantDeclaration
		public RuleCall getConstantDeclarationParserRuleCall_1_1_0() { return cConstantDeclarationParserRuleCall_1_1_0; }

		//FieldDeclaration
		public RuleCall getFieldDeclarationParserRuleCall_1_1_1() { return cFieldDeclarationParserRuleCall_1_1_1; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_1_1_2() { return cPropertyDeclarationParserRuleCall_1_1_2; }

		//EventDeclaration
		public RuleCall getEventDeclarationParserRuleCall_1_1_3() { return cEventDeclarationParserRuleCall_1_1_3; }

		//IndexerDeclaration
		public RuleCall getIndexerDeclarationParserRuleCall_1_1_4() { return cIndexerDeclarationParserRuleCall_1_1_4; }

		//OperatorDeclaration
		public RuleCall getOperatorDeclarationParserRuleCall_1_1_5() { return cOperatorDeclarationParserRuleCall_1_1_5; }

		//ConstructorDeclaration
		public RuleCall getConstructorDeclarationParserRuleCall_1_1_6() { return cConstructorDeclarationParserRuleCall_1_1_6; }

		//DestructorDeclaration
		public RuleCall getDestructorDeclarationParserRuleCall_1_1_7() { return cDestructorDeclarationParserRuleCall_1_1_7; }

		//StaticConstructorDeclaration
		public RuleCall getStaticConstructorDeclarationParserRuleCall_1_1_8() { return cStaticConstructorDeclarationParserRuleCall_1_1_8; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_1_1_9() { return cTypeDeclarationParserRuleCall_1_1_9; }
	}

	public class StaticConstructorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticConstructorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStaticConstructorModifiersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StaticConstructorDeclaration:
		//	StaticConstructorModifiers Identifier "(" //maybe-empty-block
		// ")";
		public ParserRule getRule() { return rule; }

		//StaticConstructorModifiers Identifier "(" //maybe-empty-block
		// ")"
		public Group getGroup() { return cGroup; }

		//StaticConstructorModifiers
		public RuleCall getStaticConstructorModifiersParserRuleCall_0() { return cStaticConstructorModifiersParserRuleCall_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		////maybe-empty-block
		// ")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class StaticConstructorModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticConstructorModifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExternKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cStaticKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStaticKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cExternKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StaticConstructorModifiers:
		//	"extern"? "static" | "static" "extern";
		public ParserRule getRule() { return rule; }

		//"extern"? "static" | "static" "extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"extern"? "static"
		public Group getGroup_0() { return cGroup_0; }

		//"extern"?
		public Keyword getExternKeyword_0_0() { return cExternKeyword_0_0; }

		//"static"
		public Keyword getStaticKeyword_0_1() { return cStaticKeyword_0_1; }

		//"static" "extern"
		public Group getGroup_1() { return cGroup_1; }

		//"static"
		public Keyword getStaticKeyword_1_0() { return cStaticKeyword_1_0; }

		//"extern"
		public Keyword getExternKeyword_1_1() { return cExternKeyword_1_1; }
	}

	public class DestructorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DestructorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DestructorDeclaration:
		//	"extern"? "~" Identifier "(" //maybe-empty-block
		// ")";
		public ParserRule getRule() { return rule; }

		//"extern"? "~" Identifier "(" //maybe-empty-block
		// ")"
		public Group getGroup() { return cGroup; }

		//"extern"?
		public Keyword getExternKeyword_0() { return cExternKeyword_0; }

		//"~"
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		////maybe-empty-block
		// ")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ConstructorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstructorModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstructorDeclaratorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ConstructorDeclaration:
		//	ConstructorModifier* //MaybeEmptyBlock
		//	ConstructorDeclarator;
		public ParserRule getRule() { return rule; }

		//ConstructorModifier* //MaybeEmptyBlock
		//ConstructorDeclarator
		public Group getGroup() { return cGroup; }

		//ConstructorModifier*
		public RuleCall getConstructorModifierParserRuleCall_0() { return cConstructorModifierParserRuleCall_0; }

		////MaybeEmptyBlock
		//ConstructorDeclarator
		public RuleCall getConstructorDeclaratorParserRuleCall_1() { return cConstructorDeclaratorParserRuleCall_1; }
	}

	public class ConstructorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFormalParameterListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cConstructorInitializerParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ConstructorDeclarator:
		//	Identifier "(" FormalParameterList? ")" ConstructorInitializer?;
		public ParserRule getRule() { return rule; }

		//Identifier "(" FormalParameterList? ")" ConstructorInitializer?
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//FormalParameterList?
		public RuleCall getFormalParameterListParserRuleCall_2() { return cFormalParameterListParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//ConstructorInitializer?
		public RuleCall getConstructorInitializerParserRuleCall_4() { return cConstructorInitializerParserRuleCall_4; }
	}

	public class ConstructorInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cBaseKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cArgumentListParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cThisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cArgumentListParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ConstructorInitializer:
		//	":" "base" "(" ArgumentList ")" | ":" "this" "(" ArgumentList ")";
		public ParserRule getRule() { return rule; }

		//":" "base" "(" ArgumentList ")" | ":" "this" "(" ArgumentList ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" "base" "(" ArgumentList ")"
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//"base"
		public Keyword getBaseKeyword_0_1() { return cBaseKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_0_3() { return cArgumentListParserRuleCall_0_3; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//":" "this" "(" ArgumentList ")"
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//"this"
		public Keyword getThisKeyword_1_1() { return cThisKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_1_3() { return cArgumentListParserRuleCall_1_3; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArgumentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ArgumentList:
		//	(Argument ",")*;
		public ParserRule getRule() { return rule; }

		//(Argument ",")*
		public Group getGroup() { return cGroup; }

		//Argument
		public RuleCall getArgumentParserRuleCall_0() { return cArgumentParserRuleCall_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final RuleCall cRefOrOutParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Expression	
		// Argument:
		//	RefOrOut?;
		public ParserRule getRule() { return rule; }

		//RefOrOut?
		public RuleCall getRefOrOutParserRuleCall() { return cRefOrOutParserRuleCall; }
	}

	public class RefOrOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefOrOut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//RefOrOut:
		//	"ref" | "out";
		public ParserRule getRule() { return rule; }

		//"ref" | "out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//"out"
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }
	}

	public class ConstructorModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProtectedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInternalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPrivateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExternKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ConstructorModifier:
		//	"public" | "protected" | "internal" | "private" | "extern";
		public ParserRule getRule() { return rule; }

		//"public" | "protected" | "internal" | "private" | "extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"protected"
		public Keyword getProtectedKeyword_1() { return cProtectedKeyword_1; }

		//"internal"
		public Keyword getInternalKeyword_2() { return cInternalKeyword_2; }

		//"private"
		public Keyword getPrivateKeyword_3() { return cPrivateKeyword_3; }

		//"extern"
		public Keyword getExternKeyword_4() { return cExternKeyword_4; }
	}

	public class OperatorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOperatorModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOperatorDeclaratorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OperatorDeclaration:
		//	OperatorModifier+ //MaybeEmptyBlock
		// OperatorDeclarator;
		public ParserRule getRule() { return rule; }

		//OperatorModifier+ //MaybeEmptyBlock
		// OperatorDeclarator
		public Group getGroup() { return cGroup; }

		//OperatorModifier+
		public RuleCall getOperatorModifierParserRuleCall_0() { return cOperatorModifierParserRuleCall_0; }

		////MaybeEmptyBlock
		// OperatorDeclarator
		public RuleCall getOperatorDeclaratorParserRuleCall_1() { return cOperatorDeclaratorParserRuleCall_1; }
	}

	public class OperatorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorDeclarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryOperatorDeclaratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryOperatorDeclaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConversionOperatorDeclaratorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OperatorDeclarator:
		//	UnaryOperatorDeclarator | BinaryOperatorDeclarator | ConversionOperatorDeclarator;
		public ParserRule getRule() { return rule; }

		//UnaryOperatorDeclarator | BinaryOperatorDeclarator | ConversionOperatorDeclarator
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnaryOperatorDeclarator
		public RuleCall getUnaryOperatorDeclaratorParserRuleCall_0() { return cUnaryOperatorDeclaratorParserRuleCall_0; }

		//BinaryOperatorDeclarator
		public RuleCall getBinaryOperatorDeclaratorParserRuleCall_1() { return cBinaryOperatorDeclaratorParserRuleCall_1; }

		//ConversionOperatorDeclarator
		public RuleCall getConversionOperatorDeclaratorParserRuleCall_2() { return cConversionOperatorDeclaratorParserRuleCall_2; }
	}

	public class ConversionOperatorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConversionOperatorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConversionKindParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cIdentifierParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConversionOperatorDeclarator:
		//	ConversionKind "operator" Type "(" Type Identifier ")";
		public ParserRule getRule() { return rule; }

		//ConversionKind "operator" Type "(" Type Identifier ")"
		public Group getGroup() { return cGroup; }

		//ConversionKind
		public RuleCall getConversionKindParserRuleCall_0() { return cConversionKindParserRuleCall_0; }

		//"operator"
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }

		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_5() { return cIdentifierParserRuleCall_5; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ConversionKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConversionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cImplicitKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExplicitKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ConversionKind:
		//	"implicit" | "explicit";
		public ParserRule getRule() { return rule; }

		//"implicit" | "explicit"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"implicit"
		public Keyword getImplicitKeyword_0() { return cImplicitKeyword_0; }

		//"explicit"
		public Keyword getExplicitKeyword_1() { return cExplicitKeyword_1; }
	}

	public class BinaryOperatorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperatorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cOverloadableBinaryOperatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cIdentifierParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cTypeParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cIdentifierParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BinaryOperatorDeclarator:
		//	Type "operator" OverloadableBinaryOperator "(" Type Identifier "," Type Identifier ")";
		public ParserRule getRule() { return rule; }

		//Type "operator" OverloadableBinaryOperator "(" Type Identifier "," Type Identifier ")"
		public Group getGroup() { return cGroup; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//"operator"
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }

		//OverloadableBinaryOperator
		public RuleCall getOverloadableBinaryOperatorParserRuleCall_2() { return cOverloadableBinaryOperatorParserRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_5() { return cIdentifierParserRuleCall_5; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//Type
		public RuleCall getTypeParserRuleCall_7() { return cTypeParserRuleCall_7; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_8() { return cIdentifierParserRuleCall_8; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class OverloadableBinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverloadableBinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final RuleCall cAMPERSANDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBARTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Keyword cCircumflexAccentKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignLessThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cEqualsSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExclamationMarkEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final RuleCall cGREATER_THANTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLESS_THANTerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final Keyword cGreaterThanSignEqualsSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cLessThanSignEqualsSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//OverloadableBinaryOperator:
		//	OPERATOR_OR_SIGN | "*" | "/" | "%" | AMPERSAND | BAR | "^" | "<<" | ">>" | "==" | "!=" | GREATER_THAN | LESS_THAN |
		//	">=" | "<=";
		public ParserRule getRule() { return rule; }

		//OPERATOR_OR_SIGN | "*" | "/" | "%" | AMPERSAND | BAR | "^" | "<<" | ">>" | "==" | "!=" | GREATER_THAN | LESS_THAN | ">="
		//| "<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//OPERATOR_OR_SIGN
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_0() { return cOPERATOR_OR_SIGNTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//"%"
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }

		//AMPERSAND
		public RuleCall getAMPERSANDTerminalRuleCall_4() { return cAMPERSANDTerminalRuleCall_4; }

		//BAR
		public RuleCall getBARTerminalRuleCall_5() { return cBARTerminalRuleCall_5; }

		//"^"
		public Keyword getCircumflexAccentKeyword_6() { return cCircumflexAccentKeyword_6; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_7() { return cLessThanSignLessThanSignKeyword_7; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_8() { return cGreaterThanSignGreaterThanSignKeyword_8; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_9() { return cEqualsSignEqualsSignKeyword_9; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_10() { return cExclamationMarkEqualsSignKeyword_10; }

		//GREATER_THAN
		public RuleCall getGREATER_THANTerminalRuleCall_11() { return cGREATER_THANTerminalRuleCall_11; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_12() { return cLESS_THANTerminalRuleCall_12; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_13() { return cGreaterThanSignEqualsSignKeyword_13; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_14() { return cLessThanSignEqualsSignKeyword_14; }
	}

	public class UnaryOperatorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperatorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cOverloadableUnaryOperatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cIdentifierParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnaryOperatorDeclarator:
		//	Type "operator" OverloadableUnaryOperator "(" Type Identifier ")";
		public ParserRule getRule() { return rule; }

		//Type "operator" OverloadableUnaryOperator "(" Type Identifier ")"
		public Group getGroup() { return cGroup; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//"operator"
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }

		//OverloadableUnaryOperator
		public RuleCall getOverloadableUnaryOperatorParserRuleCall_2() { return cOverloadableUnaryOperatorParserRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_5() { return cIdentifierParserRuleCall_5; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class OverloadableUnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverloadableUnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINCREMENT_DECREMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTrueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFalseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OverloadableUnaryOperator:
		//	OPERATOR_OR_SIGN | INCREMENT_DECREMENT | "!" | "~" | "true" | "false";
		public ParserRule getRule() { return rule; }

		//OPERATOR_OR_SIGN | INCREMENT_DECREMENT | "!" | "~" | "true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OPERATOR_OR_SIGN
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_0() { return cOPERATOR_OR_SIGNTerminalRuleCall_0; }

		//INCREMENT_DECREMENT
		public RuleCall getINCREMENT_DECREMENTTerminalRuleCall_1() { return cINCREMENT_DECREMENTTerminalRuleCall_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }

		//"~"
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }

		//"true"
		public Keyword getTrueKeyword_4() { return cTrueKeyword_4; }

		//"false"
		public Keyword getFalseKeyword_5() { return cFalseKeyword_5; }
	}

	public class OperatorModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStaticKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExternKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OperatorModifier:
		//	"public" | "static" | "extern";
		public ParserRule getRule() { return rule; }

		//"public" | "static" | "extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"static"
		public Keyword getStaticKeyword_1() { return cStaticKeyword_1; }

		//"extern"
		public Keyword getExternKeyword_2() { return cExternKeyword_2; }
	}

	public class IndexerDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexerDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIndexerModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIndexerDeclaratorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAccessorDeclarationsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IndexerDeclaration:
		//	IndexerModifier* IndexerDeclarator "{" AccessorDeclarations "}";
		public ParserRule getRule() { return rule; }

		//IndexerModifier* IndexerDeclarator "{" AccessorDeclarations "}"
		public Group getGroup() { return cGroup; }

		//IndexerModifier*
		public RuleCall getIndexerModifierParserRuleCall_0() { return cIndexerModifierParserRuleCall_0; }

		//IndexerDeclarator
		public RuleCall getIndexerDeclaratorParserRuleCall_1() { return cIndexerDeclaratorParserRuleCall_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//AccessorDeclarations
		public RuleCall getAccessorDeclarationsParserRuleCall_3() { return cAccessorDeclarationsParserRuleCall_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class IndexerDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexerDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cThisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final RuleCall cFormalParameterListParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cQualifiedIdentifierParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cThisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final RuleCall cFormalParameterListParserRuleCall_1_1_4 = (RuleCall)cGroup_1_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		//IndexerDeclarator:
		//	Type ("this" "[" FormalParameterList "]" | QualifiedIdentifier "." "this" "[" FormalParameterList "]");
		public ParserRule getRule() { return rule; }

		//Type ("this" "[" FormalParameterList "]" | QualifiedIdentifier "." "this" "[" FormalParameterList "]")
		public Group getGroup() { return cGroup; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//"this" "[" FormalParameterList "]" | QualifiedIdentifier "." "this" "[" FormalParameterList "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"this" "[" FormalParameterList "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"this"
		public Keyword getThisKeyword_1_0_0() { return cThisKeyword_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_1() { return cLeftSquareBracketKeyword_1_0_1; }

		//FormalParameterList
		public RuleCall getFormalParameterListParserRuleCall_1_0_2() { return cFormalParameterListParserRuleCall_1_0_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_3() { return cRightSquareBracketKeyword_1_0_3; }

		//QualifiedIdentifier "." "this" "[" FormalParameterList "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_1_1_0() { return cQualifiedIdentifierParserRuleCall_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//"this"
		public Keyword getThisKeyword_1_1_2() { return cThisKeyword_1_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_3() { return cLeftSquareBracketKeyword_1_1_3; }

		//FormalParameterList
		public RuleCall getFormalParameterListParserRuleCall_1_1_4() { return cFormalParameterListParserRuleCall_1_1_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_5() { return cRightSquareBracketKeyword_1_1_5; }
	}

	public class IndexerModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexerModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cVirtualKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSealedKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOverrideKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAbstractKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cExternKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//IndexerModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"virtual"
		public Keyword getVirtualKeyword_5() { return cVirtualKeyword_5; }

		//"sealed"
		public Keyword getSealedKeyword_6() { return cSealedKeyword_6; }

		//"override"
		public Keyword getOverrideKeyword_7() { return cOverrideKeyword_7; }

		//"abstract"
		public Keyword getAbstractKeyword_8() { return cAbstractKeyword_8; }

		//"extern"
		public Keyword getExternKeyword_9() { return cExternKeyword_9; }
	}

	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEventModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cGroup_3_0.eContents().get(0);
		private final RuleCall cVariableDeclaratorParserRuleCall_3_0_0_0 = (RuleCall)cGroup_3_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cQualifiedIdentifierParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final RuleCall cEventAccessorDeclarationsParserRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		
		//EventDeclaration:
		//	EventModifier* "event" Type ((VariableDeclarator ",")+ ";" | QualifiedIdentifier "{" EventAccessorDeclarations "}");
		public ParserRule getRule() { return rule; }

		//EventModifier* "event" Type ((VariableDeclarator ",")+ ";" | QualifiedIdentifier "{" EventAccessorDeclarations "}")
		public Group getGroup() { return cGroup; }

		//EventModifier*
		public RuleCall getEventModifierParserRuleCall_0() { return cEventModifierParserRuleCall_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }

		//(VariableDeclarator ",")+ ";" | QualifiedIdentifier "{" EventAccessorDeclarations "}"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//(VariableDeclarator ",")+ ";"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//(VariableDeclarator ",")+
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//VariableDeclarator
		public RuleCall getVariableDeclaratorParserRuleCall_3_0_0_0() { return cVariableDeclaratorParserRuleCall_3_0_0_0; }

		//","
		public Keyword getCommaKeyword_3_0_0_1() { return cCommaKeyword_3_0_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }

		//QualifiedIdentifier "{" EventAccessorDeclarations "}"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_3_1_0() { return cQualifiedIdentifierParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_1() { return cLeftCurlyBracketKeyword_3_1_1; }

		//EventAccessorDeclarations
		public RuleCall getEventAccessorDeclarationsParserRuleCall_3_1_2() { return cEventAccessorDeclarationsParserRuleCall_3_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_3() { return cRightCurlyBracketKeyword_3_1_3; }
	}

	public class EventAccessorDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventAccessorDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cAddAccessorDeclarationParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cAttributesParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cRemoveAccessorDeclarationParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cRemoveAccessorDeclarationParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cAttributesParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cAddAccessorDeclarationParserRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//EventAccessorDeclarations:
		//	Attributes (AddAccessorDeclaration Attributes RemoveAccessorDeclaration | RemoveAccessorDeclaration Attributes
		//	AddAccessorDeclaration);
		public ParserRule getRule() { return rule; }

		//Attributes (AddAccessorDeclaration Attributes RemoveAccessorDeclaration | RemoveAccessorDeclaration Attributes
		//AddAccessorDeclaration)
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//AddAccessorDeclaration Attributes RemoveAccessorDeclaration | RemoveAccessorDeclaration Attributes
		//AddAccessorDeclaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//AddAccessorDeclaration Attributes RemoveAccessorDeclaration
		public Group getGroup_1_0() { return cGroup_1_0; }

		//AddAccessorDeclaration
		public RuleCall getAddAccessorDeclarationParserRuleCall_1_0_0() { return cAddAccessorDeclarationParserRuleCall_1_0_0; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_1_0_1() { return cAttributesParserRuleCall_1_0_1; }

		//RemoveAccessorDeclaration
		public RuleCall getRemoveAccessorDeclarationParserRuleCall_1_0_2() { return cRemoveAccessorDeclarationParserRuleCall_1_0_2; }

		//RemoveAccessorDeclaration Attributes AddAccessorDeclaration
		public Group getGroup_1_1() { return cGroup_1_1; }

		//RemoveAccessorDeclaration
		public RuleCall getRemoveAccessorDeclarationParserRuleCall_1_1_0() { return cRemoveAccessorDeclarationParserRuleCall_1_1_0; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_1_1_1() { return cAttributesParserRuleCall_1_1_1; }

		//AddAccessorDeclaration
		public RuleCall getAddAccessorDeclarationParserRuleCall_1_1_2() { return cAddAccessorDeclarationParserRuleCall_1_1_2; }
	}

	public class RemoveAccessorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveAccessorDeclaration");
		private final Keyword cRemoveKeyword = (Keyword)rule.eContents().get(1);
		
		//RemoveAccessorDeclaration: //Block	
		// "remove";
		public ParserRule getRule() { return rule; }

		////Block	
		// "remove"
		public Keyword getRemoveKeyword() { return cRemoveKeyword; }
	}

	public class AddAccessorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddAccessorDeclaration");
		private final Keyword cAddKeyword = (Keyword)rule.eContents().get(1);
		
		/// *
		//Block:
		//	 "{" Statement* "}"
		//;
		// * / AddAccessorDeclaration: //Block
		// "add";
		public ParserRule getRule() { return rule; }

		////Block
		// "add"
		public Keyword getAddKeyword() { return cAddKeyword; }
	}

	public class EventModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVirtualKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSealedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOverrideKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAbstractKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExternKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//EventModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//	"extern";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//"extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//"virtual"
		public Keyword getVirtualKeyword_6() { return cVirtualKeyword_6; }

		//"sealed"
		public Keyword getSealedKeyword_7() { return cSealedKeyword_7; }

		//"override"
		public Keyword getOverrideKeyword_8() { return cOverrideKeyword_8; }

		//"abstract"
		public Keyword getAbstractKeyword_9() { return cAbstractKeyword_9; }

		//"extern"
		public Keyword getExternKeyword_10() { return cExternKeyword_10; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cQualifiedIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cAccessorDeclarationsParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyDeclaration:
		//	PropertyModifier* Type QualifiedIdentifier "{" AccessorDeclarations "}";
		public ParserRule getRule() { return rule; }

		//PropertyModifier* Type QualifiedIdentifier "{" AccessorDeclarations "}"
		public Group getGroup() { return cGroup; }

		//PropertyModifier*
		public RuleCall getPropertyModifierParserRuleCall_0() { return cPropertyModifierParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_2() { return cQualifiedIdentifierParserRuleCall_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//AccessorDeclarations
		public RuleCall getAccessorDeclarationsParserRuleCall_4() { return cAccessorDeclarationsParserRuleCall_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AccessorDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessorDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cGetAccessorDeclarationParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cAttributesParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cSetAccessorDeclarationParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cSetAccessorDeclarationParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cAttributesParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cGetAccessorDeclarationParserRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//AccessorDeclarations:
		//	Attributes (GetAccessorDeclaration Attributes SetAccessorDeclaration? | SetAccessorDeclaration Attributes
		//	GetAccessorDeclaration?);
		public ParserRule getRule() { return rule; }

		//Attributes (GetAccessorDeclaration Attributes SetAccessorDeclaration? | SetAccessorDeclaration Attributes
		//GetAccessorDeclaration?)
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//GetAccessorDeclaration Attributes SetAccessorDeclaration? | SetAccessorDeclaration Attributes GetAccessorDeclaration?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//GetAccessorDeclaration Attributes SetAccessorDeclaration?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//GetAccessorDeclaration
		public RuleCall getGetAccessorDeclarationParserRuleCall_1_0_0() { return cGetAccessorDeclarationParserRuleCall_1_0_0; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_1_0_1() { return cAttributesParserRuleCall_1_0_1; }

		//SetAccessorDeclaration?
		public RuleCall getSetAccessorDeclarationParserRuleCall_1_0_2() { return cSetAccessorDeclarationParserRuleCall_1_0_2; }

		//SetAccessorDeclaration Attributes GetAccessorDeclaration?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//SetAccessorDeclaration
		public RuleCall getSetAccessorDeclarationParserRuleCall_1_1_0() { return cSetAccessorDeclarationParserRuleCall_1_1_0; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_1_1_1() { return cAttributesParserRuleCall_1_1_1; }

		//GetAccessorDeclaration?
		public RuleCall getGetAccessorDeclarationParserRuleCall_1_1_2() { return cGetAccessorDeclarationParserRuleCall_1_1_2; }
	}

	public class SetAccessorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetAccessorDeclaration");
		private final Keyword cSetKeyword = (Keyword)rule.eContents().get(1);
		
		//SetAccessorDeclaration: //MaybeEmptyBlock	
		// "set";
		public ParserRule getRule() { return rule; }

		////MaybeEmptyBlock	
		// "set"
		public Keyword getSetKeyword() { return cSetKeyword; }
	}

	public class GetAccessorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetAccessorDeclaration");
		private final Keyword cGetKeyword = (Keyword)rule.eContents().get(1);
		
		//GetAccessorDeclaration: //MaybeEmptyBlock
		// "get";
		public ParserRule getRule() { return rule; }

		////MaybeEmptyBlock
		// "get"
		public Keyword getGetKeyword() { return cGetKeyword; }
	}

	public class PropertyModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVirtualKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSealedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOverrideKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAbstractKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExternKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//PropertyModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//	"extern";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//"extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//"virtual"
		public Keyword getVirtualKeyword_6() { return cVirtualKeyword_6; }

		//"sealed"
		public Keyword getSealedKeyword_7() { return cSealedKeyword_7; }

		//"override"
		public Keyword getOverrideKeyword_8() { return cOverrideKeyword_8; }

		//"abstract"
		public Keyword getAbstractKeyword_9() { return cAbstractKeyword_9; }

		//"extern"
		public Keyword getExternKeyword_10() { return cExternKeyword_10; }
	}

	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDeclaration");
		private final RuleCall cMethodHeaderParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodDeclaration: //MaybeEmptyBlock
		// MethodHeader;
		public ParserRule getRule() { return rule; }

		////MaybeEmptyBlock
		// MethodHeader
		public RuleCall getMethodHeaderParserRuleCall() { return cMethodHeaderParserRuleCall; }
	}

	public class MethodHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMethodModifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeOrVoidParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cQualifiedIdentifierParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cFormalParameterListParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MethodHeader:
		//	Attributes MethodModifier* TypeOrVoid QualifiedIdentifier "(" FormalParameterList? ")";
		public ParserRule getRule() { return rule; }

		//Attributes MethodModifier* TypeOrVoid QualifiedIdentifier "(" FormalParameterList? ")"
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//MethodModifier*
		public RuleCall getMethodModifierParserRuleCall_1() { return cMethodModifierParserRuleCall_1; }

		//TypeOrVoid
		public RuleCall getTypeOrVoidParserRuleCall_2() { return cTypeOrVoidParserRuleCall_2; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_3() { return cQualifiedIdentifierParserRuleCall_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//FormalParameterList?
		public RuleCall getFormalParameterListParserRuleCall_5() { return cFormalParameterListParserRuleCall_5; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class FormalParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFixedParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cParameterArrayParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cParameterArrayParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//FormalParameterList:
		//	FixedParameters ("," ParameterArray | ParameterArray);
		public ParserRule getRule() { return rule; }

		//FixedParameters ("," ParameterArray | ParameterArray)
		public Group getGroup() { return cGroup; }

		//FixedParameters
		public RuleCall getFixedParametersParserRuleCall_0() { return cFixedParametersParserRuleCall_0; }

		//"," ParameterArray | ParameterArray
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"," ParameterArray
		public Group getGroup_1_0() { return cGroup_1_0; }

		//","
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }

		//ParameterArray
		public RuleCall getParameterArrayParserRuleCall_1_0_1() { return cParameterArrayParserRuleCall_1_0_1; }

		//ParameterArray
		public RuleCall getParameterArrayParserRuleCall_1_1() { return cParameterArrayParserRuleCall_1_1; }
	}

	public class ParameterArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cParamsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cIdentifierParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ParameterArray:
		//	Attributes "params" ArrayType Identifier;
		public ParserRule getRule() { return rule; }

		//Attributes "params" ArrayType Identifier
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//"params"
		public Keyword getParamsKeyword_1() { return cParamsKeyword_1; }

		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_2() { return cArrayTypeParserRuleCall_2; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_3() { return cIdentifierParserRuleCall_3; }
	}

	public class FixedParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFixedParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FixedParameters:
		//	(FixedParameter ",")+;
		public ParserRule getRule() { return rule; }

		//(=> FixedParameter ",")+
		public Group getGroup() { return cGroup; }

		//=> FixedParameter
		public RuleCall getFixedParameterParserRuleCall_0() { return cFixedParameterParserRuleCall_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class FixedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FixedParameter:
		//	ParameterModifier? Type Identifier;
		public ParserRule getRule() { return rule; }

		//ParameterModifier? Type Identifier
		public Group getGroup() { return cGroup; }

		//ParameterModifier?
		public RuleCall getParameterModifierParserRuleCall_0() { return cParameterModifierParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }
	}

	public class ParameterModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ParameterModifier:
		//	"ref" | "out";
		public ParserRule getRule() { return rule; }

		//"ref" | "out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//"out"
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }
	}

	public class TypeOrVoidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeOrVoid");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TypeOrVoid:
		//	Type | "void";
		public ParserRule getRule() { return rule; }

		//Type | "void"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//"void"
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}

	public class MethodModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVirtualKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSealedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOverrideKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAbstractKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExternKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//MethodModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//	"extern";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
		//"extern"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//"virtual"
		public Keyword getVirtualKeyword_6() { return cVirtualKeyword_6; }

		//"sealed"
		public Keyword getSealedKeyword_7() { return cSealedKeyword_7; }

		//"override"
		public Keyword getOverrideKeyword_8() { return cOverrideKeyword_8; }

		//"abstract"
		public Keyword getAbstractKeyword_9() { return cAbstractKeyword_9; }

		//"extern"
		public Keyword getExternKeyword_10() { return cExternKeyword_10; }
	}

	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFieldModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVariableDeclaratorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FieldDeclaration:
		//	FieldModifier* Type (VariableDeclarator ",")+ ";";
		public ParserRule getRule() { return rule; }

		//FieldModifier* Type (VariableDeclarator ",")+ ";"
		public Group getGroup() { return cGroup; }

		//FieldModifier*
		public RuleCall getFieldModifierParserRuleCall_0() { return cFieldModifierParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//(VariableDeclarator ",")+
		public Group getGroup_2() { return cGroup_2; }

		//VariableDeclarator
		public RuleCall getVariableDeclaratorParserRuleCall_2_0() { return cVariableDeclaratorParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cVariableInitializerParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VariableDeclarator:
		//	Identifier Identifier "=" VariableInitializer;
		public ParserRule getRule() { return rule; }

		//Identifier Identifier "=" VariableInitializer
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//VariableInitializer
		public RuleCall getVariableInitializerParserRuleCall_3() { return cVariableInitializerParserRuleCall_3; }
	}

	public class VariableInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableInitializer");
		private final RuleCall cArrayInitializerParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VariableInitializer: //Expression|
		//	ArrayInitializer;
		public ParserRule getRule() { return rule; }

		////Expression|
		//ArrayInitializer
		public RuleCall getArrayInitializerParserRuleCall() { return cArrayInitializerParserRuleCall; }
	}

	public class ArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cVariableInitializerParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ArrayInitializer:
		//	"{" "}" | "{" (VariableInitializer ",")+ ","? "}";
		public ParserRule getRule() { return rule; }

		//"{" "}" | "{" (VariableInitializer ",")+ ","? "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"{" "}"
		public Group getGroup_0() { return cGroup_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_1() { return cRightCurlyBracketKeyword_0_1; }

		//"{" (VariableInitializer ",")+ ","? "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(VariableInitializer ",")+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//VariableInitializer
		public RuleCall getVariableInitializerParserRuleCall_1_1_0() { return cVariableInitializerParserRuleCall_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class FieldModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cReadonlyKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cVolatileKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//FieldModifier:
		//	"new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }

		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//"readonly"
		public Keyword getReadonlyKeyword_6() { return cReadonlyKeyword_6; }

		//"volatile"
		public Keyword getVolatileKeyword_7() { return cVolatileKeyword_7; }
	}

	public class ConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstantModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cConstantDeclaratorParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConstantDeclaration:
		//	ConstantModifier* "const" Type (ConstantDeclarator ",")+ ";";
		public ParserRule getRule() { return rule; }

		//ConstantModifier* "const" Type (ConstantDeclarator ",")+ ";"
		public Group getGroup() { return cGroup; }

		//ConstantModifier*
		public RuleCall getConstantModifierParserRuleCall_0() { return cConstantModifierParserRuleCall_0; }

		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }

		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }

		//(ConstantDeclarator ",")+
		public Group getGroup_3() { return cGroup_3; }

		//ConstantDeclarator
		public RuleCall getConstantDeclaratorParserRuleCall_3_0() { return cConstantDeclaratorParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ConstantModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ConstantModifier:
		//	"new" | "public" | "protected" | "internal" | "private";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class ConstantDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////TODO
		// ConstantDeclarator:
		//	Identifier //Expression
		// "=";
		public ParserRule getRule() { return rule; }

		//Identifier //Expression
		// "="
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		////Expression
		// "="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}

	public class ClassBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cQualifiedIdentifierListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cBuiltInClassTypeParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cQualifiedIdentifierListParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		
		//ClassBase:
		//	":" (QualifiedIdentifierList | BuiltInClassType ("," QualifiedIdentifierList)?);
		public ParserRule getRule() { return rule; }

		//":" (QualifiedIdentifierList | BuiltInClassType ("," QualifiedIdentifierList)?)
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//QualifiedIdentifierList | BuiltInClassType ("," QualifiedIdentifierList)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//QualifiedIdentifierList
		public RuleCall getQualifiedIdentifierListParserRuleCall_1_0() { return cQualifiedIdentifierListParserRuleCall_1_0; }

		//BuiltInClassType ("," QualifiedIdentifierList)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//BuiltInClassType
		public RuleCall getBuiltInClassTypeParserRuleCall_1_1_0() { return cBuiltInClassTypeParserRuleCall_1_1_0; }

		//("," QualifiedIdentifierList)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//QualifiedIdentifierList
		public RuleCall getQualifiedIdentifierListParserRuleCall_1_1_1_1() { return cQualifiedIdentifierListParserRuleCall_1_1_1_1; }
	}

	public class QualifiedIdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedIdentifierList:
		//	(QualifiedIdentifier ",")+;
		public ParserRule getRule() { return rule; }

		//(QualifiedIdentifier ",")+
		public Group getGroup() { return cGroup; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_0() { return cQualifiedIdentifierParserRuleCall_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class ClassModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAbstractKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSealedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ClassModifier:
		//	Modifier | "abstract" | "sealed";
		public ParserRule getRule() { return rule; }

		//Modifier | "abstract" | "sealed"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Modifier
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//"abstract"
		public Keyword getAbstractKeyword_1() { return cAbstractKeyword_1; }

		//"sealed"
		public Keyword getSealedKeyword_2() { return cSealedKeyword_2; }
	}

	public class GlobalAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalAttributes");
		private final RuleCall cGlobalAttributeSectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//GlobalAttributes:
		//	GlobalAttributeSection*;
		public ParserRule getRule() { return rule; }

		//GlobalAttributeSection*
		public RuleCall getGlobalAttributeSectionParserRuleCall() { return cGlobalAttributeSectionParserRuleCall; }
	}

	public class GlobalAttributeSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalAttributeSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAssemblyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAttributeListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GlobalAttributeSection:
		//	"[" "assembly" ":" AttributeList ","? "]";
		public ParserRule getRule() { return rule; }

		//"[" "assembly" ":" AttributeList ","? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"assembly"
		public Keyword getAssemblyKeyword_1() { return cAssemblyKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//AttributeList
		public RuleCall getAttributeListParserRuleCall_3() { return cAttributeListParserRuleCall_3; }

		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attributes");
		private final RuleCall cAttributeSectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Attributes:
		//	AttributeSection*;
		public ParserRule getRule() { return rule; }

		//AttributeSection*
		public RuleCall getAttributeSectionParserRuleCall() { return cAttributeSectionParserRuleCall; }
	}

	public class AttributeSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cAttributeTargetParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cAttributeListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AttributeSection:
		//	"[" (AttributeTarget ":")? AttributeList ","? "]";
		public ParserRule getRule() { return rule; }

		//"[" (AttributeTarget ":")? AttributeList ","? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(AttributeTarget ":")?
		public Group getGroup_1() { return cGroup_1; }

		//AttributeTarget
		public RuleCall getAttributeTargetParserRuleCall_1_0() { return cAttributeTargetParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//AttributeList
		public RuleCall getAttributeListParserRuleCall_2() { return cAttributeListParserRuleCall_2; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class AttributeTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMethodKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModuleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cParamKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPropertyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cReturnKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cTypeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//AttributeTarget:
		//	"field" | "event" | "method" | "module" | "param" | "property" | "return" | "type";
		public ParserRule getRule() { return rule; }

		//"field" | "event" | "method" | "module" | "param" | "property" | "return" | "type"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//"method"
		public Keyword getMethodKeyword_2() { return cMethodKeyword_2; }

		//"module"
		public Keyword getModuleKeyword_3() { return cModuleKeyword_3; }

		//"param"
		public Keyword getParamKeyword_4() { return cParamKeyword_4; }

		//"property"
		public Keyword getPropertyKeyword_5() { return cPropertyKeyword_5; }

		//"return"
		public Keyword getReturnKeyword_6() { return cReturnKeyword_6; }

		//"type"
		public Keyword getTypeKeyword_7() { return cTypeKeyword_7; }
	}

	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AttributeList:
		//	(Attribute ",")+;
		public ParserRule getRule() { return rule; }

		//(Attribute ",")+
		public Group getGroup() { return cGroup; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributeNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAttributeArgumentsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// AQUI
		// Attribute:
		//	AttributeName AttributeArguments?;
		public ParserRule getRule() { return rule; }

		//AttributeName AttributeArguments?
		public Group getGroup() { return cGroup; }

		//AttributeName
		public RuleCall getAttributeNameParserRuleCall_0() { return cAttributeNameParserRuleCall_0; }

		//AttributeArguments?
		public RuleCall getAttributeArgumentsParserRuleCall_1() { return cAttributeArgumentsParserRuleCall_1; }
	}

	public class AttributeArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AttributeArguments:
		//	"(" ExpressionList? ")";
		public ParserRule getRule() { return rule; }

		//"(" ExpressionList? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//ExpressionList?
		public RuleCall getExpressionListParserRuleCall_1() { return cExpressionListParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionList:
		//	(Expression ",")+;
		public ParserRule getRule() { return rule; }

		//(Expression ",")+
		public Group getGroup() { return cGroup; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cBARTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//Expression:
		//	UnaryExpression (Expression2 | BAR Expression Expression2);
		public ParserRule getRule() { return rule; }

		//UnaryExpression (Expression2 | BAR Expression Expression2)
		public Group getGroup() { return cGroup; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//Expression2 | BAR Expression Expression2
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_1_0() { return cExpression2ParserRuleCall_1_0; }

		//BAR Expression Expression2
		public Group getGroup_1_1() { return cGroup_1_1; }

		//BAR
		public RuleCall getBARTerminalRuleCall_1_1_0() { return cBARTerminalRuleCall_1_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1_1() { return cExpressionParserRuleCall_1_1_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_1_1_2() { return cExpression2ParserRuleCall_1_1_2; }
	}

	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cExpression2ParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cBARTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cCircumflexAccentKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cAMPERSANDTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cEXPRESSION_EQUALITY_OPERATORTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cExpressionRelationalOperatorParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cIsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cBuiltInTypeParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cExpressionShiftOperatorParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cOPERATOR_OR_SIGNTerminalRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_10_2 = (RuleCall)cGroup_10.eContents().get(2);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cAsteriskKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_11_2 = (RuleCall)cGroup_11.eContents().get(2);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cSolidusKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_12_2 = (RuleCall)cGroup_12.eContents().get(2);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cPercentSignKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_13_2 = (RuleCall)cGroup_13.eContents().get(2);
		
		//Expression2:
		//	("?" Expression ":" Expression Expression2 | "||" Expression Expression2 | "&&" Expression Expression2 | BAR
		//	Expression Expression2 | "^" Expression Expression2 | AMPERSAND Expression Expression2 | EXPRESSION_EQUALITY_OPERATOR
		//	Expression Expression2 | ExpressionRelationalOperator Expression Expression2 | "is" BuiltInType Expression2 |
		//	ExpressionShiftOperator Expression Expression2 | OPERATOR_OR_SIGN Expression Expression2 | "*" Expression Expression2
		//	| "/" Expression Expression2 | "%" Expression Expression2)*;
		public ParserRule getRule() { return rule; }

		//("?" Expression ":" Expression Expression2 | "||" Expression Expression2 | "&&" Expression Expression2 | BAR Expression
		//Expression2 | "^" Expression Expression2 | AMPERSAND Expression Expression2 | EXPRESSION_EQUALITY_OPERATOR Expression
		//Expression2 | ExpressionRelationalOperator Expression Expression2 | "is" BuiltInType Expression2 |
		//ExpressionShiftOperator Expression Expression2 | OPERATOR_OR_SIGN Expression Expression2 | "*" Expression Expression2
		//| "/" Expression Expression2 | "%" Expression Expression2)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"?" Expression ":" Expression Expression2
		public Group getGroup_0() { return cGroup_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_0_0() { return cQuestionMarkKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_3() { return cExpressionParserRuleCall_0_3; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_0_4() { return cExpression2ParserRuleCall_0_4; }

		//"||" Expression Expression2
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_1_2() { return cExpression2ParserRuleCall_1_2; }

		//"&&" Expression Expression2
		public Group getGroup_2() { return cGroup_2; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_2_0() { return cAmpersandAmpersandKeyword_2_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_2_2() { return cExpression2ParserRuleCall_2_2; }

		//BAR Expression Expression2
		public Group getGroup_3() { return cGroup_3; }

		//BAR
		public RuleCall getBARTerminalRuleCall_3_0() { return cBARTerminalRuleCall_3_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_3_2() { return cExpression2ParserRuleCall_3_2; }

		//"^" Expression Expression2
		public Group getGroup_4() { return cGroup_4; }

		//"^"
		public Keyword getCircumflexAccentKeyword_4_0() { return cCircumflexAccentKeyword_4_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_4_2() { return cExpression2ParserRuleCall_4_2; }

		//AMPERSAND Expression Expression2
		public Group getGroup_5() { return cGroup_5; }

		//AMPERSAND
		public RuleCall getAMPERSANDTerminalRuleCall_5_0() { return cAMPERSANDTerminalRuleCall_5_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_5_1() { return cExpressionParserRuleCall_5_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_5_2() { return cExpression2ParserRuleCall_5_2; }

		//EXPRESSION_EQUALITY_OPERATOR Expression Expression2
		public Group getGroup_6() { return cGroup_6; }

		//EXPRESSION_EQUALITY_OPERATOR
		public RuleCall getEXPRESSION_EQUALITY_OPERATORTerminalRuleCall_6_0() { return cEXPRESSION_EQUALITY_OPERATORTerminalRuleCall_6_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_6_1() { return cExpressionParserRuleCall_6_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_6_2() { return cExpression2ParserRuleCall_6_2; }

		//ExpressionRelationalOperator Expression Expression2
		public Group getGroup_7() { return cGroup_7; }

		//ExpressionRelationalOperator
		public RuleCall getExpressionRelationalOperatorParserRuleCall_7_0() { return cExpressionRelationalOperatorParserRuleCall_7_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_7_1() { return cExpressionParserRuleCall_7_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_7_2() { return cExpression2ParserRuleCall_7_2; }

		//"is" BuiltInType Expression2
		public Group getGroup_8() { return cGroup_8; }

		//"is"
		public Keyword getIsKeyword_8_0() { return cIsKeyword_8_0; }

		//BuiltInType
		public RuleCall getBuiltInTypeParserRuleCall_8_1() { return cBuiltInTypeParserRuleCall_8_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_8_2() { return cExpression2ParserRuleCall_8_2; }

		//ExpressionShiftOperator Expression Expression2
		public Group getGroup_9() { return cGroup_9; }

		//ExpressionShiftOperator
		public RuleCall getExpressionShiftOperatorParserRuleCall_9_0() { return cExpressionShiftOperatorParserRuleCall_9_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_9_1() { return cExpressionParserRuleCall_9_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_9_2() { return cExpression2ParserRuleCall_9_2; }

		//OPERATOR_OR_SIGN Expression Expression2
		public Group getGroup_10() { return cGroup_10; }

		//OPERATOR_OR_SIGN
		public RuleCall getOPERATOR_OR_SIGNTerminalRuleCall_10_0() { return cOPERATOR_OR_SIGNTerminalRuleCall_10_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_10_1() { return cExpressionParserRuleCall_10_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_10_2() { return cExpression2ParserRuleCall_10_2; }

		//"*" Expression Expression2
		public Group getGroup_11() { return cGroup_11; }

		//"*"
		public Keyword getAsteriskKeyword_11_0() { return cAsteriskKeyword_11_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_11_1() { return cExpressionParserRuleCall_11_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_11_2() { return cExpression2ParserRuleCall_11_2; }

		//"/" Expression Expression2
		public Group getGroup_12() { return cGroup_12; }

		//"/"
		public Keyword getSolidusKeyword_12_0() { return cSolidusKeyword_12_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_12_1() { return cExpressionParserRuleCall_12_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_12_2() { return cExpression2ParserRuleCall_12_2; }

		//"%" Expression Expression2
		public Group getGroup_13() { return cGroup_13; }

		//"%"
		public Keyword getPercentSignKeyword_13_0() { return cPercentSignKeyword_13_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_13_1() { return cExpressionParserRuleCall_13_1; }

		//Expression2
		public RuleCall getExpression2ParserRuleCall_13_2() { return cExpression2ParserRuleCall_13_2; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionUnaryOperatorParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cUnaryExpressionParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		////    |PrimaryExpression
		// UnaryExpression:
		//	ExpressionUnaryOperator UnaryExpression | "(" Type ")" UnaryExpression;
		public ParserRule getRule() { return rule; }

		//ExpressionUnaryOperator UnaryExpression | "(" Type ")" UnaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionUnaryOperator UnaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//ExpressionUnaryOperator
		public RuleCall getExpressionUnaryOperatorParserRuleCall_0_0() { return cExpressionUnaryOperatorParserRuleCall_0_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0_1() { return cUnaryExpressionParserRuleCall_0_1; }

		//"(" Type ")" UnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1_3() { return cUnaryExpressionParserRuleCall_1_3; }
	}

	public class ExpressionUnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionUnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOPERATOR_OR_PUNCTUATORTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINCREMENT_DECREMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAsteriskKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ExpressionUnaryOperator:
		//	OPERATOR_OR_PUNCTUATOR | INCREMENT_DECREMENT | "!" | "~" | "*";
		public ParserRule getRule() { return rule; }

		//OPERATOR_OR_PUNCTUATOR | INCREMENT_DECREMENT | "!" | "~" | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OPERATOR_OR_PUNCTUATOR
		public RuleCall getOPERATOR_OR_PUNCTUATORTerminalRuleCall_0() { return cOPERATOR_OR_PUNCTUATORTerminalRuleCall_0; }

		//INCREMENT_DECREMENT
		public RuleCall getINCREMENT_DECREMENTTerminalRuleCall_1() { return cINCREMENT_DECREMENTTerminalRuleCall_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }

		//"~"
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }

		//"*"
		public Keyword getAsteriskKeyword_4() { return cAsteriskKeyword_4; }
	}

	public class ExpressionShiftOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExpressionShiftOperator:
		//	"<<" | ">>";
		public ParserRule getRule() { return rule; }

		//"<<" | ">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignKeyword_1; }
	}

	public class ExpressionRelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionRelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLESS_THANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGREATER_THANTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ExpressionRelationalOperator:
		//	LESS_THAN | GREATER_THAN | "<=" | ">=" | "is" | "as";
		public ParserRule getRule() { return rule; }

		//LESS_THAN | GREATER_THAN | "<=" | ">=" | "is" | "as"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_0() { return cLESS_THANTerminalRuleCall_0; }

		//GREATER_THAN
		public RuleCall getGREATER_THANTerminalRuleCall_1() { return cGREATER_THANTerminalRuleCall_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"is"
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }

		//"as"
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final RuleCall cQualifiedIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AttributeName:
		//	QualifiedIdentifier;
		public ParserRule getRule() { return rule; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall() { return cQualifiedIdentifierParserRuleCall; }
	}

	public class UsingDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsingDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cQualifiedIdentifierParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UsingDirective:
		//	"using" (Identifier "=")? QualifiedIdentifier ";";
		public ParserRule getRule() { return rule; }

		//"using" (Identifier "=")? QualifiedIdentifier ";"
		public Group getGroup() { return cGroup; }

		//"using"
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }

		//(Identifier "=")?
		public Group getGroup_1() { return cGroup_1; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_0() { return cIdentifierParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_2() { return cQualifiedIdentifierParserRuleCall_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonArrayTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRANK_SPECIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Type:
		//	NonArrayType RANK_SPECIFIER*;
		public ParserRule getRule() { return rule; }

		//NonArrayType RANK_SPECIFIER*
		public Group getGroup() { return cGroup; }

		//NonArrayType
		public RuleCall getNonArrayTypeParserRuleCall_0() { return cNonArrayTypeParserRuleCall_0; }

		//RANK_SPECIFIER*
		public RuleCall getRANK_SPECIFIERTerminalRuleCall_1() { return cRANK_SPECIFIERTerminalRuleCall_1; }
	}

	public class IntegralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSbyteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cShortKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUshortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUintKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUlongKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCharKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//IntegralType:
		//	"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char";
		public ParserRule getRule() { return rule; }

		//"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"sbyte"
		public Keyword getSbyteKeyword_0() { return cSbyteKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"short"
		public Keyword getShortKeyword_2() { return cShortKeyword_2; }

		//"ushort"
		public Keyword getUshortKeyword_3() { return cUshortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"uint"
		public Keyword getUintKeyword_5() { return cUintKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"ulong"
		public Keyword getUlongKeyword_7() { return cUlongKeyword_7; }

		//"char"
		public Keyword getCharKeyword_8() { return cCharKeyword_8; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonArrayTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRANK_SPECIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ArrayType:
		//	NonArrayType RANK_SPECIFIER+;
		public ParserRule getRule() { return rule; }

		//NonArrayType RANK_SPECIFIER+
		public Group getGroup() { return cGroup; }

		//NonArrayType
		public RuleCall getNonArrayTypeParserRuleCall_0() { return cNonArrayTypeParserRuleCall_0; }

		//RANK_SPECIFIER+
		public RuleCall getRANK_SPECIFIERTerminalRuleCall_1() { return cRANK_SPECIFIERTerminalRuleCall_1; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEnumModifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEnumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIntegralTypeParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cEnumBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumType:
		//	Attributes EnumModifier* "enum" ID (":" IntegralType)? EnumBody ";"?;
		public ParserRule getRule() { return rule; }

		//Attributes EnumModifier* "enum" ID (":" IntegralType)? EnumBody ";"?
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//EnumModifier*
		public RuleCall getEnumModifierParserRuleCall_1() { return cEnumModifierParserRuleCall_1; }

		//"enum"
		public Keyword getEnumKeyword_2() { return cEnumKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//(":" IntegralType)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_4_1() { return cIntegralTypeParserRuleCall_4_1; }

		//EnumBody
		public RuleCall getEnumBodyParserRuleCall_5() { return cEnumBodyParserRuleCall_5; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class NonArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonArrayType");
		private final RuleCall cBuiltInTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NonArrayType: //QualifiedIdentifier|
		//	BuiltInType;
		public ParserRule getRule() { return rule; }

		////QualifiedIdentifier|
		//BuiltInType
		public RuleCall getBuiltInTypeParserRuleCall() { return cBuiltInTypeParserRuleCall; }
	}

	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedIdentifier:
		//	(Identifier ".")+;
		public ParserRule getRule() { return rule; }

		//(Identifier ".")+
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class BuiltInTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegralTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltInClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDecimalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BuiltInType:
		//	IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double";
		public ParserRule getRule() { return rule; }

		//IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_0() { return cIntegralTypeParserRuleCall_0; }

		//BuiltInClassType
		public RuleCall getBuiltInClassTypeParserRuleCall_1() { return cBuiltInClassTypeParserRuleCall_1; }

		//"bool"
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }

		//"decimal"
		public Keyword getDecimalKeyword_3() { return cDecimalKeyword_3; }

		//"float"
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }

		//"double"
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }
	}

	public class BuiltInClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInClassType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BuiltInClassType:
		//	"object" | "string";
		public ParserRule getRule() { return rule; }

		//"object" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class EnumBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cEnumMemberDeclarationParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//EnumBody:
		//	"{" "}" | "{" (EnumMemberDeclaration ",")+ ","? "}";
		public ParserRule getRule() { return rule; }

		//"{" "}" | "{" (EnumMemberDeclaration ",")+ ","? "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"{" "}"
		public Group getGroup_0() { return cGroup_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_1() { return cRightCurlyBracketKeyword_0_1; }

		//"{" (EnumMemberDeclaration ",")+ ","? "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(EnumMemberDeclaration ",")+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//EnumMemberDeclaration
		public RuleCall getEnumMemberDeclarationParserRuleCall_1_1_0() { return cEnumMemberDeclarationParserRuleCall_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class EnumMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//EnumMemberDeclaration:
		//	Attributes Identifier ("=" Expression)?;
		public ParserRule getRule() { return rule; }

		//Attributes Identifier ("=" Expression)?
		public Group getGroup() { return cGroup; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_0() { return cAttributesParserRuleCall_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }

		//("=" Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
	}

	public class EnumModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//EnumModifier:
		//	"new" | "public" | "protected" | "internal" | "private";
		public ParserRule getRule() { return rule; }

		//"new" | "public" | "protected" | "internal" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}
	
	
	private ModelElements pModel;
	private InputElements pInput;
	private InputSectionPartElements pInputSectionPart;
	private PPDirectiveElements pPPDirective;
	private PPConditionalElements pPPConditional;
	private PPEndifElements pPPEndif;
	private PPElseSectionElements pPPElseSection;
	private PPElifSectionsElements pPPElifSections;
	private PPElifSections2Elements pPPElifSections2;
	private PPElifSectionElements pPPElifSection;
	private PPIfSectionElements pPPIfSection;
	private PPExpressionElements pPPExpression;
	private PPOrExpressionElements pPPOrExpression;
	private PPOrExpression2Elements pPPOrExpression2;
	private PPAndExpressionElements pPPAndExpression;
	private PPAndExpression2Elements pPPAndExpression2;
	private PPEqualityExpressionElements pPPEqualityExpression;
	private PPEqualityExpression2Elements pPPEqualityExpression2;
	private PPUnaryExpressionElements pPPUnaryExpression;
	private PPPrimaryExpressionElements pPPPrimaryExpression;
	private PPDeclarationElements pPPDeclaration;
	private PPNewLineElements pPPNewLine;
	private ConditionalSymbolElements pConditionalSymbol;
	private InputElementElements pInputElement;
	private TokenElements pToken;
	private KeywordsElements pKeywords;
	private IntegerLiteralElements pIntegerLiteral;
	private RealLiteralElements pRealLiteral;
	private ExponentPartElements pExponentPart;
	private CharacterLiteralElements pCharacterLiteral;
	private CharacterElements pCharacter;
	private EscapeSequenceElements pEscapeSequence;
	private UnicodeCharacterEscapeSequenceElements pUnicodeCharacterEscapeSequence;
	private HexadecimalEscapeSequenceElements pHexadecimalEscapeSequence;
	private StringLiteralElements pStringLiteral;
	private VerbatimStringCharacterElements pVerbatimStringCharacter;
	private RegularStringCharacterElements pRegularStringCharacter;
	private CommentElements pComment;
	private IdentifierElements pIdentifier;
	private AvailableIdentifierElements pAvailableIdentifier;
	private IdentifierOrKeywordElements pIdentifierOrKeyword;
	private IdentifierPartCharacterElements pIdentifierPartCharacter;
	private CompilationUnitElements pCompilationUnit;
	private NamespaceMemberDeclarationElements pNamespaceMemberDeclaration;
	private NamespaceDeclarationElements pNamespaceDeclaration;
	private NamespaceBodyElements pNamespaceBody;
	private TypeDeclarationElements pTypeDeclaration;
	private DelegateDeclarationElements pDelegateDeclaration;
	private EnumDeclarationElements pEnumDeclaration;
	private InterfaceDeclarationElements pInterfaceDeclaration;
	private ModifierElements pModifier;
	private InterfaceBodyElements pInterfaceBody;
	private InterfaceMemberDeclarationElements pInterfaceMemberDeclaration;
	private InterfaceIndexerDeclarationElements pInterfaceIndexerDeclaration;
	private InterfaceEventDeclarationElements pInterfaceEventDeclaration;
	private InterfacePropertyDeclarationElements pInterfacePropertyDeclaration;
	private InterfaceAccessorsElements pInterfaceAccessors;
	private InterfaceMethodDeclarationElements pInterfaceMethodDeclaration;
	private StructDeclarationElements pStructDeclaration;
	private StructBodyElements pStructBody;
	private StructMemberDeclarationsElements pStructMemberDeclarations;
	private StructMemberDeclarations2Elements pStructMemberDeclarations2;
	private StructMemberDeclarationElements pStructMemberDeclaration;
	private ClassDeclarationElements pClassDeclaration;
	private ClassBodyElements pClassBody;
	private ClassMemberDeclarationElements pClassMemberDeclaration;
	private StaticConstructorDeclarationElements pStaticConstructorDeclaration;
	private StaticConstructorModifiersElements pStaticConstructorModifiers;
	private DestructorDeclarationElements pDestructorDeclaration;
	private ConstructorDeclarationElements pConstructorDeclaration;
	private ConstructorDeclaratorElements pConstructorDeclarator;
	private ConstructorInitializerElements pConstructorInitializer;
	private ArgumentListElements pArgumentList;
	private ArgumentElements pArgument;
	private RefOrOutElements pRefOrOut;
	private ConstructorModifierElements pConstructorModifier;
	private OperatorDeclarationElements pOperatorDeclaration;
	private OperatorDeclaratorElements pOperatorDeclarator;
	private ConversionOperatorDeclaratorElements pConversionOperatorDeclarator;
	private ConversionKindElements pConversionKind;
	private BinaryOperatorDeclaratorElements pBinaryOperatorDeclarator;
	private OverloadableBinaryOperatorElements pOverloadableBinaryOperator;
	private UnaryOperatorDeclaratorElements pUnaryOperatorDeclarator;
	private OverloadableUnaryOperatorElements pOverloadableUnaryOperator;
	private OperatorModifierElements pOperatorModifier;
	private IndexerDeclarationElements pIndexerDeclaration;
	private IndexerDeclaratorElements pIndexerDeclarator;
	private IndexerModifierElements pIndexerModifier;
	private EventDeclarationElements pEventDeclaration;
	private EventAccessorDeclarationsElements pEventAccessorDeclarations;
	private RemoveAccessorDeclarationElements pRemoveAccessorDeclaration;
	private AddAccessorDeclarationElements pAddAccessorDeclaration;
	private EventModifierElements pEventModifier;
	private PropertyDeclarationElements pPropertyDeclaration;
	private AccessorDeclarationsElements pAccessorDeclarations;
	private SetAccessorDeclarationElements pSetAccessorDeclaration;
	private GetAccessorDeclarationElements pGetAccessorDeclaration;
	private PropertyModifierElements pPropertyModifier;
	private MethodDeclarationElements pMethodDeclaration;
	private MethodHeaderElements pMethodHeader;
	private FormalParameterListElements pFormalParameterList;
	private ParameterArrayElements pParameterArray;
	private FixedParametersElements pFixedParameters;
	private FixedParameterElements pFixedParameter;
	private ParameterModifierElements pParameterModifier;
	private TypeOrVoidElements pTypeOrVoid;
	private MethodModifierElements pMethodModifier;
	private FieldDeclarationElements pFieldDeclaration;
	private VariableDeclaratorElements pVariableDeclarator;
	private VariableInitializerElements pVariableInitializer;
	private ArrayInitializerElements pArrayInitializer;
	private FieldModifierElements pFieldModifier;
	private ConstantDeclarationElements pConstantDeclaration;
	private ConstantModifierElements pConstantModifier;
	private ConstantDeclaratorElements pConstantDeclarator;
	private ClassBaseElements pClassBase;
	private QualifiedIdentifierListElements pQualifiedIdentifierList;
	private ClassModifierElements pClassModifier;
	private GlobalAttributesElements pGlobalAttributes;
	private GlobalAttributeSectionElements pGlobalAttributeSection;
	private AttributesElements pAttributes;
	private AttributeSectionElements pAttributeSection;
	private AttributeTargetElements pAttributeTarget;
	private AttributeListElements pAttributeList;
	private AttributeElements pAttribute;
	private AttributeArgumentsElements pAttributeArguments;
	private ExpressionListElements pExpressionList;
	private ExpressionElements pExpression;
	private Expression2Elements pExpression2;
	private UnaryExpressionElements pUnaryExpression;
	private ExpressionUnaryOperatorElements pExpressionUnaryOperator;
	private ExpressionShiftOperatorElements pExpressionShiftOperator;
	private ExpressionRelationalOperatorElements pExpressionRelationalOperator;
	private AttributeNameElements pAttributeName;
	private UsingDirectiveElements pUsingDirective;
	private TypeElements pType;
	private IntegralTypeElements pIntegralType;
	private ArrayTypeElements pArrayType;
	private EnumTypeElements pEnumType;
	private NonArrayTypeElements pNonArrayType;
	private QualifiedIdentifierElements pQualifiedIdentifier;
	private BuiltInTypeElements pBuiltInType;
	private BuiltInClassTypeElements pBuiltInClassType;
	private EnumBodyElements pEnumBody;
	private EnumMemberDeclarationElements pEnumMemberDeclaration;
	private EnumModifierElements pEnumModifier;
	private TerminalRule tEXPRESSION_EQUALITY_OPERATOR;
	private TerminalRule tLESS_THAN;
	private TerminalRule tGREATER_THAN;
	private TerminalRule tBAR;
	private TerminalRule tAMPERSAND;
	private TerminalRule tINCREMENT_DECREMENT;
	private TerminalRule tOPERATOR_OR_SIGN;
	private TerminalRule tREAL_TYPE_SUFFIX;
	private TerminalRule tLETTER;
	private TerminalRule tIDENTIFIER_START_CHARACTER;
	private TerminalRule tQUOTE_ESCAPE_SEQUENCE;
	private TerminalRule tESCAPE_SEQUENCE;
	private TerminalRule tNEW_LINE;
	private TerminalRule tRANK_SPECIFIER;
	private TerminalRule tINTEGER_TYPE_SUFFIX;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tOPERATOR_OR_PUNCTUATOR;
	private TerminalRule tSINGLE_CHARACTER;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public CSharpGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.myModel.CSharp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	inputs?=Input;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Input:
	//	InputSectionPart;
	public InputElements getInputAccess() {
		return (pInput != null) ? pInput : (pInput = new InputElements());
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	////LEXICA
	//InputSectionPart:
	//	InputElement* NEW_LINE | PPDirective;
	public InputSectionPartElements getInputSectionPartAccess() {
		return (pInputSectionPart != null) ? pInputSectionPart : (pInputSectionPart = new InputSectionPartElements());
	}
	
	public ParserRule getInputSectionPartRule() {
		return getInputSectionPartAccess().getRule();
	}

	//PPDirective:
	//	PPDeclaration | / *
	// |PPLine
	// |PPDiagnostic
	// |PPRegion * / PPConditional;
	public PPDirectiveElements getPPDirectiveAccess() {
		return (pPPDirective != null) ? pPPDirective : (pPPDirective = new PPDirectiveElements());
	}
	
	public ParserRule getPPDirectiveRule() {
		return getPPDirectiveAccess().getRule();
	}

	//PPConditional:
	//	WS* PPIfSection PPElifSections? => PPElseSection? PPEndif;
	public PPConditionalElements getPPConditionalAccess() {
		return (pPPConditional != null) ? pPPConditional : (pPPConditional = new PPConditionalElements());
	}
	
	public ParserRule getPPConditionalRule() {
		return getPPConditionalAccess().getRule();
	}

	//PPEndif:
	//	"endif" PPNewLine;
	public PPEndifElements getPPEndifAccess() {
		return (pPPEndif != null) ? pPPEndif : (pPPEndif = new PPEndifElements());
	}
	
	public ParserRule getPPEndifRule() {
		return getPPEndifAccess().getRule();
	}

	//PPElseSection:
	//	"else" PPNewLine WS* //ConditionalSection? 
	//;
	public PPElseSectionElements getPPElseSectionAccess() {
		return (pPPElseSection != null) ? pPPElseSection : (pPPElseSection = new PPElseSectionElements());
	}
	
	public ParserRule getPPElseSectionRule() {
		return getPPElseSectionAccess().getRule();
	}

	//PPElifSections:
	//	PPElifSection PPElifSections2;
	public PPElifSectionsElements getPPElifSectionsAccess() {
		return (pPPElifSections != null) ? pPPElifSections : (pPPElifSections = new PPElifSectionsElements());
	}
	
	public ParserRule getPPElifSectionsRule() {
		return getPPElifSectionsAccess().getRule();
	}

	//PPElifSections2:
	//	(PPElifSection PPElifSections2)*;
	public PPElifSections2Elements getPPElifSections2Access() {
		return (pPPElifSections2 != null) ? pPPElifSections2 : (pPPElifSections2 = new PPElifSections2Elements());
	}
	
	public ParserRule getPPElifSections2Rule() {
		return getPPElifSections2Access().getRule();
	}

	//PPElifSection:
	//	"elif" WS* PPExpression PPNewLine WS* //ConditionalSection?
	//;
	public PPElifSectionElements getPPElifSectionAccess() {
		return (pPPElifSection != null) ? pPPElifSection : (pPPElifSection = new PPElifSectionElements());
	}
	
	public ParserRule getPPElifSectionRule() {
		return getPPElifSectionAccess().getRule();
	}

	//PPIfSection:
	//	"if" WS* PPExpression PPNewLine WS* //ConditionalSection?
	//;
	public PPIfSectionElements getPPIfSectionAccess() {
		return (pPPIfSection != null) ? pPPIfSection : (pPPIfSection = new PPIfSectionElements());
	}
	
	public ParserRule getPPIfSectionRule() {
		return getPPIfSectionAccess().getRule();
	}

	//PPExpression:
	//	PPOrExpression;
	public PPExpressionElements getPPExpressionAccess() {
		return (pPPExpression != null) ? pPPExpression : (pPPExpression = new PPExpressionElements());
	}
	
	public ParserRule getPPExpressionRule() {
		return getPPExpressionAccess().getRule();
	}

	//PPOrExpression:
	//	PPAndExpression WS* PPOrExpression2;
	public PPOrExpressionElements getPPOrExpressionAccess() {
		return (pPPOrExpression != null) ? pPPOrExpression : (pPPOrExpression = new PPOrExpressionElements());
	}
	
	public ParserRule getPPOrExpressionRule() {
		return getPPOrExpressionAccess().getRule();
	}

	//PPOrExpression2:
	//	("||" WS* PPAndExpression PPOrExpression2)*;
	public PPOrExpression2Elements getPPOrExpression2Access() {
		return (pPPOrExpression2 != null) ? pPPOrExpression2 : (pPPOrExpression2 = new PPOrExpression2Elements());
	}
	
	public ParserRule getPPOrExpression2Rule() {
		return getPPOrExpression2Access().getRule();
	}

	//PPAndExpression:
	//	PPEqualityExpression WS* PPAndExpression2;
	public PPAndExpressionElements getPPAndExpressionAccess() {
		return (pPPAndExpression != null) ? pPPAndExpression : (pPPAndExpression = new PPAndExpressionElements());
	}
	
	public ParserRule getPPAndExpressionRule() {
		return getPPAndExpressionAccess().getRule();
	}

	//PPAndExpression2:
	//	("&&" WS* PPEqualityExpression PPAndExpression2)*;
	public PPAndExpression2Elements getPPAndExpression2Access() {
		return (pPPAndExpression2 != null) ? pPPAndExpression2 : (pPPAndExpression2 = new PPAndExpression2Elements());
	}
	
	public ParserRule getPPAndExpression2Rule() {
		return getPPAndExpression2Access().getRule();
	}

	//PPEqualityExpression:
	//	PPUnaryExpression PPEqualityExpression2*;
	public PPEqualityExpressionElements getPPEqualityExpressionAccess() {
		return (pPPEqualityExpression != null) ? pPPEqualityExpression : (pPPEqualityExpression = new PPEqualityExpressionElements());
	}
	
	public ParserRule getPPEqualityExpressionRule() {
		return getPPEqualityExpressionAccess().getRule();
	}

	//PPEqualityExpression2:
	//	("==" | "!=") WS* PPUnaryExpression PPEqualityExpression2;
	public PPEqualityExpression2Elements getPPEqualityExpression2Access() {
		return (pPPEqualityExpression2 != null) ? pPPEqualityExpression2 : (pPPEqualityExpression2 = new PPEqualityExpression2Elements());
	}
	
	public ParserRule getPPEqualityExpression2Rule() {
		return getPPEqualityExpression2Access().getRule();
	}

	//PPUnaryExpression:
	//	PPPrimaryExpression | "!" PPUnaryExpression;
	public PPUnaryExpressionElements getPPUnaryExpressionAccess() {
		return (pPPUnaryExpression != null) ? pPPUnaryExpression : (pPPUnaryExpression = new PPUnaryExpressionElements());
	}
	
	public ParserRule getPPUnaryExpressionRule() {
		return getPPUnaryExpressionAccess().getRule();
	}

	//PPPrimaryExpression:
	//	"true" | "false" | ConditionalSymbol | "(" WS* PPExpression WS* ")";
	public PPPrimaryExpressionElements getPPPrimaryExpressionAccess() {
		return (pPPPrimaryExpression != null) ? pPPPrimaryExpression : (pPPPrimaryExpression = new PPPrimaryExpressionElements());
	}
	
	public ParserRule getPPPrimaryExpressionRule() {
		return getPPPrimaryExpressionAccess().getRule();
	}

	/// *
	//ConditionalSection:
	//	InputSectionPart+
	//    |SkippedSectionPart+
	//;
	//
	/// *
	//SkippedSectionPart:
	//	SkippedCharacters? NEW_LINE
	//    |PPDirective
	//;
	//
	//SkippedCharacters:
	//	 WS? NotNumberSign InputCharacter*
	//;
	//
	//InputCharacter:
	//	('\n'|'\r')* ('\r'? '\n')?// ERRADO??
	//;
	//
	//NotNumberSign:
	//	STRING // ERRADO?
	//;
	// * / PPDeclaration:
	//	WS? "#" WS? ("define" | "undef") WS ConditionalSymbol PPNewLine;
	public PPDeclarationElements getPPDeclarationAccess() {
		return (pPPDeclaration != null) ? pPPDeclaration : (pPPDeclaration = new PPDeclarationElements());
	}
	
	public ParserRule getPPDeclarationRule() {
		return getPPDeclarationAccess().getRule();
	}

	//PPNewLine:
	//	WS* SL_COMMENT? NEW_LINE;
	public PPNewLineElements getPPNewLineAccess() {
		return (pPPNewLine != null) ? pPPNewLine : (pPPNewLine = new PPNewLineElements());
	}
	
	public ParserRule getPPNewLineRule() {
		return getPPNewLineAccess().getRule();
	}

	//ConditionalSymbol:
	//	IdentifierOrKeyword;
	public ConditionalSymbolElements getConditionalSymbolAccess() {
		return (pConditionalSymbol != null) ? pConditionalSymbol : (pConditionalSymbol = new ConditionalSymbolElements());
	}
	
	public ParserRule getConditionalSymbolRule() {
		return getConditionalSymbolAccess().getRule();
	}

	//InputElement:
	//	WS | Comment | Token;
	public InputElementElements getInputElementAccess() {
		return (pInputElement != null) ? pInputElement : (pInputElement = new InputElementElements());
	}
	
	public ParserRule getInputElementRule() {
		return getInputElementAccess().getRule();
	}

	//Token:
	//	ID | Keywords | IntegerLiteral | RealLiteral | CharacterLiteral | StringLiteral | OPERATOR_OR_PUNCTUATOR;
	public TokenElements getTokenAccess() {
		return (pToken != null) ? pToken : (pToken = new TokenElements());
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//Keywords:
	//	"abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" |
	//	"continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern"
	//	| "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" |
	//	"interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" |
	//	"override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" |
	//	"short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" |
	//	"typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" |
	//	"while";
	public KeywordsElements getKeywordsAccess() {
		return (pKeywords != null) ? pKeywords : (pKeywords = new KeywordsElements());
	}
	
	public ParserRule getKeywordsRule() {
		return getKeywordsAccess().getRule();
	}

	//IntegerLiteral:
	//	("0x" | "0X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX | INT INTEGER_TYPE_SUFFIX?;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//RealLiteral:
	//	INT "." INT ExponentPart? REAL_TYPE_SUFFIX? | INT ExponentPart REAL_TYPE_SUFFIX? | INT REAL_TYPE_SUFFIX;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//ExponentPart:
	//	"e" OPERATOR_OR_SIGN? INT | "E" OPERATOR_OR_SIGN? INT;
	public ExponentPartElements getExponentPartAccess() {
		return (pExponentPart != null) ? pExponentPart : (pExponentPart = new ExponentPartElements());
	}
	
	public ParserRule getExponentPartRule() {
		return getExponentPartAccess().getRule();
	}

	//CharacterLiteral:
	//	"\'" Character "\'";
	public CharacterLiteralElements getCharacterLiteralAccess() {
		return (pCharacterLiteral != null) ? pCharacterLiteral : (pCharacterLiteral = new CharacterLiteralElements());
	}
	
	public ParserRule getCharacterLiteralRule() {
		return getCharacterLiteralAccess().getRule();
	}

	//Character:
	//	SINGLE_CHARACTER | "\\" EscapeSequence;
	public CharacterElements getCharacterAccess() {
		return (pCharacter != null) ? pCharacter : (pCharacter = new CharacterElements());
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}

	//EscapeSequence:
	//	ESCAPE_SEQUENCE | HexadecimalEscapeSequence | UnicodeCharacterEscapeSequence;
	public EscapeSequenceElements getEscapeSequenceAccess() {
		return (pEscapeSequence != null) ? pEscapeSequence : (pEscapeSequence = new EscapeSequenceElements());
	}
	
	public ParserRule getEscapeSequenceRule() {
		return getEscapeSequenceAccess().getRule();
	}

	//UnicodeCharacterEscapeSequence:
	//	"u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
	//	HEX_DIGIT HEX_DIGIT;
	public UnicodeCharacterEscapeSequenceElements getUnicodeCharacterEscapeSequenceAccess() {
		return (pUnicodeCharacterEscapeSequence != null) ? pUnicodeCharacterEscapeSequence : (pUnicodeCharacterEscapeSequence = new UnicodeCharacterEscapeSequenceElements());
	}
	
	public ParserRule getUnicodeCharacterEscapeSequenceRule() {
		return getUnicodeCharacterEscapeSequenceAccess().getRule();
	}

	//HexadecimalEscapeSequence:
	//	"x" HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?;
	public HexadecimalEscapeSequenceElements getHexadecimalEscapeSequenceAccess() {
		return (pHexadecimalEscapeSequence != null) ? pHexadecimalEscapeSequence : (pHexadecimalEscapeSequence = new HexadecimalEscapeSequenceElements());
	}
	
	public ParserRule getHexadecimalEscapeSequenceRule() {
		return getHexadecimalEscapeSequenceAccess().getRule();
	}

	//StringLiteral:
	//	"\"" RegularStringCharacter* "\"" | "@" VerbatimStringCharacter* "\"";
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//VerbatimStringCharacter: //Any character except "
	//	SINGLE_CHARACTER | QUOTE_ESCAPE_SEQUENCE;
	public VerbatimStringCharacterElements getVerbatimStringCharacterAccess() {
		return (pVerbatimStringCharacter != null) ? pVerbatimStringCharacter : (pVerbatimStringCharacter = new VerbatimStringCharacterElements());
	}
	
	public ParserRule getVerbatimStringCharacterRule() {
		return getVerbatimStringCharacterAccess().getRule();
	}

	//RegularStringCharacter: //Any character except " (U+0022), \ (U+005C), and new-line-character
	//	SINGLE_CHARACTER | "\\" ESCAPE_SEQUENCE;
	public RegularStringCharacterElements getRegularStringCharacterAccess() {
		return (pRegularStringCharacter != null) ? pRegularStringCharacter : (pRegularStringCharacter = new RegularStringCharacterElements());
	}
	
	public ParserRule getRegularStringCharacterRule() {
		return getRegularStringCharacterAccess().getRule();
	}

	//Comment:
	//	SL_COMMENT | ML_COMMENT;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Identifier:
	//	AvailableIdentifier | "@" IDENTIFIER_START_CHARACTER;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//AvailableIdentifier:
	//	IdentifierOrKeyword;
	public AvailableIdentifierElements getAvailableIdentifierAccess() {
		return (pAvailableIdentifier != null) ? pAvailableIdentifier : (pAvailableIdentifier = new AvailableIdentifierElements());
	}
	
	public ParserRule getAvailableIdentifierRule() {
		return getAvailableIdentifierAccess().getRule();
	}

	//IdentifierOrKeyword:
	//	IDENTIFIER_START_CHARACTER IdentifierPartCharacter*;
	public IdentifierOrKeywordElements getIdentifierOrKeywordAccess() {
		return (pIdentifierOrKeyword != null) ? pIdentifierOrKeyword : (pIdentifierOrKeyword = new IdentifierOrKeywordElements());
	}
	
	public ParserRule getIdentifierOrKeywordRule() {
		return getIdentifierOrKeywordAccess().getRule();
	}

	//IdentifierPartCharacter:
	//	LETTER | / *
	//    |connecting-character
	//    |combining-character
	//    |formatting-character * / INT;
	public IdentifierPartCharacterElements getIdentifierPartCharacterAccess() {
		return (pIdentifierPartCharacter != null) ? pIdentifierPartCharacter : (pIdentifierPartCharacter = new IdentifierPartCharacterElements());
	}
	
	public ParserRule getIdentifierPartCharacterRule() {
		return getIdentifierPartCharacterAccess().getRule();
	}

	////FIM LEXICA 
	////SINTAXE
	//CompilationUnit:
	//	UsingDirective* GlobalAttributes NamespaceMemberDeclaration*;
	public CompilationUnitElements getCompilationUnitAccess() {
		return (pCompilationUnit != null) ? pCompilationUnit : (pCompilationUnit = new CompilationUnitElements());
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//NamespaceMemberDeclaration:
	//	NamespaceDeclaration | TypeDeclaration;
	public NamespaceMemberDeclarationElements getNamespaceMemberDeclarationAccess() {
		return (pNamespaceMemberDeclaration != null) ? pNamespaceMemberDeclaration : (pNamespaceMemberDeclaration = new NamespaceMemberDeclarationElements());
	}
	
	public ParserRule getNamespaceMemberDeclarationRule() {
		return getNamespaceMemberDeclarationAccess().getRule();
	}

	//NamespaceDeclaration:
	//	"namespace" QualifiedIdentifier NamespaceBody ";"?;
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return (pNamespaceDeclaration != null) ? pNamespaceDeclaration : (pNamespaceDeclaration = new NamespaceDeclarationElements());
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}

	//NamespaceBody:
	//	"{" UsingDirective* NamespaceMemberDeclaration* "}";
	public NamespaceBodyElements getNamespaceBodyAccess() {
		return (pNamespaceBody != null) ? pNamespaceBody : (pNamespaceBody = new NamespaceBodyElements());
	}
	
	public ParserRule getNamespaceBodyRule() {
		return getNamespaceBodyAccess().getRule();
	}

	//TypeDeclaration:
	//	ClassDeclaration | Modifier* (StructDeclaration | InterfaceDeclaration | EnumDeclaration | DelegateDeclaration);
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return (pTypeDeclaration != null) ? pTypeDeclaration : (pTypeDeclaration = new TypeDeclarationElements());
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//DelegateDeclaration:
	//	"delegate" TypeOrVoid Identifier "(" FormalParameterList? ")" ";";
	public DelegateDeclarationElements getDelegateDeclarationAccess() {
		return (pDelegateDeclaration != null) ? pDelegateDeclaration : (pDelegateDeclaration = new DelegateDeclarationElements());
	}
	
	public ParserRule getDelegateDeclarationRule() {
		return getDelegateDeclarationAccess().getRule();
	}

	//EnumDeclaration:
	//	"enum" Identifier (":" IntegralType)? EnumBody ";"?;
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return (pEnumDeclaration != null) ? pEnumDeclaration : (pEnumDeclaration = new EnumDeclarationElements());
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}

	//InterfaceDeclaration:
	//	"struct" Identifier (":" QualifiedIdentifierList)? InterfaceBody ";"?;
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return (pInterfaceDeclaration != null) ? pInterfaceDeclaration : (pInterfaceDeclaration = new InterfaceDeclarationElements());
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}

	//Modifier:
	//	"new" | "public" | "protected" | "internal" | "private";
	public ModifierElements getModifierAccess() {
		return (pModifier != null) ? pModifier : (pModifier = new ModifierElements());
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//InterfaceBody:
	//	"{" InterfaceMemberDeclaration* "}";
	public InterfaceBodyElements getInterfaceBodyAccess() {
		return (pInterfaceBody != null) ? pInterfaceBody : (pInterfaceBody = new InterfaceBodyElements());
	}
	
	public ParserRule getInterfaceBodyRule() {
		return getInterfaceBodyAccess().getRule();
	}

	//InterfaceMemberDeclaration:
	//	"new"? (InterfaceMethodDeclaration | InterfaceEventDeclaration | Type (InterfaceIndexerDeclaration |
	//	InterfacePropertyDeclaration));
	public InterfaceMemberDeclarationElements getInterfaceMemberDeclarationAccess() {
		return (pInterfaceMemberDeclaration != null) ? pInterfaceMemberDeclaration : (pInterfaceMemberDeclaration = new InterfaceMemberDeclarationElements());
	}
	
	public ParserRule getInterfaceMemberDeclarationRule() {
		return getInterfaceMemberDeclarationAccess().getRule();
	}

	//InterfaceIndexerDeclaration:
	//	"this" "[" FormalParameterList "]" "{" InterfaceAccessors "}";
	public InterfaceIndexerDeclarationElements getInterfaceIndexerDeclarationAccess() {
		return (pInterfaceIndexerDeclaration != null) ? pInterfaceIndexerDeclaration : (pInterfaceIndexerDeclaration = new InterfaceIndexerDeclarationElements());
	}
	
	public ParserRule getInterfaceIndexerDeclarationRule() {
		return getInterfaceIndexerDeclarationAccess().getRule();
	}

	//InterfaceEventDeclaration:
	//	"event" Type Identifier ";";
	public InterfaceEventDeclarationElements getInterfaceEventDeclarationAccess() {
		return (pInterfaceEventDeclaration != null) ? pInterfaceEventDeclaration : (pInterfaceEventDeclaration = new InterfaceEventDeclarationElements());
	}
	
	public ParserRule getInterfaceEventDeclarationRule() {
		return getInterfaceEventDeclarationAccess().getRule();
	}

	//InterfacePropertyDeclaration:
	//	Identifier "{" InterfaceAccessors "}";
	public InterfacePropertyDeclarationElements getInterfacePropertyDeclarationAccess() {
		return (pInterfacePropertyDeclaration != null) ? pInterfacePropertyDeclaration : (pInterfacePropertyDeclaration = new InterfacePropertyDeclarationElements());
	}
	
	public ParserRule getInterfacePropertyDeclarationRule() {
		return getInterfacePropertyDeclarationAccess().getRule();
	}

	//InterfaceAccessors:
	//	Attributes ("get" ";" (Attributes "set" ";")? | "set" ";" (Attributes "get" ";")?);
	public InterfaceAccessorsElements getInterfaceAccessorsAccess() {
		return (pInterfaceAccessors != null) ? pInterfaceAccessors : (pInterfaceAccessors = new InterfaceAccessorsElements());
	}
	
	public ParserRule getInterfaceAccessorsRule() {
		return getInterfaceAccessorsAccess().getRule();
	}

	//InterfaceMethodDeclaration:
	//	TypeOrVoid Identifier "(" FormalParameterList? ")" ";";
	public InterfaceMethodDeclarationElements getInterfaceMethodDeclarationAccess() {
		return (pInterfaceMethodDeclaration != null) ? pInterfaceMethodDeclaration : (pInterfaceMethodDeclaration = new InterfaceMethodDeclarationElements());
	}
	
	public ParserRule getInterfaceMethodDeclarationRule() {
		return getInterfaceMethodDeclarationAccess().getRule();
	}

	//StructDeclaration:
	//	"struct" Identifier (":" QualifiedIdentifierList)? StructBody ";"?;
	public StructDeclarationElements getStructDeclarationAccess() {
		return (pStructDeclaration != null) ? pStructDeclaration : (pStructDeclaration = new StructDeclarationElements());
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}

	//StructBody:
	//	"{" StructMemberDeclaration* "}";
	public StructBodyElements getStructBodyAccess() {
		return (pStructBody != null) ? pStructBody : (pStructBody = new StructBodyElements());
	}
	
	public ParserRule getStructBodyRule() {
		return getStructBodyAccess().getRule();
	}

	//StructMemberDeclarations:
	//	StructMemberDeclaration StructMemberDeclarations2*;
	public StructMemberDeclarationsElements getStructMemberDeclarationsAccess() {
		return (pStructMemberDeclarations != null) ? pStructMemberDeclarations : (pStructMemberDeclarations = new StructMemberDeclarationsElements());
	}
	
	public ParserRule getStructMemberDeclarationsRule() {
		return getStructMemberDeclarationsAccess().getRule();
	}

	//StructMemberDeclarations2:
	//	StructMemberDeclaration StructMemberDeclarations2;
	public StructMemberDeclarations2Elements getStructMemberDeclarations2Access() {
		return (pStructMemberDeclarations2 != null) ? pStructMemberDeclarations2 : (pStructMemberDeclarations2 = new StructMemberDeclarations2Elements());
	}
	
	public ParserRule getStructMemberDeclarations2Rule() {
		return getStructMemberDeclarations2Access().getRule();
	}

	//StructMemberDeclaration:
	//	ConstantDeclaration | FieldDeclaration | MethodDeclaration | PropertyDeclaration | EventDeclaration |
	//	IndexerDeclaration | OperatorDeclaration | ConstructorDeclaration | StaticConstructorDeclaration | TypeDeclaration;
	public StructMemberDeclarationElements getStructMemberDeclarationAccess() {
		return (pStructMemberDeclaration != null) ? pStructMemberDeclaration : (pStructMemberDeclaration = new StructMemberDeclarationElements());
	}
	
	public ParserRule getStructMemberDeclarationRule() {
		return getStructMemberDeclarationAccess().getRule();
	}

	//ClassDeclaration:
	//	ClassModifier* "class" Identifier ClassBase? ClassBody ";"?;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return (pClassDeclaration != null) ? pClassDeclaration : (pClassDeclaration = new ClassDeclarationElements());
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}

	//ClassBody:
	//	"{" ClassMemberDeclaration* "}";
	public ClassBodyElements getClassBodyAccess() {
		return (pClassBody != null) ? pClassBody : (pClassBody = new ClassBodyElements());
	}
	
	public ParserRule getClassBodyRule() {
		return getClassBodyAccess().getRule();
	}

	//ClassMemberDeclaration:
	//	MethodDeclaration | Attributes (ConstantDeclaration | FieldDeclaration | PropertyDeclaration | EventDeclaration |
	//	IndexerDeclaration | OperatorDeclaration | ConstructorDeclaration | DestructorDeclaration |
	//	StaticConstructorDeclaration | TypeDeclaration);
	public ClassMemberDeclarationElements getClassMemberDeclarationAccess() {
		return (pClassMemberDeclaration != null) ? pClassMemberDeclaration : (pClassMemberDeclaration = new ClassMemberDeclarationElements());
	}
	
	public ParserRule getClassMemberDeclarationRule() {
		return getClassMemberDeclarationAccess().getRule();
	}

	//StaticConstructorDeclaration:
	//	StaticConstructorModifiers Identifier "(" //maybe-empty-block
	// ")";
	public StaticConstructorDeclarationElements getStaticConstructorDeclarationAccess() {
		return (pStaticConstructorDeclaration != null) ? pStaticConstructorDeclaration : (pStaticConstructorDeclaration = new StaticConstructorDeclarationElements());
	}
	
	public ParserRule getStaticConstructorDeclarationRule() {
		return getStaticConstructorDeclarationAccess().getRule();
	}

	//StaticConstructorModifiers:
	//	"extern"? "static" | "static" "extern";
	public StaticConstructorModifiersElements getStaticConstructorModifiersAccess() {
		return (pStaticConstructorModifiers != null) ? pStaticConstructorModifiers : (pStaticConstructorModifiers = new StaticConstructorModifiersElements());
	}
	
	public ParserRule getStaticConstructorModifiersRule() {
		return getStaticConstructorModifiersAccess().getRule();
	}

	//DestructorDeclaration:
	//	"extern"? "~" Identifier "(" //maybe-empty-block
	// ")";
	public DestructorDeclarationElements getDestructorDeclarationAccess() {
		return (pDestructorDeclaration != null) ? pDestructorDeclaration : (pDestructorDeclaration = new DestructorDeclarationElements());
	}
	
	public ParserRule getDestructorDeclarationRule() {
		return getDestructorDeclarationAccess().getRule();
	}

	//ConstructorDeclaration:
	//	ConstructorModifier* //MaybeEmptyBlock
	//	ConstructorDeclarator;
	public ConstructorDeclarationElements getConstructorDeclarationAccess() {
		return (pConstructorDeclaration != null) ? pConstructorDeclaration : (pConstructorDeclaration = new ConstructorDeclarationElements());
	}
	
	public ParserRule getConstructorDeclarationRule() {
		return getConstructorDeclarationAccess().getRule();
	}

	//ConstructorDeclarator:
	//	Identifier "(" FormalParameterList? ")" ConstructorInitializer?;
	public ConstructorDeclaratorElements getConstructorDeclaratorAccess() {
		return (pConstructorDeclarator != null) ? pConstructorDeclarator : (pConstructorDeclarator = new ConstructorDeclaratorElements());
	}
	
	public ParserRule getConstructorDeclaratorRule() {
		return getConstructorDeclaratorAccess().getRule();
	}

	//ConstructorInitializer:
	//	":" "base" "(" ArgumentList ")" | ":" "this" "(" ArgumentList ")";
	public ConstructorInitializerElements getConstructorInitializerAccess() {
		return (pConstructorInitializer != null) ? pConstructorInitializer : (pConstructorInitializer = new ConstructorInitializerElements());
	}
	
	public ParserRule getConstructorInitializerRule() {
		return getConstructorInitializerAccess().getRule();
	}

	//ArgumentList:
	//	(Argument ",")*;
	public ArgumentListElements getArgumentListAccess() {
		return (pArgumentList != null) ? pArgumentList : (pArgumentList = new ArgumentListElements());
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	////Expression	
	// Argument:
	//	RefOrOut?;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//RefOrOut:
	//	"ref" | "out";
	public RefOrOutElements getRefOrOutAccess() {
		return (pRefOrOut != null) ? pRefOrOut : (pRefOrOut = new RefOrOutElements());
	}
	
	public ParserRule getRefOrOutRule() {
		return getRefOrOutAccess().getRule();
	}

	//ConstructorModifier:
	//	"public" | "protected" | "internal" | "private" | "extern";
	public ConstructorModifierElements getConstructorModifierAccess() {
		return (pConstructorModifier != null) ? pConstructorModifier : (pConstructorModifier = new ConstructorModifierElements());
	}
	
	public ParserRule getConstructorModifierRule() {
		return getConstructorModifierAccess().getRule();
	}

	//OperatorDeclaration:
	//	OperatorModifier+ //MaybeEmptyBlock
	// OperatorDeclarator;
	public OperatorDeclarationElements getOperatorDeclarationAccess() {
		return (pOperatorDeclaration != null) ? pOperatorDeclaration : (pOperatorDeclaration = new OperatorDeclarationElements());
	}
	
	public ParserRule getOperatorDeclarationRule() {
		return getOperatorDeclarationAccess().getRule();
	}

	//OperatorDeclarator:
	//	UnaryOperatorDeclarator | BinaryOperatorDeclarator | ConversionOperatorDeclarator;
	public OperatorDeclaratorElements getOperatorDeclaratorAccess() {
		return (pOperatorDeclarator != null) ? pOperatorDeclarator : (pOperatorDeclarator = new OperatorDeclaratorElements());
	}
	
	public ParserRule getOperatorDeclaratorRule() {
		return getOperatorDeclaratorAccess().getRule();
	}

	//ConversionOperatorDeclarator:
	//	ConversionKind "operator" Type "(" Type Identifier ")";
	public ConversionOperatorDeclaratorElements getConversionOperatorDeclaratorAccess() {
		return (pConversionOperatorDeclarator != null) ? pConversionOperatorDeclarator : (pConversionOperatorDeclarator = new ConversionOperatorDeclaratorElements());
	}
	
	public ParserRule getConversionOperatorDeclaratorRule() {
		return getConversionOperatorDeclaratorAccess().getRule();
	}

	//ConversionKind:
	//	"implicit" | "explicit";
	public ConversionKindElements getConversionKindAccess() {
		return (pConversionKind != null) ? pConversionKind : (pConversionKind = new ConversionKindElements());
	}
	
	public ParserRule getConversionKindRule() {
		return getConversionKindAccess().getRule();
	}

	//BinaryOperatorDeclarator:
	//	Type "operator" OverloadableBinaryOperator "(" Type Identifier "," Type Identifier ")";
	public BinaryOperatorDeclaratorElements getBinaryOperatorDeclaratorAccess() {
		return (pBinaryOperatorDeclarator != null) ? pBinaryOperatorDeclarator : (pBinaryOperatorDeclarator = new BinaryOperatorDeclaratorElements());
	}
	
	public ParserRule getBinaryOperatorDeclaratorRule() {
		return getBinaryOperatorDeclaratorAccess().getRule();
	}

	//OverloadableBinaryOperator:
	//	OPERATOR_OR_SIGN | "*" | "/" | "%" | AMPERSAND | BAR | "^" | "<<" | ">>" | "==" | "!=" | GREATER_THAN | LESS_THAN |
	//	">=" | "<=";
	public OverloadableBinaryOperatorElements getOverloadableBinaryOperatorAccess() {
		return (pOverloadableBinaryOperator != null) ? pOverloadableBinaryOperator : (pOverloadableBinaryOperator = new OverloadableBinaryOperatorElements());
	}
	
	public ParserRule getOverloadableBinaryOperatorRule() {
		return getOverloadableBinaryOperatorAccess().getRule();
	}

	//UnaryOperatorDeclarator:
	//	Type "operator" OverloadableUnaryOperator "(" Type Identifier ")";
	public UnaryOperatorDeclaratorElements getUnaryOperatorDeclaratorAccess() {
		return (pUnaryOperatorDeclarator != null) ? pUnaryOperatorDeclarator : (pUnaryOperatorDeclarator = new UnaryOperatorDeclaratorElements());
	}
	
	public ParserRule getUnaryOperatorDeclaratorRule() {
		return getUnaryOperatorDeclaratorAccess().getRule();
	}

	//OverloadableUnaryOperator:
	//	OPERATOR_OR_SIGN | INCREMENT_DECREMENT | "!" | "~" | "true" | "false";
	public OverloadableUnaryOperatorElements getOverloadableUnaryOperatorAccess() {
		return (pOverloadableUnaryOperator != null) ? pOverloadableUnaryOperator : (pOverloadableUnaryOperator = new OverloadableUnaryOperatorElements());
	}
	
	public ParserRule getOverloadableUnaryOperatorRule() {
		return getOverloadableUnaryOperatorAccess().getRule();
	}

	//OperatorModifier:
	//	"public" | "static" | "extern";
	public OperatorModifierElements getOperatorModifierAccess() {
		return (pOperatorModifier != null) ? pOperatorModifier : (pOperatorModifier = new OperatorModifierElements());
	}
	
	public ParserRule getOperatorModifierRule() {
		return getOperatorModifierAccess().getRule();
	}

	//IndexerDeclaration:
	//	IndexerModifier* IndexerDeclarator "{" AccessorDeclarations "}";
	public IndexerDeclarationElements getIndexerDeclarationAccess() {
		return (pIndexerDeclaration != null) ? pIndexerDeclaration : (pIndexerDeclaration = new IndexerDeclarationElements());
	}
	
	public ParserRule getIndexerDeclarationRule() {
		return getIndexerDeclarationAccess().getRule();
	}

	//IndexerDeclarator:
	//	Type ("this" "[" FormalParameterList "]" | QualifiedIdentifier "." "this" "[" FormalParameterList "]");
	public IndexerDeclaratorElements getIndexerDeclaratorAccess() {
		return (pIndexerDeclarator != null) ? pIndexerDeclarator : (pIndexerDeclarator = new IndexerDeclaratorElements());
	}
	
	public ParserRule getIndexerDeclaratorRule() {
		return getIndexerDeclaratorAccess().getRule();
	}

	//IndexerModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern";
	public IndexerModifierElements getIndexerModifierAccess() {
		return (pIndexerModifier != null) ? pIndexerModifier : (pIndexerModifier = new IndexerModifierElements());
	}
	
	public ParserRule getIndexerModifierRule() {
		return getIndexerModifierAccess().getRule();
	}

	//EventDeclaration:
	//	EventModifier* "event" Type ((VariableDeclarator ",")+ ";" | QualifiedIdentifier "{" EventAccessorDeclarations "}");
	public EventDeclarationElements getEventDeclarationAccess() {
		return (pEventDeclaration != null) ? pEventDeclaration : (pEventDeclaration = new EventDeclarationElements());
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}

	//EventAccessorDeclarations:
	//	Attributes (AddAccessorDeclaration Attributes RemoveAccessorDeclaration | RemoveAccessorDeclaration Attributes
	//	AddAccessorDeclaration);
	public EventAccessorDeclarationsElements getEventAccessorDeclarationsAccess() {
		return (pEventAccessorDeclarations != null) ? pEventAccessorDeclarations : (pEventAccessorDeclarations = new EventAccessorDeclarationsElements());
	}
	
	public ParserRule getEventAccessorDeclarationsRule() {
		return getEventAccessorDeclarationsAccess().getRule();
	}

	//RemoveAccessorDeclaration: //Block	
	// "remove";
	public RemoveAccessorDeclarationElements getRemoveAccessorDeclarationAccess() {
		return (pRemoveAccessorDeclaration != null) ? pRemoveAccessorDeclaration : (pRemoveAccessorDeclaration = new RemoveAccessorDeclarationElements());
	}
	
	public ParserRule getRemoveAccessorDeclarationRule() {
		return getRemoveAccessorDeclarationAccess().getRule();
	}

	/// *
	//Block:
	//	 "{" Statement* "}"
	//;
	// * / AddAccessorDeclaration: //Block
	// "add";
	public AddAccessorDeclarationElements getAddAccessorDeclarationAccess() {
		return (pAddAccessorDeclaration != null) ? pAddAccessorDeclaration : (pAddAccessorDeclaration = new AddAccessorDeclarationElements());
	}
	
	public ParserRule getAddAccessorDeclarationRule() {
		return getAddAccessorDeclarationAccess().getRule();
	}

	//EventModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
	//	"extern";
	public EventModifierElements getEventModifierAccess() {
		return (pEventModifier != null) ? pEventModifier : (pEventModifier = new EventModifierElements());
	}
	
	public ParserRule getEventModifierRule() {
		return getEventModifierAccess().getRule();
	}

	//PropertyDeclaration:
	//	PropertyModifier* Type QualifiedIdentifier "{" AccessorDeclarations "}";
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return (pPropertyDeclaration != null) ? pPropertyDeclaration : (pPropertyDeclaration = new PropertyDeclarationElements());
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	//AccessorDeclarations:
	//	Attributes (GetAccessorDeclaration Attributes SetAccessorDeclaration? | SetAccessorDeclaration Attributes
	//	GetAccessorDeclaration?);
	public AccessorDeclarationsElements getAccessorDeclarationsAccess() {
		return (pAccessorDeclarations != null) ? pAccessorDeclarations : (pAccessorDeclarations = new AccessorDeclarationsElements());
	}
	
	public ParserRule getAccessorDeclarationsRule() {
		return getAccessorDeclarationsAccess().getRule();
	}

	//SetAccessorDeclaration: //MaybeEmptyBlock	
	// "set";
	public SetAccessorDeclarationElements getSetAccessorDeclarationAccess() {
		return (pSetAccessorDeclaration != null) ? pSetAccessorDeclaration : (pSetAccessorDeclaration = new SetAccessorDeclarationElements());
	}
	
	public ParserRule getSetAccessorDeclarationRule() {
		return getSetAccessorDeclarationAccess().getRule();
	}

	//GetAccessorDeclaration: //MaybeEmptyBlock
	// "get";
	public GetAccessorDeclarationElements getGetAccessorDeclarationAccess() {
		return (pGetAccessorDeclaration != null) ? pGetAccessorDeclaration : (pGetAccessorDeclaration = new GetAccessorDeclarationElements());
	}
	
	public ParserRule getGetAccessorDeclarationRule() {
		return getGetAccessorDeclarationAccess().getRule();
	}

	//PropertyModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
	//	"extern";
	public PropertyModifierElements getPropertyModifierAccess() {
		return (pPropertyModifier != null) ? pPropertyModifier : (pPropertyModifier = new PropertyModifierElements());
	}
	
	public ParserRule getPropertyModifierRule() {
		return getPropertyModifierAccess().getRule();
	}

	//MethodDeclaration: //MaybeEmptyBlock
	// MethodHeader;
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return (pMethodDeclaration != null) ? pMethodDeclaration : (pMethodDeclaration = new MethodDeclarationElements());
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}

	//MethodHeader:
	//	Attributes MethodModifier* TypeOrVoid QualifiedIdentifier "(" FormalParameterList? ")";
	public MethodHeaderElements getMethodHeaderAccess() {
		return (pMethodHeader != null) ? pMethodHeader : (pMethodHeader = new MethodHeaderElements());
	}
	
	public ParserRule getMethodHeaderRule() {
		return getMethodHeaderAccess().getRule();
	}

	//FormalParameterList:
	//	FixedParameters ("," ParameterArray | ParameterArray);
	public FormalParameterListElements getFormalParameterListAccess() {
		return (pFormalParameterList != null) ? pFormalParameterList : (pFormalParameterList = new FormalParameterListElements());
	}
	
	public ParserRule getFormalParameterListRule() {
		return getFormalParameterListAccess().getRule();
	}

	//ParameterArray:
	//	Attributes "params" ArrayType Identifier;
	public ParameterArrayElements getParameterArrayAccess() {
		return (pParameterArray != null) ? pParameterArray : (pParameterArray = new ParameterArrayElements());
	}
	
	public ParserRule getParameterArrayRule() {
		return getParameterArrayAccess().getRule();
	}

	//FixedParameters:
	//	(FixedParameter ",")+;
	public FixedParametersElements getFixedParametersAccess() {
		return (pFixedParameters != null) ? pFixedParameters : (pFixedParameters = new FixedParametersElements());
	}
	
	public ParserRule getFixedParametersRule() {
		return getFixedParametersAccess().getRule();
	}

	//FixedParameter:
	//	ParameterModifier? Type Identifier;
	public FixedParameterElements getFixedParameterAccess() {
		return (pFixedParameter != null) ? pFixedParameter : (pFixedParameter = new FixedParameterElements());
	}
	
	public ParserRule getFixedParameterRule() {
		return getFixedParameterAccess().getRule();
	}

	//ParameterModifier:
	//	"ref" | "out";
	public ParameterModifierElements getParameterModifierAccess() {
		return (pParameterModifier != null) ? pParameterModifier : (pParameterModifier = new ParameterModifierElements());
	}
	
	public ParserRule getParameterModifierRule() {
		return getParameterModifierAccess().getRule();
	}

	//TypeOrVoid:
	//	Type | "void";
	public TypeOrVoidElements getTypeOrVoidAccess() {
		return (pTypeOrVoid != null) ? pTypeOrVoid : (pTypeOrVoid = new TypeOrVoidElements());
	}
	
	public ParserRule getTypeOrVoidRule() {
		return getTypeOrVoidAccess().getRule();
	}

	//MethodModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" |
	//	"extern";
	public MethodModifierElements getMethodModifierAccess() {
		return (pMethodModifier != null) ? pMethodModifier : (pMethodModifier = new MethodModifierElements());
	}
	
	public ParserRule getMethodModifierRule() {
		return getMethodModifierAccess().getRule();
	}

	//FieldDeclaration:
	//	FieldModifier* Type (VariableDeclarator ",")+ ";";
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return (pFieldDeclaration != null) ? pFieldDeclaration : (pFieldDeclaration = new FieldDeclarationElements());
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}

	//VariableDeclarator:
	//	Identifier Identifier "=" VariableInitializer;
	public VariableDeclaratorElements getVariableDeclaratorAccess() {
		return (pVariableDeclarator != null) ? pVariableDeclarator : (pVariableDeclarator = new VariableDeclaratorElements());
	}
	
	public ParserRule getVariableDeclaratorRule() {
		return getVariableDeclaratorAccess().getRule();
	}

	//VariableInitializer: //Expression|
	//	ArrayInitializer;
	public VariableInitializerElements getVariableInitializerAccess() {
		return (pVariableInitializer != null) ? pVariableInitializer : (pVariableInitializer = new VariableInitializerElements());
	}
	
	public ParserRule getVariableInitializerRule() {
		return getVariableInitializerAccess().getRule();
	}

	//ArrayInitializer:
	//	"{" "}" | "{" (VariableInitializer ",")+ ","? "}";
	public ArrayInitializerElements getArrayInitializerAccess() {
		return (pArrayInitializer != null) ? pArrayInitializer : (pArrayInitializer = new ArrayInitializerElements());
	}
	
	public ParserRule getArrayInitializerRule() {
		return getArrayInitializerAccess().getRule();
	}

	//FieldModifier:
	//	"new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile";
	public FieldModifierElements getFieldModifierAccess() {
		return (pFieldModifier != null) ? pFieldModifier : (pFieldModifier = new FieldModifierElements());
	}
	
	public ParserRule getFieldModifierRule() {
		return getFieldModifierAccess().getRule();
	}

	//ConstantDeclaration:
	//	ConstantModifier* "const" Type (ConstantDeclarator ",")+ ";";
	public ConstantDeclarationElements getConstantDeclarationAccess() {
		return (pConstantDeclaration != null) ? pConstantDeclaration : (pConstantDeclaration = new ConstantDeclarationElements());
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//ConstantModifier:
	//	"new" | "public" | "protected" | "internal" | "private";
	public ConstantModifierElements getConstantModifierAccess() {
		return (pConstantModifier != null) ? pConstantModifier : (pConstantModifier = new ConstantModifierElements());
	}
	
	public ParserRule getConstantModifierRule() {
		return getConstantModifierAccess().getRule();
	}

	////TODO
	// ConstantDeclarator:
	//	Identifier //Expression
	// "=";
	public ConstantDeclaratorElements getConstantDeclaratorAccess() {
		return (pConstantDeclarator != null) ? pConstantDeclarator : (pConstantDeclarator = new ConstantDeclaratorElements());
	}
	
	public ParserRule getConstantDeclaratorRule() {
		return getConstantDeclaratorAccess().getRule();
	}

	//ClassBase:
	//	":" (QualifiedIdentifierList | BuiltInClassType ("," QualifiedIdentifierList)?);
	public ClassBaseElements getClassBaseAccess() {
		return (pClassBase != null) ? pClassBase : (pClassBase = new ClassBaseElements());
	}
	
	public ParserRule getClassBaseRule() {
		return getClassBaseAccess().getRule();
	}

	//QualifiedIdentifierList:
	//	(QualifiedIdentifier ",")+;
	public QualifiedIdentifierListElements getQualifiedIdentifierListAccess() {
		return (pQualifiedIdentifierList != null) ? pQualifiedIdentifierList : (pQualifiedIdentifierList = new QualifiedIdentifierListElements());
	}
	
	public ParserRule getQualifiedIdentifierListRule() {
		return getQualifiedIdentifierListAccess().getRule();
	}

	//ClassModifier:
	//	Modifier | "abstract" | "sealed";
	public ClassModifierElements getClassModifierAccess() {
		return (pClassModifier != null) ? pClassModifier : (pClassModifier = new ClassModifierElements());
	}
	
	public ParserRule getClassModifierRule() {
		return getClassModifierAccess().getRule();
	}

	//GlobalAttributes:
	//	GlobalAttributeSection*;
	public GlobalAttributesElements getGlobalAttributesAccess() {
		return (pGlobalAttributes != null) ? pGlobalAttributes : (pGlobalAttributes = new GlobalAttributesElements());
	}
	
	public ParserRule getGlobalAttributesRule() {
		return getGlobalAttributesAccess().getRule();
	}

	//GlobalAttributeSection:
	//	"[" "assembly" ":" AttributeList ","? "]";
	public GlobalAttributeSectionElements getGlobalAttributeSectionAccess() {
		return (pGlobalAttributeSection != null) ? pGlobalAttributeSection : (pGlobalAttributeSection = new GlobalAttributeSectionElements());
	}
	
	public ParserRule getGlobalAttributeSectionRule() {
		return getGlobalAttributeSectionAccess().getRule();
	}

	//Attributes:
	//	AttributeSection*;
	public AttributesElements getAttributesAccess() {
		return (pAttributes != null) ? pAttributes : (pAttributes = new AttributesElements());
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}

	//AttributeSection:
	//	"[" (AttributeTarget ":")? AttributeList ","? "]";
	public AttributeSectionElements getAttributeSectionAccess() {
		return (pAttributeSection != null) ? pAttributeSection : (pAttributeSection = new AttributeSectionElements());
	}
	
	public ParserRule getAttributeSectionRule() {
		return getAttributeSectionAccess().getRule();
	}

	//AttributeTarget:
	//	"field" | "event" | "method" | "module" | "param" | "property" | "return" | "type";
	public AttributeTargetElements getAttributeTargetAccess() {
		return (pAttributeTarget != null) ? pAttributeTarget : (pAttributeTarget = new AttributeTargetElements());
	}
	
	public ParserRule getAttributeTargetRule() {
		return getAttributeTargetAccess().getRule();
	}

	//AttributeList:
	//	(Attribute ",")+;
	public AttributeListElements getAttributeListAccess() {
		return (pAttributeList != null) ? pAttributeList : (pAttributeList = new AttributeListElements());
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}

	//// AQUI
	// Attribute:
	//	AttributeName AttributeArguments?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AttributeArguments:
	//	"(" ExpressionList? ")";
	public AttributeArgumentsElements getAttributeArgumentsAccess() {
		return (pAttributeArguments != null) ? pAttributeArguments : (pAttributeArguments = new AttributeArgumentsElements());
	}
	
	public ParserRule getAttributeArgumentsRule() {
		return getAttributeArgumentsAccess().getRule();
	}

	//ExpressionList:
	//	(Expression ",")+;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//Expression:
	//	UnaryExpression (Expression2 | BAR Expression Expression2);
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Expression2:
	//	("?" Expression ":" Expression Expression2 | "||" Expression Expression2 | "&&" Expression Expression2 | BAR
	//	Expression Expression2 | "^" Expression Expression2 | AMPERSAND Expression Expression2 | EXPRESSION_EQUALITY_OPERATOR
	//	Expression Expression2 | ExpressionRelationalOperator Expression Expression2 | "is" BuiltInType Expression2 |
	//	ExpressionShiftOperator Expression Expression2 | OPERATOR_OR_SIGN Expression Expression2 | "*" Expression Expression2
	//	| "/" Expression Expression2 | "%" Expression Expression2)*;
	public Expression2Elements getExpression2Access() {
		return (pExpression2 != null) ? pExpression2 : (pExpression2 = new Expression2Elements());
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}

	////    |PrimaryExpression
	// UnaryExpression:
	//	ExpressionUnaryOperator UnaryExpression | "(" Type ")" UnaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//ExpressionUnaryOperator:
	//	OPERATOR_OR_PUNCTUATOR | INCREMENT_DECREMENT | "!" | "~" | "*";
	public ExpressionUnaryOperatorElements getExpressionUnaryOperatorAccess() {
		return (pExpressionUnaryOperator != null) ? pExpressionUnaryOperator : (pExpressionUnaryOperator = new ExpressionUnaryOperatorElements());
	}
	
	public ParserRule getExpressionUnaryOperatorRule() {
		return getExpressionUnaryOperatorAccess().getRule();
	}

	//ExpressionShiftOperator:
	//	"<<" | ">>";
	public ExpressionShiftOperatorElements getExpressionShiftOperatorAccess() {
		return (pExpressionShiftOperator != null) ? pExpressionShiftOperator : (pExpressionShiftOperator = new ExpressionShiftOperatorElements());
	}
	
	public ParserRule getExpressionShiftOperatorRule() {
		return getExpressionShiftOperatorAccess().getRule();
	}

	//ExpressionRelationalOperator:
	//	LESS_THAN | GREATER_THAN | "<=" | ">=" | "is" | "as";
	public ExpressionRelationalOperatorElements getExpressionRelationalOperatorAccess() {
		return (pExpressionRelationalOperator != null) ? pExpressionRelationalOperator : (pExpressionRelationalOperator = new ExpressionRelationalOperatorElements());
	}
	
	public ParserRule getExpressionRelationalOperatorRule() {
		return getExpressionRelationalOperatorAccess().getRule();
	}

	//AttributeName:
	//	QualifiedIdentifier;
	public AttributeNameElements getAttributeNameAccess() {
		return (pAttributeName != null) ? pAttributeName : (pAttributeName = new AttributeNameElements());
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//UsingDirective:
	//	"using" (Identifier "=")? QualifiedIdentifier ";";
	public UsingDirectiveElements getUsingDirectiveAccess() {
		return (pUsingDirective != null) ? pUsingDirective : (pUsingDirective = new UsingDirectiveElements());
	}
	
	public ParserRule getUsingDirectiveRule() {
		return getUsingDirectiveAccess().getRule();
	}

	//Type:
	//	NonArrayType RANK_SPECIFIER*;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//IntegralType:
	//	"sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char";
	public IntegralTypeElements getIntegralTypeAccess() {
		return (pIntegralType != null) ? pIntegralType : (pIntegralType = new IntegralTypeElements());
	}
	
	public ParserRule getIntegralTypeRule() {
		return getIntegralTypeAccess().getRule();
	}

	//ArrayType:
	//	NonArrayType RANK_SPECIFIER+;
	public ArrayTypeElements getArrayTypeAccess() {
		return (pArrayType != null) ? pArrayType : (pArrayType = new ArrayTypeElements());
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//EnumType:
	//	Attributes EnumModifier* "enum" ID (":" IntegralType)? EnumBody ";"?;
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//NonArrayType: //QualifiedIdentifier|
	//	BuiltInType;
	public NonArrayTypeElements getNonArrayTypeAccess() {
		return (pNonArrayType != null) ? pNonArrayType : (pNonArrayType = new NonArrayTypeElements());
	}
	
	public ParserRule getNonArrayTypeRule() {
		return getNonArrayTypeAccess().getRule();
	}

	//QualifiedIdentifier:
	//	(Identifier ".")+;
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return (pQualifiedIdentifier != null) ? pQualifiedIdentifier : (pQualifiedIdentifier = new QualifiedIdentifierElements());
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}

	//BuiltInType:
	//	IntegralType | BuiltInClassType | "bool" | "decimal" | "float" | "double";
	public BuiltInTypeElements getBuiltInTypeAccess() {
		return (pBuiltInType != null) ? pBuiltInType : (pBuiltInType = new BuiltInTypeElements());
	}
	
	public ParserRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}

	//BuiltInClassType:
	//	"object" | "string";
	public BuiltInClassTypeElements getBuiltInClassTypeAccess() {
		return (pBuiltInClassType != null) ? pBuiltInClassType : (pBuiltInClassType = new BuiltInClassTypeElements());
	}
	
	public ParserRule getBuiltInClassTypeRule() {
		return getBuiltInClassTypeAccess().getRule();
	}

	//EnumBody:
	//	"{" "}" | "{" (EnumMemberDeclaration ",")+ ","? "}";
	public EnumBodyElements getEnumBodyAccess() {
		return (pEnumBody != null) ? pEnumBody : (pEnumBody = new EnumBodyElements());
	}
	
	public ParserRule getEnumBodyRule() {
		return getEnumBodyAccess().getRule();
	}

	//EnumMemberDeclaration:
	//	Attributes Identifier ("=" Expression)?;
	public EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return (pEnumMemberDeclaration != null) ? pEnumMemberDeclaration : (pEnumMemberDeclaration = new EnumMemberDeclarationElements());
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}

	//EnumModifier:
	//	"new" | "public" | "protected" | "internal" | "private";
	public EnumModifierElements getEnumModifierAccess() {
		return (pEnumModifier != null) ? pEnumModifier : (pEnumModifier = new EnumModifierElements());
	}
	
	public ParserRule getEnumModifierRule() {
		return getEnumModifierAccess().getRule();
	}

	//terminal EXPRESSION_EQUALITY_OPERATOR:
	//	"==" | "!=";
	public TerminalRule getEXPRESSION_EQUALITY_OPERATORRule() {
		return (tEXPRESSION_EQUALITY_OPERATOR != null) ? tEXPRESSION_EQUALITY_OPERATOR : (tEXPRESSION_EQUALITY_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_EQUALITY_OPERATOR"));
	} 

	//terminal LESS_THAN:
	//	"<";
	public TerminalRule getLESS_THANRule() {
		return (tLESS_THAN != null) ? tLESS_THAN : (tLESS_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS_THAN"));
	} 

	//terminal GREATER_THAN:
	//	">";
	public TerminalRule getGREATER_THANRule() {
		return (tGREATER_THAN != null) ? tGREATER_THAN : (tGREATER_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GREATER_THAN"));
	} 

	//terminal BAR:
	//	"|";
	public TerminalRule getBARRule() {
		return (tBAR != null) ? tBAR : (tBAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BAR"));
	} 

	//terminal AMPERSAND:
	//	"&";
	public TerminalRule getAMPERSANDRule() {
		return (tAMPERSAND != null) ? tAMPERSAND : (tAMPERSAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AMPERSAND"));
	} 

	//terminal INCREMENT_DECREMENT:
	//	"++" | "--";
	public TerminalRule getINCREMENT_DECREMENTRule() {
		return (tINCREMENT_DECREMENT != null) ? tINCREMENT_DECREMENT : (tINCREMENT_DECREMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCREMENT_DECREMENT"));
	} 

	//terminal OPERATOR_OR_SIGN:
	//	"+" | "-";
	public TerminalRule getOPERATOR_OR_SIGNRule() {
		return (tOPERATOR_OR_SIGN != null) ? tOPERATOR_OR_SIGN : (tOPERATOR_OR_SIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR_OR_SIGN"));
	} 

	//terminal REAL_TYPE_SUFFIX:
	//	"F" | "f" | "D" | "d" | "M" | "m";
	public TerminalRule getREAL_TYPE_SUFFIXRule() {
		return (tREAL_TYPE_SUFFIX != null) ? tREAL_TYPE_SUFFIX : (tREAL_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL_TYPE_SUFFIX"));
	} 

	//terminal LETTER:
	//	"A".."Z" | "a".."z";
	public TerminalRule getLETTERRule() {
		return (tLETTER != null) ? tLETTER : (tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER"));
	} 

	//terminal IDENTIFIER_START_CHARACTER:
	//	LETTER | "_";
	public TerminalRule getIDENTIFIER_START_CHARACTERRule() {
		return (tIDENTIFIER_START_CHARACTER != null) ? tIDENTIFIER_START_CHARACTER : (tIDENTIFIER_START_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER_START_CHARACTER"));
	} 

	//terminal QUOTE_ESCAPE_SEQUENCE:
	//	"\"\"";
	public TerminalRule getQUOTE_ESCAPE_SEQUENCERule() {
		return (tQUOTE_ESCAPE_SEQUENCE != null) ? tQUOTE_ESCAPE_SEQUENCE : (tQUOTE_ESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTE_ESCAPE_SEQUENCE"));
	} 

	//terminal ESCAPE_SEQUENCE:
	//	"\'" | "\"" | "\\" | "0" | "a" | "b" | "f" | "n" | "r" | "t" | "v";
	public TerminalRule getESCAPE_SEQUENCERule() {
		return (tESCAPE_SEQUENCE != null) ? tESCAPE_SEQUENCE : (tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE"));
	} 

	//terminal NEW_LINE:
	//	("\r" | "\n")* EOF;
	public TerminalRule getNEW_LINERule() {
		return (tNEW_LINE != null) ? tNEW_LINE : (tNEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEW_LINE"));
	} 

	//terminal RANK_SPECIFIER:
	//	"[" ","* "]";
	public TerminalRule getRANK_SPECIFIERRule() {
		return (tRANK_SPECIFIER != null) ? tRANK_SPECIFIER : (tRANK_SPECIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RANK_SPECIFIER"));
	} 

	//terminal INTEGER_TYPE_SUFFIX:
	//	"U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu";
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return (tINTEGER_TYPE_SUFFIX != null) ? tINTEGER_TYPE_SUFFIX : (tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_TYPE_SUFFIX"));
	} 

	//terminal HEX_DIGIT:
	//	"0".."9" | ("A".."F" | "a".."f");
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal OPERATOR_OR_PUNCTUATOR:
	//	"{" | "}" | "[" | "]" | "(" | ")" | "." | "," | ":" | ";" | "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "!" | "~"
	//	| "=" | "<" | ">" | "?" | "++" | "--" | "&&" | "||" | "<<" | ">>" | "==" | "!=" | "<=" | ">=" | "+=" | "-=" | "*=" |
	//	"/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "->";
	public TerminalRule getOPERATOR_OR_PUNCTUATORRule() {
		return (tOPERATOR_OR_PUNCTUATOR != null) ? tOPERATOR_OR_PUNCTUATOR : (tOPERATOR_OR_PUNCTUATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR_OR_PUNCTUATOR"));
	} 

	//terminal SINGLE_CHARACTER:
	//	.?;
	public TerminalRule getSINGLE_CHARACTERRule() {
		return (tSINGLE_CHARACTER != null) ? tSINGLE_CHARACTER : (tSINGLE_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_CHARACTER"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
