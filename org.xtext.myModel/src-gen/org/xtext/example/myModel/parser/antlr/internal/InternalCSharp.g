/*
* generated by Xtext
*/
grammar InternalCSharp;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.myModel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.myModel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.myModel.services.CSharpGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private CSharpGrammarAccess grammarAccess;
 	
    public InternalCSharpParser(TokenStream input, CSharpGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CSharpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getInputsCompilationUnitParserRuleCall_0()); 
	    }
		lv_inputs_0_0=ruleCompilationUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_0_0, 
        		"CompilationUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePredefinedType
entryRulePredefinedType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredefinedTypeRule()); } 
	 iv_rulePredefinedType=rulePredefinedType 
	 { $current=$iv_rulePredefinedType.current.getText(); }  
	 EOF 
;

// Rule PredefinedType
rulePredefinedType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getBoolKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getByteKeyword_1()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getCharKeyword_2()); 
    }

    |
	kw='decimal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getDecimalKeyword_3()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getDoubleKeyword_4()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getFloatKeyword_5()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getIntKeyword_6()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getLongKeyword_7()); 
    }

    |
	kw='object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getObjectKeyword_8()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getShortKeyword_9()); 
    }

    |
	kw='sbyte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getSbyteKeyword_10()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getStringKeyword_11()); 
    }

    |
	kw='uint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getUintKeyword_12()); 
    }

    |(
	kw='ulong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getUlongKeyword_13_0()); 
    }

	kw='ushort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredefinedTypeAccess().getUshortKeyword_13_1()); 
    }
))
    ;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral    {
		$current.merge(this_BooleanLiteral_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_1()); 
    }
    this_IntegerLiteral_1=ruleIntegerLiteral    {
		$current.merge(this_IntegerLiteral_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_2()); 
    }
    this_RealLiteral_2=ruleRealLiteral    {
		$current.merge(this_RealLiteral_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getCharacterLiteralParserRuleCall_3()); 
    }
    this_CharacterLiteral_3=ruleCharacterLiteral    {
		$current.merge(this_CharacterLiteral_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral    {
		$current.merge(this_StringLiteral_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_5()); 
    }
    this_NullLiteral_5=ruleNullLiteral    {
		$current.merge(this_NullLiteral_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); } 
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current.getText(); }  
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNullLiteralAccess().getNullKeyword()); 
    }

    ;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); } 
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current.getText(); }  
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); } 
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current.getText(); }  
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='0x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerLiteralAccess().getXKeyword_0_0_0()); 
    }

    |
	kw='0X' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerLiteralAccess().getXKeyword_0_0_1()); 
    }
)(    this_HEX_DIGIT_2=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_2);
    }

    { 
    newLeafNode(this_HEX_DIGIT_2, grammarAccess.getIntegerLiteralAccess().getHEX_DIGITTerminalRuleCall_0_1()); 
    }
)+    this_INTEGER_TYPE_SUFFIX_3=RULE_INTEGER_TYPE_SUFFIX    {
		$current.merge(this_INTEGER_TYPE_SUFFIX_3);
    }

    { 
    newLeafNode(this_INTEGER_TYPE_SUFFIX_3, grammarAccess.getIntegerLiteralAccess().getINTEGER_TYPE_SUFFIXTerminalRuleCall_0_2()); 
    }
)
    |(    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getIntegerLiteralAccess().getINTTerminalRuleCall_1_0()); 
    }
(    this_INTEGER_TYPE_SUFFIX_5=RULE_INTEGER_TYPE_SUFFIX    {
		$current.merge(this_INTEGER_TYPE_SUFFIX_5);
    }

    { 
    newLeafNode(this_INTEGER_TYPE_SUFFIX_5, grammarAccess.getIntegerLiteralAccess().getINTEGER_TYPE_SUFFIXTerminalRuleCall_1_1()); 
    }
)?))
    ;





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); } 
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current.getText(); }  
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getRealLiteralAccess().getINTTerminalRuleCall_0_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealLiteralAccess().getFullStopKeyword_0_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getRealLiteralAccess().getINTTerminalRuleCall_0_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getRealLiteralAccess().getExponentPartParserRuleCall_0_3()); 
    }
    this_ExponentPart_3=ruleExponentPart    {
		$current.merge(this_ExponentPart_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(    this_REAL_TYPE_SUFFIX_4=RULE_REAL_TYPE_SUFFIX    {
		$current.merge(this_REAL_TYPE_SUFFIX_4);
    }

    { 
    newLeafNode(this_REAL_TYPE_SUFFIX_4, grammarAccess.getRealLiteralAccess().getREAL_TYPE_SUFFIXTerminalRuleCall_0_4()); 
    }
)?)
    |(    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getRealLiteralAccess().getINTTerminalRuleCall_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRealLiteralAccess().getExponentPartParserRuleCall_1_1()); 
    }
    this_ExponentPart_6=ruleExponentPart    {
		$current.merge(this_ExponentPart_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_REAL_TYPE_SUFFIX_7=RULE_REAL_TYPE_SUFFIX    {
		$current.merge(this_REAL_TYPE_SUFFIX_7);
    }

    { 
    newLeafNode(this_REAL_TYPE_SUFFIX_7, grammarAccess.getRealLiteralAccess().getREAL_TYPE_SUFFIXTerminalRuleCall_1_2()); 
    }
)?)
    |(    this_INT_8=RULE_INT    {
		$current.merge(this_INT_8);
    }

    { 
    newLeafNode(this_INT_8, grammarAccess.getRealLiteralAccess().getINTTerminalRuleCall_2_0()); 
    }
    this_REAL_TYPE_SUFFIX_9=RULE_REAL_TYPE_SUFFIX    {
		$current.merge(this_REAL_TYPE_SUFFIX_9);
    }

    { 
    newLeafNode(this_REAL_TYPE_SUFFIX_9, grammarAccess.getRealLiteralAccess().getREAL_TYPE_SUFFIXTerminalRuleCall_2_1()); 
    }
))
    ;





// Entry rule entryRuleExponentPart
entryRuleExponentPart returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExponentPartRule()); } 
	 iv_ruleExponentPart=ruleExponentPart 
	 { $current=$iv_ruleExponentPart.current.getText(); }  
	 EOF 
;

// Rule ExponentPart
ruleExponentPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExponentPartAccess().getEKeyword_0_0()); 
    }
(    this_OPERATOR_OR_SIGN_1=RULE_OPERATOR_OR_SIGN    {
		$current.merge(this_OPERATOR_OR_SIGN_1);
    }

    { 
    newLeafNode(this_OPERATOR_OR_SIGN_1, grammarAccess.getExponentPartAccess().getOPERATOR_OR_SIGNTerminalRuleCall_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getExponentPartAccess().getINTTerminalRuleCall_0_2()); 
    }
)
    |(
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExponentPartAccess().getEKeyword_1_0()); 
    }
(    this_OPERATOR_OR_SIGN_4=RULE_OPERATOR_OR_SIGN    {
		$current.merge(this_OPERATOR_OR_SIGN_4);
    }

    { 
    newLeafNode(this_OPERATOR_OR_SIGN_4, grammarAccess.getExponentPartAccess().getOPERATOR_OR_SIGNTerminalRuleCall_1_1()); 
    }
)?    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getExponentPartAccess().getINTTerminalRuleCall_1_2()); 
    }
))
    ;





// Entry rule entryRuleCharacterLiteral
entryRuleCharacterLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharacterLiteralRule()); } 
	 iv_ruleCharacterLiteral=ruleCharacterLiteral 
	 { $current=$iv_ruleCharacterLiteral.current.getText(); }  
	 EOF 
;

// Rule CharacterLiteral
ruleCharacterLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCharacterLiteralAccess().getApostropheKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCharacterLiteralAccess().getCharacterParserRuleCall_1()); 
    }
    this_Character_1=ruleCharacter    {
		$current.merge(this_Character_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCharacterLiteralAccess().getApostropheKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleCharacter
entryRuleCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharacterRule()); } 
	 iv_ruleCharacter=ruleCharacter 
	 { $current=$iv_ruleCharacter.current.getText(); }  
	 EOF 
;

// Rule Character
ruleCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SINGLE_CHARACTER_0=RULE_SINGLE_CHARACTER    {
		$current.merge(this_SINGLE_CHARACTER_0);
    }

    { 
    newLeafNode(this_SINGLE_CHARACTER_0, grammarAccess.getCharacterAccess().getSINGLE_CHARACTERTerminalRuleCall_0()); 
    }

    |(
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCharacterAccess().getReverseSolidusKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCharacterAccess().getEscapeSequenceParserRuleCall_1_1()); 
    }
    this_EscapeSequence_2=ruleEscapeSequence    {
		$current.merge(this_EscapeSequence_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleEscapeSequence
entryRuleEscapeSequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEscapeSequenceRule()); } 
	 iv_ruleEscapeSequence=ruleEscapeSequence 
	 { $current=$iv_ruleEscapeSequence.current.getText(); }  
	 EOF 
;

// Rule EscapeSequence
ruleEscapeSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ESCAPE_SEQUENCE_0=RULE_ESCAPE_SEQUENCE    {
		$current.merge(this_ESCAPE_SEQUENCE_0);
    }

    { 
    newLeafNode(this_ESCAPE_SEQUENCE_0, grammarAccess.getEscapeSequenceAccess().getESCAPE_SEQUENCETerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getEscapeSequenceAccess().getHexadecimalEscapeSequenceParserRuleCall_1()); 
    }
    this_HexadecimalEscapeSequence_1=ruleHexadecimalEscapeSequence    {
		$current.merge(this_HexadecimalEscapeSequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEscapeSequenceAccess().getUnicodeCharacterEscapeSequenceParserRuleCall_2()); 
    }
    this_UnicodeCharacterEscapeSequence_2=ruleUnicodeCharacterEscapeSequence    {
		$current.merge(this_UnicodeCharacterEscapeSequence_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleUnicodeCharacterEscapeSequence
entryRuleUnicodeCharacterEscapeSequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnicodeCharacterEscapeSequenceRule()); } 
	 iv_ruleUnicodeCharacterEscapeSequence=ruleUnicodeCharacterEscapeSequence 
	 { $current=$iv_ruleUnicodeCharacterEscapeSequence.current.getText(); }  
	 EOF 
;

// Rule UnicodeCharacterEscapeSequence
ruleUnicodeCharacterEscapeSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='u' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getUKeyword_0_0()); 
    }
    this_HEX_DIGIT_1=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_1);
    }

    { 
    newLeafNode(this_HEX_DIGIT_1, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_0_1()); 
    }
    this_HEX_DIGIT_2=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_2);
    }

    { 
    newLeafNode(this_HEX_DIGIT_2, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_0_2()); 
    }
    this_HEX_DIGIT_3=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_3);
    }

    { 
    newLeafNode(this_HEX_DIGIT_3, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_0_3()); 
    }
    this_HEX_DIGIT_4=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_4);
    }

    { 
    newLeafNode(this_HEX_DIGIT_4, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_0_4()); 
    }
)
    |(
	kw='U' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getUKeyword_1_0()); 
    }
    this_HEX_DIGIT_6=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_6);
    }

    { 
    newLeafNode(this_HEX_DIGIT_6, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_1()); 
    }
    this_HEX_DIGIT_7=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_7);
    }

    { 
    newLeafNode(this_HEX_DIGIT_7, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_2()); 
    }
    this_HEX_DIGIT_8=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_8);
    }

    { 
    newLeafNode(this_HEX_DIGIT_8, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_3()); 
    }
    this_HEX_DIGIT_9=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_9);
    }

    { 
    newLeafNode(this_HEX_DIGIT_9, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_4()); 
    }
    this_HEX_DIGIT_10=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_10);
    }

    { 
    newLeafNode(this_HEX_DIGIT_10, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_5()); 
    }
    this_HEX_DIGIT_11=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_11);
    }

    { 
    newLeafNode(this_HEX_DIGIT_11, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_6()); 
    }
    this_HEX_DIGIT_12=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_12);
    }

    { 
    newLeafNode(this_HEX_DIGIT_12, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_7()); 
    }
    this_HEX_DIGIT_13=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_13);
    }

    { 
    newLeafNode(this_HEX_DIGIT_13, grammarAccess.getUnicodeCharacterEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1_8()); 
    }
))
    ;





// Entry rule entryRuleHexadecimalEscapeSequence
entryRuleHexadecimalEscapeSequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHexadecimalEscapeSequenceRule()); } 
	 iv_ruleHexadecimalEscapeSequence=ruleHexadecimalEscapeSequence 
	 { $current=$iv_ruleHexadecimalEscapeSequence.current.getText(); }  
	 EOF 
;

// Rule HexadecimalEscapeSequence
ruleHexadecimalEscapeSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHexadecimalEscapeSequenceAccess().getXKeyword_0()); 
    }
    this_HEX_DIGIT_1=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_1);
    }

    { 
    newLeafNode(this_HEX_DIGIT_1, grammarAccess.getHexadecimalEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_1()); 
    }
(    this_HEX_DIGIT_2=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_2);
    }

    { 
    newLeafNode(this_HEX_DIGIT_2, grammarAccess.getHexadecimalEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_2_0()); 
    }
(    this_HEX_DIGIT_3=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_3);
    }

    { 
    newLeafNode(this_HEX_DIGIT_3, grammarAccess.getHexadecimalEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_2_1_0()); 
    }
(    this_HEX_DIGIT_4=RULE_HEX_DIGIT    {
		$current.merge(this_HEX_DIGIT_4);
    }

    { 
    newLeafNode(this_HEX_DIGIT_4, grammarAccess.getHexadecimalEscapeSequenceAccess().getHEX_DIGITTerminalRuleCall_2_1_1()); 
    }
)?)?)?)
    ;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getQuotationMarkKeyword_0_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getStringLiteralAccess().getRegularStringCharacterParserRuleCall_0_1()); 
    }
    this_RegularStringCharacter_1=ruleRegularStringCharacter    {
		$current.merge(this_RegularStringCharacter_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getQuotationMarkKeyword_0_2()); 
    }
)
    |(
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getCommercialAtKeyword_1_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getStringLiteralAccess().getVerbatimStringCharacterParserRuleCall_1_1()); 
    }
    this_VerbatimStringCharacter_4=ruleVerbatimStringCharacter    {
		$current.merge(this_VerbatimStringCharacter_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringLiteralAccess().getQuotationMarkKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleVerbatimStringCharacter
entryRuleVerbatimStringCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVerbatimStringCharacterRule()); } 
	 iv_ruleVerbatimStringCharacter=ruleVerbatimStringCharacter 
	 { $current=$iv_ruleVerbatimStringCharacter.current.getText(); }  
	 EOF 
;

// Rule VerbatimStringCharacter
ruleVerbatimStringCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SINGLE_CHARACTER_0=RULE_SINGLE_CHARACTER    {
		$current.merge(this_SINGLE_CHARACTER_0);
    }

    { 
    newLeafNode(this_SINGLE_CHARACTER_0, grammarAccess.getVerbatimStringCharacterAccess().getSINGLE_CHARACTERTerminalRuleCall_0()); 
    }

    |    this_QUOTE_ESCAPE_SEQUENCE_1=RULE_QUOTE_ESCAPE_SEQUENCE    {
		$current.merge(this_QUOTE_ESCAPE_SEQUENCE_1);
    }

    { 
    newLeafNode(this_QUOTE_ESCAPE_SEQUENCE_1, grammarAccess.getVerbatimStringCharacterAccess().getQUOTE_ESCAPE_SEQUENCETerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRegularStringCharacter
entryRuleRegularStringCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegularStringCharacterRule()); } 
	 iv_ruleRegularStringCharacter=ruleRegularStringCharacter 
	 { $current=$iv_ruleRegularStringCharacter.current.getText(); }  
	 EOF 
;

// Rule RegularStringCharacter
ruleRegularStringCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SINGLE_CHARACTER_0=RULE_SINGLE_CHARACTER    {
		$current.merge(this_SINGLE_CHARACTER_0);
    }

    { 
    newLeafNode(this_SINGLE_CHARACTER_0, grammarAccess.getRegularStringCharacterAccess().getSINGLE_CHARACTERTerminalRuleCall_0()); 
    }

    |(
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRegularStringCharacterAccess().getReverseSolidusKeyword_1_0()); 
    }
    this_ESCAPE_SEQUENCE_2=RULE_ESCAPE_SEQUENCE    {
		$current.merge(this_ESCAPE_SEQUENCE_2);
    }

    { 
    newLeafNode(this_ESCAPE_SEQUENCE_2, grammarAccess.getRegularStringCharacterAccess().getESCAPE_SEQUENCETerminalRuleCall_1_1()); 
    }
))
    ;







// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIdentifierAccess().getAvailableIdentifierParserRuleCall_0()); 
    }
    this_AvailableIdentifier_0=ruleAvailableIdentifier    {
		$current.merge(this_AvailableIdentifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifierAccess().getCommercialAtKeyword_1_0()); 
    }
    this_IDENTIFIER_START_CHARACTER_2=RULE_IDENTIFIER_START_CHARACTER    {
		$current.merge(this_IDENTIFIER_START_CHARACTER_2);
    }

    { 
    newLeafNode(this_IDENTIFIER_START_CHARACTER_2, grammarAccess.getIdentifierAccess().getIDENTIFIER_START_CHARACTERTerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRuleAvailableIdentifier
entryRuleAvailableIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAvailableIdentifierRule()); } 
	 iv_ruleAvailableIdentifier=ruleAvailableIdentifier 
	 { $current=$iv_ruleAvailableIdentifier.current.getText(); }  
	 EOF 
;

// Rule AvailableIdentifier
ruleAvailableIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAvailableIdentifierAccess().getIdentifierOrKeywordParserRuleCall()); 
    }
    this_IdentifierOrKeyword_0=ruleIdentifierOrKeyword    {
		$current.merge(this_IdentifierOrKeyword_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleIdentifierOrKeyword
entryRuleIdentifierOrKeyword returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierOrKeywordRule()); } 
	 iv_ruleIdentifierOrKeyword=ruleIdentifierOrKeyword 
	 { $current=$iv_ruleIdentifierOrKeyword.current.getText(); }  
	 EOF 
;

// Rule IdentifierOrKeyword
ruleIdentifierOrKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_START_CHARACTER_0=RULE_IDENTIFIER_START_CHARACTER    {
		$current.merge(this_IDENTIFIER_START_CHARACTER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_START_CHARACTER_0, grammarAccess.getIdentifierOrKeywordAccess().getIDENTIFIER_START_CHARACTERTerminalRuleCall_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getIdentifierOrKeywordAccess().getIdentifierPartCharacterParserRuleCall_1()); 
    }
    this_IdentifierPartCharacter_1=ruleIdentifierPartCharacter    {
		$current.merge(this_IdentifierPartCharacter_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleIdentifierPartCharacter
entryRuleIdentifierPartCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierPartCharacterRule()); } 
	 iv_ruleIdentifierPartCharacter=ruleIdentifierPartCharacter 
	 { $current=$iv_ruleIdentifierPartCharacter.current.getText(); }  
	 EOF 
;

// Rule IdentifierPartCharacter
ruleIdentifierPartCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_LETTER_0=RULE_LETTER    {
		$current.merge(this_LETTER_0);
    }

    { 
    newLeafNode(this_LETTER_0, grammarAccess.getIdentifierPartCharacterAccess().getLETTERTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIdentifierPartCharacterAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilationUnitRule()); } 
	 iv_ruleCompilationUnit=ruleCompilationUnit 
	 { $current=$iv_ruleCompilationUnit.current.getText(); }  
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getUsingDirectiveParserRuleCall_0()); 
    }
    this_UsingDirective_0=ruleUsingDirective    {
		$current.merge(this_UsingDirective_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getGlobalAttributesParserRuleCall_1()); 
    }
    this_GlobalAttributes_1=ruleGlobalAttributes    {
		$current.merge(this_GlobalAttributes_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getNamespaceMemberDeclarationParserRuleCall_2()); 
    }
    this_NamespaceMemberDeclaration_2=ruleNamespaceMemberDeclaration    {
		$current.merge(this_NamespaceMemberDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNamespaceMemberDeclaration
entryRuleNamespaceMemberDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceMemberDeclarationRule()); } 
	 iv_ruleNamespaceMemberDeclaration=ruleNamespaceMemberDeclaration 
	 { $current=$iv_ruleNamespaceMemberDeclaration.current.getText(); }  
	 EOF 
;

// Rule NamespaceMemberDeclaration
ruleNamespaceMemberDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNamespaceMemberDeclarationAccess().getNamespaceDeclarationParserRuleCall_0()); 
    }
    this_NamespaceDeclaration_0=ruleNamespaceDeclaration    {
		$current.merge(this_NamespaceDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamespaceMemberDeclarationAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration    {
		$current.merge(this_TypeDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNamespaceDeclaration
entryRuleNamespaceDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceDeclarationRule()); } 
	 iv_ruleNamespaceDeclaration=ruleNamespaceDeclaration 
	 { $current=$iv_ruleNamespaceDeclaration.current.getText(); }  
	 EOF 
;

// Rule NamespaceDeclaration
ruleNamespaceDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='namespace' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNamespaceDeclarationAccess().getNamespaceKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getNamespaceDeclarationAccess().getQualifiedIdentifierParserRuleCall_1()); 
    }
    this_QualifiedIdentifier_1=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getNamespaceDeclarationAccess().getNamespaceBodyParserRuleCall_2()); 
    }
    this_NamespaceBody_2=ruleNamespaceBody    {
		$current.merge(this_NamespaceBody_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNamespaceDeclarationAccess().getSemicolonKeyword_3()); 
    }
)?)
    ;





// Entry rule entryRuleNamespaceBody
entryRuleNamespaceBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceBodyRule()); } 
	 iv_ruleNamespaceBody=ruleNamespaceBody 
	 { $current=$iv_ruleNamespaceBody.current.getText(); }  
	 EOF 
;

// Rule NamespaceBody
ruleNamespaceBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNamespaceBodyAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getNamespaceBodyAccess().getUsingDirectiveParserRuleCall_1()); 
    }
    this_UsingDirective_1=ruleUsingDirective    {
		$current.merge(this_UsingDirective_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getNamespaceBodyAccess().getNamespaceMemberDeclarationParserRuleCall_2()); 
    }
    this_NamespaceMemberDeclaration_2=ruleNamespaceMemberDeclaration    {
		$current.merge(this_NamespaceMemberDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNamespaceBodyAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); } 
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current.getText(); }  
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getClassDeclarationParserRuleCall_0()); 
    }
    this_ClassDeclaration_0=ruleClassDeclaration    {
		$current.merge(this_ClassDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |((
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getModifierParserRuleCall_1_0()); 
    }
    this_Modifier_1=ruleModifier    {
		$current.merge(this_Modifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getStructDeclarationParserRuleCall_1_1_0()); 
    }
    this_StructDeclaration_2=ruleStructDeclaration    {
		$current.merge(this_StructDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getInterfaceDeclarationParserRuleCall_1_1_1()); 
    }
    this_InterfaceDeclaration_3=ruleInterfaceDeclaration    {
		$current.merge(this_InterfaceDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getEnumDeclarationParserRuleCall_1_1_2()); 
    }
    this_EnumDeclaration_4=ruleEnumDeclaration    {
		$current.merge(this_EnumDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getDelegateDeclarationParserRuleCall_1_1_3()); 
    }
    this_DelegateDeclaration_5=ruleDelegateDeclaration    {
		$current.merge(this_DelegateDeclaration_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    ;





// Entry rule entryRuleDelegateDeclaration
entryRuleDelegateDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelegateDeclarationRule()); } 
	 iv_ruleDelegateDeclaration=ruleDelegateDeclaration 
	 { $current=$iv_ruleDelegateDeclaration.current.getText(); }  
	 EOF 
;

// Rule DelegateDeclaration
ruleDelegateDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='delegate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelegateDeclarationAccess().getDelegateKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getDelegateDeclarationAccess().getTypeOrVoidParserRuleCall_1()); 
    }
    this_TypeOrVoid_1=ruleTypeOrVoid    {
		$current.merge(this_TypeOrVoid_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getDelegateDeclarationAccess().getIdentifierParserRuleCall_2()); 
    }
    this_Identifier_2=ruleIdentifier    {
		$current.merge(this_Identifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelegateDeclarationAccess().getLeftParenthesisKeyword_3()); 
    }
(( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getDelegateDeclarationAccess().getFormalParameterListParserRuleCall_4()); 
    }
    this_FormalParameterList_4=ruleFormalParameterList    {
		$current.merge(this_FormalParameterList_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelegateDeclarationAccess().getRightParenthesisKeyword_5()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelegateDeclarationAccess().getSemicolonKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleEnumDeclaration
entryRuleEnumDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDeclarationRule()); } 
	 iv_ruleEnumDeclaration=ruleEnumDeclaration 
	 { $current=$iv_ruleEnumDeclaration.current.getText(); }  
	 EOF 
;

// Rule EnumDeclaration
ruleEnumDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumDeclarationAccess().getEnumKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getIdentifierParserRuleCall_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumDeclarationAccess().getColonKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getIntegralTypeParserRuleCall_2_1()); 
    }
    this_IntegralType_3=ruleIntegralType    {
		$current.merge(this_IntegralType_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getEnumBodyParserRuleCall_3()); 
    }
    this_EnumBody_4=ruleEnumBody    {
		$current.merge(this_EnumBody_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumDeclarationAccess().getSemicolonKeyword_4()); 
    }
)?)
    ;





// Entry rule entryRuleInterfaceDeclaration
entryRuleInterfaceDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceDeclarationRule()); } 
	 iv_ruleInterfaceDeclaration=ruleInterfaceDeclaration 
	 { $current=$iv_ruleInterfaceDeclaration.current.getText(); }  
	 EOF 
;

// Rule InterfaceDeclaration
ruleInterfaceDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceDeclarationAccess().getStructKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getIdentifierParserRuleCall_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceDeclarationAccess().getColonKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getQualifiedIdentifierListParserRuleCall_2_1()); 
    }
    this_QualifiedIdentifierList_3=ruleQualifiedIdentifierList    {
		$current.merge(this_QualifiedIdentifierList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getInterfaceBodyParserRuleCall_3()); 
    }
    this_InterfaceBody_4=ruleInterfaceBody    {
		$current.merge(this_InterfaceBody_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceDeclarationAccess().getSemicolonKeyword_4()); 
    }
)?)
    ;





// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getPrivateKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleInterfaceBody
entryRuleInterfaceBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceBodyRule()); } 
	 iv_ruleInterfaceBody=ruleInterfaceBody 
	 { $current=$iv_ruleInterfaceBody.current.getText(); }  
	 EOF 
;

// Rule InterfaceBody
ruleInterfaceBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceBodyAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getInterfaceBodyAccess().getInterfaceMemberDeclarationParserRuleCall_1()); 
    }
    this_InterfaceMemberDeclaration_1=ruleInterfaceMemberDeclaration    {
		$current.merge(this_InterfaceMemberDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceBodyAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleInterfaceMemberDeclaration
entryRuleInterfaceMemberDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceMemberDeclarationRule()); } 
	 iv_ruleInterfaceMemberDeclaration=ruleInterfaceMemberDeclaration 
	 { $current=$iv_ruleInterfaceMemberDeclaration.current.getText(); }  
	 EOF 
;

// Rule InterfaceMemberDeclaration
ruleInterfaceMemberDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceMemberDeclarationAccess().getNewKeyword_0()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceMethodDeclarationParserRuleCall_1_0()); 
    }
    this_InterfaceMethodDeclaration_1=ruleInterfaceMethodDeclaration    {
		$current.merge(this_InterfaceMethodDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceEventDeclarationParserRuleCall_1_1()); 
    }
    this_InterfaceEventDeclaration_2=ruleInterfaceEventDeclaration    {
		$current.merge(this_InterfaceEventDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getTypeParserRuleCall_1_2_0()); 
    }
    this_Type_3=ruleType    {
		$current.merge(this_Type_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceIndexerDeclarationParserRuleCall_1_2_1_0()); 
    }
    this_InterfaceIndexerDeclaration_4=ruleInterfaceIndexerDeclaration    {
		$current.merge(this_InterfaceIndexerDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfacePropertyDeclarationParserRuleCall_1_2_1_1()); 
    }
    this_InterfacePropertyDeclaration_5=ruleInterfacePropertyDeclaration    {
		$current.merge(this_InterfacePropertyDeclaration_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))))
    ;





// Entry rule entryRuleInterfaceIndexerDeclaration
entryRuleInterfaceIndexerDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceIndexerDeclarationRule()); } 
	 iv_ruleInterfaceIndexerDeclaration=ruleInterfaceIndexerDeclaration 
	 { $current=$iv_ruleInterfaceIndexerDeclaration.current.getText(); }  
	 EOF 
;

// Rule InterfaceIndexerDeclaration
ruleInterfaceIndexerDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceIndexerDeclarationAccess().getThisKeyword_0()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceIndexerDeclarationAccess().getLeftSquareBracketKeyword_1()); 
    }
(( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getInterfaceIndexerDeclarationAccess().getFormalParameterListParserRuleCall_2()); 
    }
    this_FormalParameterList_2=ruleFormalParameterList    {
		$current.merge(this_FormalParameterList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceIndexerDeclarationAccess().getRightSquareBracketKeyword_3()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceIndexerDeclarationAccess().getLeftCurlyBracketKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getInterfaceIndexerDeclarationAccess().getInterfaceAccessorsParserRuleCall_5()); 
    }
    this_InterfaceAccessors_5=ruleInterfaceAccessors    {
		$current.merge(this_InterfaceAccessors_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceIndexerDeclarationAccess().getRightCurlyBracketKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleInterfaceEventDeclaration
entryRuleInterfaceEventDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceEventDeclarationRule()); } 
	 iv_ruleInterfaceEventDeclaration=ruleInterfaceEventDeclaration 
	 { $current=$iv_ruleInterfaceEventDeclaration.current.getText(); }  
	 EOF 
;

// Rule InterfaceEventDeclaration
ruleInterfaceEventDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='event' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceEventDeclarationAccess().getEventKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInterfaceEventDeclarationAccess().getTypeParserRuleCall_1()); 
    }
    this_Type_1=ruleType    {
		$current.merge(this_Type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getInterfaceEventDeclarationAccess().getIdentifierParserRuleCall_2()); 
    }
    this_Identifier_2=ruleIdentifier    {
		$current.merge(this_Identifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceEventDeclarationAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleInterfacePropertyDeclaration
entryRuleInterfacePropertyDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfacePropertyDeclarationRule()); } 
	 iv_ruleInterfacePropertyDeclaration=ruleInterfacePropertyDeclaration 
	 { $current=$iv_ruleInterfacePropertyDeclaration.current.getText(); }  
	 EOF 
;

// Rule InterfacePropertyDeclaration
ruleInterfacePropertyDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInterfacePropertyDeclarationAccess().getIdentifierParserRuleCall_0()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfacePropertyDeclarationAccess().getLeftCurlyBracketKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getInterfacePropertyDeclarationAccess().getInterfaceAccessorsParserRuleCall_2()); 
    }
    this_InterfaceAccessors_2=ruleInterfaceAccessors    {
		$current.merge(this_InterfaceAccessors_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfacePropertyDeclarationAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleInterfaceAccessors
entryRuleInterfaceAccessors returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceAccessorsRule()); } 
	 iv_ruleInterfaceAccessors=ruleInterfaceAccessors 
	 { $current=$iv_ruleInterfaceAccessors.current.getText(); }  
	 EOF 
;

// Rule InterfaceAccessors
ruleInterfaceAccessors returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInterfaceAccessorsAccess().getAttributesParserRuleCall_0()); 
    }
    this_Attributes_0=ruleAttributes    {
		$current.merge(this_Attributes_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
	kw='get' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceAccessorsAccess().getGetKeyword_1_0_0()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceAccessorsAccess().getSemicolonKeyword_1_0_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getInterfaceAccessorsAccess().getAttributesParserRuleCall_1_0_2_0()); 
    }
    this_Attributes_3=ruleAttributes    {
		$current.merge(this_Attributes_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='set' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceAccessorsAccess().getSetKeyword_1_0_2_1()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceAccessorsAccess().getSemicolonKeyword_1_0_2_2()); 
    }
)?)
    |(
	kw='set' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceAccessorsAccess().getSetKeyword_1_1_0()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceAccessorsAccess().getSemicolonKeyword_1_1_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getInterfaceAccessorsAccess().getAttributesParserRuleCall_1_1_2_0()); 
    }
    this_Attributes_8=ruleAttributes    {
		$current.merge(this_Attributes_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='get' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceAccessorsAccess().getGetKeyword_1_1_2_1()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceAccessorsAccess().getSemicolonKeyword_1_1_2_2()); 
    }
)?)))
    ;





// Entry rule entryRuleInterfaceMethodDeclaration
entryRuleInterfaceMethodDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceMethodDeclarationRule()); } 
	 iv_ruleInterfaceMethodDeclaration=ruleInterfaceMethodDeclaration 
	 { $current=$iv_ruleInterfaceMethodDeclaration.current.getText(); }  
	 EOF 
;

// Rule InterfaceMethodDeclaration
ruleInterfaceMethodDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInterfaceMethodDeclarationAccess().getTypeOrVoidParserRuleCall_0()); 
    }
    this_TypeOrVoid_0=ruleTypeOrVoid    {
		$current.merge(this_TypeOrVoid_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getInterfaceMethodDeclarationAccess().getIdentifierParserRuleCall_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceMethodDeclarationAccess().getLeftParenthesisKeyword_2()); 
    }
(( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getInterfaceMethodDeclarationAccess().getFormalParameterListParserRuleCall_3()); 
    }
    this_FormalParameterList_3=ruleFormalParameterList    {
		$current.merge(this_FormalParameterList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceMethodDeclarationAccess().getRightParenthesisKeyword_4()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInterfaceMethodDeclarationAccess().getSemicolonKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleStructDeclaration
entryRuleStructDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructDeclarationRule()); } 
	 iv_ruleStructDeclaration=ruleStructDeclaration 
	 { $current=$iv_ruleStructDeclaration.current.getText(); }  
	 EOF 
;

// Rule StructDeclaration
ruleStructDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructDeclarationAccess().getStructKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStructDeclarationAccess().getIdentifierParserRuleCall_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructDeclarationAccess().getColonKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStructDeclarationAccess().getQualifiedIdentifierListParserRuleCall_2_1()); 
    }
    this_QualifiedIdentifierList_3=ruleQualifiedIdentifierList    {
		$current.merge(this_QualifiedIdentifierList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getStructDeclarationAccess().getStructBodyParserRuleCall_3()); 
    }
    this_StructBody_4=ruleStructBody    {
		$current.merge(this_StructBody_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructDeclarationAccess().getSemicolonKeyword_4()); 
    }
)?)
    ;





// Entry rule entryRuleStructBody
entryRuleStructBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructBodyRule()); } 
	 iv_ruleStructBody=ruleStructBody 
	 { $current=$iv_ruleStructBody.current.getText(); }  
	 EOF 
;

// Rule StructBody
ruleStructBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructBodyAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getStructBodyAccess().getStructMemberDeclarationParserRuleCall_1()); 
    }
    this_StructMemberDeclaration_1=ruleStructMemberDeclaration    {
		$current.merge(this_StructMemberDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructBodyAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;







// Entry rule entryRuleStructMemberDeclarations2
entryRuleStructMemberDeclarations2 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructMemberDeclarations2Rule()); } 
	 iv_ruleStructMemberDeclarations2=ruleStructMemberDeclarations2 
	 { $current=$iv_ruleStructMemberDeclarations2.current.getText(); }  
	 EOF 
;

// Rule StructMemberDeclarations2
ruleStructMemberDeclarations2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarations2Access().getStructMemberDeclarationParserRuleCall_0()); 
    }
    this_StructMemberDeclaration_0=ruleStructMemberDeclaration    {
		$current.merge(this_StructMemberDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarations2Access().getStructMemberDeclarations2ParserRuleCall_1()); 
    }
    this_StructMemberDeclarations2_1=ruleStructMemberDeclarations2    {
		$current.merge(this_StructMemberDeclarations2_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleStructMemberDeclaration
entryRuleStructMemberDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructMemberDeclarationRule()); } 
	 iv_ruleStructMemberDeclaration=ruleStructMemberDeclaration 
	 { $current=$iv_ruleStructMemberDeclaration.current.getText(); }  
	 EOF 
;

// Rule StructMemberDeclaration
ruleStructMemberDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getConstantDeclarationParserRuleCall_0()); 
    }
    this_ConstantDeclaration_0=ruleConstantDeclaration    {
		$current.merge(this_ConstantDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getFieldDeclarationParserRuleCall_1()); 
    }
    this_FieldDeclaration_1=ruleFieldDeclaration    {
		$current.merge(this_FieldDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getMethodDeclarationParserRuleCall_2()); 
    }
    this_MethodDeclaration_2=ruleMethodDeclaration    {
		$current.merge(this_MethodDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getPropertyDeclarationParserRuleCall_3()); 
    }
    this_PropertyDeclaration_3=rulePropertyDeclaration    {
		$current.merge(this_PropertyDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getEventDeclarationParserRuleCall_4()); 
    }
    this_EventDeclaration_4=ruleEventDeclaration    {
		$current.merge(this_EventDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getIndexerDeclarationParserRuleCall_5()); 
    }
    this_IndexerDeclaration_5=ruleIndexerDeclaration    {
		$current.merge(this_IndexerDeclaration_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getOperatorDeclarationParserRuleCall_6()); 
    }
    this_OperatorDeclaration_6=ruleOperatorDeclaration    {
		$current.merge(this_OperatorDeclaration_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getConstructorDeclarationParserRuleCall_7()); 
    }
    this_ConstructorDeclaration_7=ruleConstructorDeclaration    {
		$current.merge(this_ConstructorDeclaration_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getStaticConstructorDeclarationParserRuleCall_8()); 
    }
    this_StaticConstructorDeclaration_8=ruleStaticConstructorDeclaration    {
		$current.merge(this_StaticConstructorDeclaration_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructMemberDeclarationAccess().getTypeDeclarationParserRuleCall_9()); 
    }
    this_TypeDeclaration_9=ruleTypeDeclaration    {
		$current.merge(this_TypeDeclaration_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleClassDeclaration
entryRuleClassDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassDeclarationRule()); } 
	 iv_ruleClassDeclaration=ruleClassDeclaration 
	 { $current=$iv_ruleClassDeclaration.current.getText(); }  
	 EOF 
;

// Rule ClassDeclaration
ruleClassDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getClassModifierParserRuleCall_0()); 
    }
    this_ClassModifier_0=ruleClassModifier    {
		$current.merge(this_ClassModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassDeclarationAccess().getClassKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getIdentifierParserRuleCall_2()); 
    }
    this_Identifier_2=ruleIdentifier    {
		$current.merge(this_Identifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getClassBaseParserRuleCall_3()); 
    }
    this_ClassBase_3=ruleClassBase    {
		$current.merge(this_ClassBase_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getClassBodyParserRuleCall_4()); 
    }
    this_ClassBody_4=ruleClassBody    {
		$current.merge(this_ClassBody_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassDeclarationAccess().getSemicolonKeyword_5()); 
    }
)?)
    ;





// Entry rule entryRuleClassBody
entryRuleClassBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassBodyRule()); } 
	 iv_ruleClassBody=ruleClassBody 
	 { $current=$iv_ruleClassBody.current.getText(); }  
	 EOF 
;

// Rule ClassBody
ruleClassBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassBodyAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getClassBodyAccess().getClassMemberDeclarationParserRuleCall_1()); 
    }
    this_ClassMemberDeclaration_1=ruleClassMemberDeclaration    {
		$current.merge(this_ClassMemberDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassBodyAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleClassMemberDeclaration
entryRuleClassMemberDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassMemberDeclarationRule()); } 
	 iv_ruleClassMemberDeclaration=ruleClassMemberDeclaration 
	 { $current=$iv_ruleClassMemberDeclaration.current.getText(); }  
	 EOF 
;

// Rule ClassMemberDeclaration
ruleClassMemberDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getMethodDeclarationParserRuleCall_0()); 
    }
    this_MethodDeclaration_0=ruleMethodDeclaration    {
		$current.merge(this_MethodDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getAttributesParserRuleCall_1_0()); 
    }
    this_Attributes_1=ruleAttributes    {
		$current.merge(this_Attributes_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getConstantDeclarationParserRuleCall_1_1_0()); 
    }
    this_ConstantDeclaration_2=ruleConstantDeclaration    {
		$current.merge(this_ConstantDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getFieldDeclarationParserRuleCall_1_1_1()); 
    }
    this_FieldDeclaration_3=ruleFieldDeclaration    {
		$current.merge(this_FieldDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getPropertyDeclarationParserRuleCall_1_1_2()); 
    }
    this_PropertyDeclaration_4=rulePropertyDeclaration    {
		$current.merge(this_PropertyDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getEventDeclarationParserRuleCall_1_1_3()); 
    }
    this_EventDeclaration_5=ruleEventDeclaration    {
		$current.merge(this_EventDeclaration_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getIndexerDeclarationParserRuleCall_1_1_4()); 
    }
    this_IndexerDeclaration_6=ruleIndexerDeclaration    {
		$current.merge(this_IndexerDeclaration_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getOperatorDeclarationParserRuleCall_1_1_5()); 
    }
    this_OperatorDeclaration_7=ruleOperatorDeclaration    {
		$current.merge(this_OperatorDeclaration_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getConstructorDeclarationParserRuleCall_1_1_6()); 
    }
    this_ConstructorDeclaration_8=ruleConstructorDeclaration    {
		$current.merge(this_ConstructorDeclaration_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getDestructorDeclarationParserRuleCall_1_1_7()); 
    }
    this_DestructorDeclaration_9=ruleDestructorDeclaration    {
		$current.merge(this_DestructorDeclaration_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getStaticConstructorDeclarationParserRuleCall_1_1_8()); 
    }
    this_StaticConstructorDeclaration_10=ruleStaticConstructorDeclaration    {
		$current.merge(this_StaticConstructorDeclaration_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getTypeDeclarationParserRuleCall_1_1_9()); 
    }
    this_TypeDeclaration_11=ruleTypeDeclaration    {
		$current.merge(this_TypeDeclaration_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    ;





// Entry rule entryRuleStaticConstructorDeclaration
entryRuleStaticConstructorDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticConstructorDeclarationRule()); } 
	 iv_ruleStaticConstructorDeclaration=ruleStaticConstructorDeclaration 
	 { $current=$iv_ruleStaticConstructorDeclaration.current.getText(); }  
	 EOF 
;

// Rule StaticConstructorDeclaration
ruleStaticConstructorDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStaticConstructorDeclarationAccess().getStaticConstructorModifiersParserRuleCall_0()); 
    }
    this_StaticConstructorModifiers_0=ruleStaticConstructorModifiers    {
		$current.merge(this_StaticConstructorModifiers_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getStaticConstructorDeclarationAccess().getIdentifierParserRuleCall_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticConstructorDeclarationAccess().getLeftParenthesisKeyword_2()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticConstructorDeclarationAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getStaticConstructorDeclarationAccess().getMaybeEmptyBlockParserRuleCall_4()); 
    }
    this_MaybeEmptyBlock_4=ruleMaybeEmptyBlock    {
		$current.merge(this_MaybeEmptyBlock_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleStaticConstructorModifiers
entryRuleStaticConstructorModifiers returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticConstructorModifiersRule()); } 
	 iv_ruleStaticConstructorModifiers=ruleStaticConstructorModifiers 
	 { $current=$iv_ruleStaticConstructorModifiers.current.getText(); }  
	 EOF 
;

// Rule StaticConstructorModifiers
ruleStaticConstructorModifiers returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticConstructorModifiersAccess().getExternKeyword_0_0()); 
    }
)?
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticConstructorModifiersAccess().getStaticKeyword_0_1()); 
    }
)
    |(
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticConstructorModifiersAccess().getStaticKeyword_1_0()); 
    }

	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticConstructorModifiersAccess().getExternKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleDestructorDeclaration
entryRuleDestructorDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDestructorDeclarationRule()); } 
	 iv_ruleDestructorDeclaration=ruleDestructorDeclaration 
	 { $current=$iv_ruleDestructorDeclaration.current.getText(); }  
	 EOF 
;

// Rule DestructorDeclaration
ruleDestructorDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDestructorDeclarationAccess().getExternKeyword_0()); 
    }
)?
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDestructorDeclarationAccess().getTildeKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getDestructorDeclarationAccess().getIdentifierParserRuleCall_2()); 
    }
    this_Identifier_2=ruleIdentifier    {
		$current.merge(this_Identifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDestructorDeclarationAccess().getLeftParenthesisKeyword_3()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDestructorDeclarationAccess().getRightParenthesisKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getDestructorDeclarationAccess().getMaybeEmptyBlockParserRuleCall_5()); 
    }
    this_MaybeEmptyBlock_5=ruleMaybeEmptyBlock    {
		$current.merge(this_MaybeEmptyBlock_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleConstructorDeclaration
entryRuleConstructorDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorDeclarationRule()); } 
	 iv_ruleConstructorDeclaration=ruleConstructorDeclaration 
	 { $current=$iv_ruleConstructorDeclaration.current.getText(); }  
	 EOF 
;

// Rule ConstructorDeclaration
ruleConstructorDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getConstructorModifierParserRuleCall_0()); 
    }
    this_ConstructorModifier_0=ruleConstructorModifier    {
		$current.merge(this_ConstructorModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    { 
        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getConstructorDeclaratorParserRuleCall_1()); 
    }
    this_ConstructorDeclarator_1=ruleConstructorDeclarator    {
		$current.merge(this_ConstructorDeclarator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getMaybeEmptyBlockParserRuleCall_2()); 
    }
    this_MaybeEmptyBlock_2=ruleMaybeEmptyBlock    {
		$current.merge(this_MaybeEmptyBlock_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleConstructorDeclarator
entryRuleConstructorDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorDeclaratorRule()); } 
	 iv_ruleConstructorDeclarator=ruleConstructorDeclarator 
	 { $current=$iv_ruleConstructorDeclarator.current.getText(); }  
	 EOF 
;

// Rule ConstructorDeclarator
ruleConstructorDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstructorDeclaratorAccess().getIdentifierParserRuleCall_0()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorDeclaratorAccess().getLeftParenthesisKeyword_1()); 
    }
(( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getConstructorDeclaratorAccess().getFormalParameterListParserRuleCall_2()); 
    }
    this_FormalParameterList_2=ruleFormalParameterList    {
		$current.merge(this_FormalParameterList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorDeclaratorAccess().getRightParenthesisKeyword_3()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getConstructorDeclaratorAccess().getConstructorInitializerParserRuleCall_4()); 
    }
    this_ConstructorInitializer_4=ruleConstructorInitializer    {
		$current.merge(this_ConstructorInitializer_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleConstructorInitializer
entryRuleConstructorInitializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorInitializerRule()); } 
	 iv_ruleConstructorInitializer=ruleConstructorInitializer 
	 { $current=$iv_ruleConstructorInitializer.current.getText(); }  
	 EOF 
;

// Rule ConstructorInitializer
ruleConstructorInitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorInitializerAccess().getColonKeyword_0_0()); 
    }

	kw='base' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorInitializerAccess().getBaseKeyword_0_1()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorInitializerAccess().getLeftParenthesisKeyword_0_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstructorInitializerAccess().getArgumentListParserRuleCall_0_3()); 
    }
    this_ArgumentList_3=ruleArgumentList    {
		$current.merge(this_ArgumentList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorInitializerAccess().getRightParenthesisKeyword_0_4()); 
    }
)
    |(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorInitializerAccess().getColonKeyword_1_0()); 
    }

	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorInitializerAccess().getThisKeyword_1_1()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorInitializerAccess().getLeftParenthesisKeyword_1_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstructorInitializerAccess().getArgumentListParserRuleCall_1_3()); 
    }
    this_ArgumentList_8=ruleArgumentList    {
		$current.merge(this_ArgumentList_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorInitializerAccess().getRightParenthesisKeyword_1_4()); 
    }
))
    ;





// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); } 
	 iv_ruleArgumentList=ruleArgumentList 
	 { $current=$iv_ruleArgumentList.current.getText(); }  
	 EOF 
;

// Rule ArgumentList
ruleArgumentList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArgumentListAccess().getArgumentParserRuleCall_0()); 
    }
    this_Argument_0=ruleArgument    {
		$current.merge(this_Argument_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArgumentListAccess().getCommaKeyword_1()); 
    }
)*
    ;





// Entry rule entryRuleArgument
entryRuleArgument returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); } 
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current.getText(); }  
	 EOF 
;

// Rule Argument
ruleArgument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getArgumentAccess().getRefOrOutParserRuleCall_0()); 
    }
    this_RefOrOut_0=ruleRefOrOut    {
		$current.merge(this_RefOrOut_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getArgumentAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression    {
		$current.merge(this_Expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleRefOrOut
entryRuleRefOrOut returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefOrOutRule()); } 
	 iv_ruleRefOrOut=ruleRefOrOut 
	 { $current=$iv_ruleRefOrOut.current.getText(); }  
	 EOF 
;

// Rule RefOrOut
ruleRefOrOut returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ref' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRefOrOutAccess().getRefKeyword_0()); 
    }

    |
	kw='out' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRefOrOutAccess().getOutKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleConstructorModifier
entryRuleConstructorModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorModifierRule()); } 
	 iv_ruleConstructorModifier=ruleConstructorModifier 
	 { $current=$iv_ruleConstructorModifier.current.getText(); }  
	 EOF 
;

// Rule ConstructorModifier
ruleConstructorModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorModifierAccess().getPublicKeyword_0()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorModifierAccess().getProtectedKeyword_1()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorModifierAccess().getInternalKeyword_2()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorModifierAccess().getPrivateKeyword_3()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructorModifierAccess().getExternKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleOperatorDeclaration
entryRuleOperatorDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorDeclarationRule()); } 
	 iv_ruleOperatorDeclaration=ruleOperatorDeclaration 
	 { $current=$iv_ruleOperatorDeclaration.current.getText(); }  
	 EOF 
;

// Rule OperatorDeclaration
ruleOperatorDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getOperatorDeclarationAccess().getOperatorModifierParserRuleCall_0()); 
    }
    this_OperatorModifier_0=ruleOperatorModifier    {
		$current.merge(this_OperatorModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    { 
        newCompositeNode(grammarAccess.getOperatorDeclarationAccess().getOperatorDeclaratorParserRuleCall_1()); 
    }
    this_OperatorDeclarator_1=ruleOperatorDeclarator    {
		$current.merge(this_OperatorDeclarator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getOperatorDeclarationAccess().getMaybeEmptyBlockParserRuleCall_2()); 
    }
    this_MaybeEmptyBlock_2=ruleMaybeEmptyBlock    {
		$current.merge(this_MaybeEmptyBlock_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleOperatorDeclarator
entryRuleOperatorDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorDeclaratorRule()); } 
	 iv_ruleOperatorDeclarator=ruleOperatorDeclarator 
	 { $current=$iv_ruleOperatorDeclarator.current.getText(); }  
	 EOF 
;

// Rule OperatorDeclarator
ruleOperatorDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperatorDeclaratorAccess().getUnaryOperatorDeclaratorParserRuleCall_0()); 
    }
    this_UnaryOperatorDeclarator_0=ruleUnaryOperatorDeclarator    {
		$current.merge(this_UnaryOperatorDeclarator_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperatorDeclaratorAccess().getBinaryOperatorDeclaratorParserRuleCall_1()); 
    }
    this_BinaryOperatorDeclarator_1=ruleBinaryOperatorDeclarator    {
		$current.merge(this_BinaryOperatorDeclarator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperatorDeclaratorAccess().getConversionOperatorDeclaratorParserRuleCall_2()); 
    }
    this_ConversionOperatorDeclarator_2=ruleConversionOperatorDeclarator    {
		$current.merge(this_ConversionOperatorDeclarator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleConversionOperatorDeclarator
entryRuleConversionOperatorDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConversionOperatorDeclaratorRule()); } 
	 iv_ruleConversionOperatorDeclarator=ruleConversionOperatorDeclarator 
	 { $current=$iv_ruleConversionOperatorDeclarator.current.getText(); }  
	 EOF 
;

// Rule ConversionOperatorDeclarator
ruleConversionOperatorDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConversionOperatorDeclaratorAccess().getConversionKindParserRuleCall_0()); 
    }
    this_ConversionKind_0=ruleConversionKind    {
		$current.merge(this_ConversionKind_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConversionOperatorDeclaratorAccess().getOperatorKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getConversionOperatorDeclaratorAccess().getTypeParserRuleCall_2()); 
    }
    this_Type_2=ruleType    {
		$current.merge(this_Type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConversionOperatorDeclaratorAccess().getLeftParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getConversionOperatorDeclaratorAccess().getTypeParserRuleCall_4()); 
    }
    this_Type_4=ruleType    {
		$current.merge(this_Type_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getConversionOperatorDeclaratorAccess().getIdentifierParserRuleCall_5()); 
    }
    this_Identifier_5=ruleIdentifier    {
		$current.merge(this_Identifier_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConversionOperatorDeclaratorAccess().getRightParenthesisKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleConversionKind
entryRuleConversionKind returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConversionKindRule()); } 
	 iv_ruleConversionKind=ruleConversionKind 
	 { $current=$iv_ruleConversionKind.current.getText(); }  
	 EOF 
;

// Rule ConversionKind
ruleConversionKind returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='implicit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConversionKindAccess().getImplicitKeyword_0()); 
    }

    |
	kw='explicit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConversionKindAccess().getExplicitKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBinaryOperatorDeclarator
entryRuleBinaryOperatorDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperatorDeclaratorRule()); } 
	 iv_ruleBinaryOperatorDeclarator=ruleBinaryOperatorDeclarator 
	 { $current=$iv_ruleBinaryOperatorDeclarator.current.getText(); }  
	 EOF 
;

// Rule BinaryOperatorDeclarator
ruleBinaryOperatorDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryOperatorDeclaratorAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType    {
		$current.merge(this_Type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorDeclaratorAccess().getOperatorKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getBinaryOperatorDeclaratorAccess().getOverloadableBinaryOperatorParserRuleCall_2()); 
    }
    this_OverloadableBinaryOperator_2=ruleOverloadableBinaryOperator    {
		$current.merge(this_OverloadableBinaryOperator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorDeclaratorAccess().getLeftParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getBinaryOperatorDeclaratorAccess().getTypeParserRuleCall_4()); 
    }
    this_Type_4=ruleType    {
		$current.merge(this_Type_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getBinaryOperatorDeclaratorAccess().getIdentifierParserRuleCall_5()); 
    }
    this_Identifier_5=ruleIdentifier    {
		$current.merge(this_Identifier_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorDeclaratorAccess().getCommaKeyword_6()); 
    }

    { 
        newCompositeNode(grammarAccess.getBinaryOperatorDeclaratorAccess().getTypeParserRuleCall_7()); 
    }
    this_Type_7=ruleType    {
		$current.merge(this_Type_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getBinaryOperatorDeclaratorAccess().getIdentifierParserRuleCall_8()); 
    }
    this_Identifier_8=ruleIdentifier    {
		$current.merge(this_Identifier_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorDeclaratorAccess().getRightParenthesisKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleOverloadableBinaryOperator
entryRuleOverloadableBinaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOverloadableBinaryOperatorRule()); } 
	 iv_ruleOverloadableBinaryOperator=ruleOverloadableBinaryOperator 
	 { $current=$iv_ruleOverloadableBinaryOperator.current.getText(); }  
	 EOF 
;

// Rule OverloadableBinaryOperator
ruleOverloadableBinaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_OPERATOR_OR_SIGN_0=RULE_OPERATOR_OR_SIGN    {
		$current.merge(this_OPERATOR_OR_SIGN_0);
    }

    { 
    newLeafNode(this_OPERATOR_OR_SIGN_0, grammarAccess.getOverloadableBinaryOperatorAccess().getOPERATOR_OR_SIGNTerminalRuleCall_0()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getAsteriskKeyword_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getSolidusKeyword_2()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getPercentSignKeyword_3()); 
    }

    |    this_AMPERSAND_4=RULE_AMPERSAND    {
		$current.merge(this_AMPERSAND_4);
    }

    { 
    newLeafNode(this_AMPERSAND_4, grammarAccess.getOverloadableBinaryOperatorAccess().getAMPERSANDTerminalRuleCall_4()); 
    }

    |    this_BAR_5=RULE_BAR    {
		$current.merge(this_BAR_5);
    }

    { 
    newLeafNode(this_BAR_5, grammarAccess.getOverloadableBinaryOperatorAccess().getBARTerminalRuleCall_5()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getCircumflexAccentKeyword_6()); 
    }

    |
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getLessThanSignLessThanSignKeyword_7()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_8()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getEqualsSignEqualsSignKeyword_9()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getExclamationMarkEqualsSignKeyword_10()); 
    }

    |    this_GREATER_THAN_11=RULE_GREATER_THAN    {
		$current.merge(this_GREATER_THAN_11);
    }

    { 
    newLeafNode(this_GREATER_THAN_11, grammarAccess.getOverloadableBinaryOperatorAccess().getGREATER_THANTerminalRuleCall_11()); 
    }

    |    this_LESS_THAN_12=RULE_LESS_THAN    {
		$current.merge(this_LESS_THAN_12);
    }

    { 
    newLeafNode(this_LESS_THAN_12, grammarAccess.getOverloadableBinaryOperatorAccess().getLESS_THANTerminalRuleCall_12()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getGreaterThanSignEqualsSignKeyword_13()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableBinaryOperatorAccess().getLessThanSignEqualsSignKeyword_14()); 
    }
)
    ;





// Entry rule entryRuleUnaryOperatorDeclarator
entryRuleUnaryOperatorDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperatorDeclaratorRule()); } 
	 iv_ruleUnaryOperatorDeclarator=ruleUnaryOperatorDeclarator 
	 { $current=$iv_ruleUnaryOperatorDeclarator.current.getText(); }  
	 EOF 
;

// Rule UnaryOperatorDeclarator
ruleUnaryOperatorDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryOperatorDeclaratorAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType    {
		$current.merge(this_Type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorDeclaratorAccess().getOperatorKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnaryOperatorDeclaratorAccess().getOverloadableUnaryOperatorParserRuleCall_2()); 
    }
    this_OverloadableUnaryOperator_2=ruleOverloadableUnaryOperator    {
		$current.merge(this_OverloadableUnaryOperator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorDeclaratorAccess().getLeftParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnaryOperatorDeclaratorAccess().getTypeParserRuleCall_4()); 
    }
    this_Type_4=ruleType    {
		$current.merge(this_Type_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getUnaryOperatorDeclaratorAccess().getIdentifierParserRuleCall_5()); 
    }
    this_Identifier_5=ruleIdentifier    {
		$current.merge(this_Identifier_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorDeclaratorAccess().getRightParenthesisKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleOverloadableUnaryOperator
entryRuleOverloadableUnaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOverloadableUnaryOperatorRule()); } 
	 iv_ruleOverloadableUnaryOperator=ruleOverloadableUnaryOperator 
	 { $current=$iv_ruleOverloadableUnaryOperator.current.getText(); }  
	 EOF 
;

// Rule OverloadableUnaryOperator
ruleOverloadableUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_OPERATOR_OR_SIGN_0=RULE_OPERATOR_OR_SIGN    {
		$current.merge(this_OPERATOR_OR_SIGN_0);
    }

    { 
    newLeafNode(this_OPERATOR_OR_SIGN_0, grammarAccess.getOverloadableUnaryOperatorAccess().getOPERATOR_OR_SIGNTerminalRuleCall_0()); 
    }

    |    this_INCREMENT_DECREMENT_1=RULE_INCREMENT_DECREMENT    {
		$current.merge(this_INCREMENT_DECREMENT_1);
    }

    { 
    newLeafNode(this_INCREMENT_DECREMENT_1, grammarAccess.getOverloadableUnaryOperatorAccess().getINCREMENT_DECREMENTTerminalRuleCall_1()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableUnaryOperatorAccess().getExclamationMarkKeyword_2()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableUnaryOperatorAccess().getTildeKeyword_3()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableUnaryOperatorAccess().getTrueKeyword_4()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableUnaryOperatorAccess().getFalseKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleOperatorModifier
entryRuleOperatorModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorModifierRule()); } 
	 iv_ruleOperatorModifier=ruleOperatorModifier 
	 { $current=$iv_ruleOperatorModifier.current.getText(); }  
	 EOF 
;

// Rule OperatorModifier
ruleOperatorModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorModifierAccess().getPublicKeyword_0()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorModifierAccess().getStaticKeyword_1()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorModifierAccess().getExternKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleIndexerDeclaration
entryRuleIndexerDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexerDeclarationRule()); } 
	 iv_ruleIndexerDeclaration=ruleIndexerDeclaration 
	 { $current=$iv_ruleIndexerDeclaration.current.getText(); }  
	 EOF 
;

// Rule IndexerDeclaration
ruleIndexerDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getIndexerDeclarationAccess().getIndexerModifierParserRuleCall_0()); 
    }
    this_IndexerModifier_0=ruleIndexerModifier    {
		$current.merge(this_IndexerModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    { 
        newCompositeNode(grammarAccess.getIndexerDeclarationAccess().getIndexerDeclaratorParserRuleCall_1()); 
    }
    this_IndexerDeclarator_1=ruleIndexerDeclarator    {
		$current.merge(this_IndexerDeclarator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclarationAccess().getLeftCurlyBracketKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getIndexerDeclarationAccess().getAccessorDeclarationsParserRuleCall_3()); 
    }
    this_AccessorDeclarations_3=ruleAccessorDeclarations    {
		$current.merge(this_AccessorDeclarations_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclarationAccess().getRightCurlyBracketKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleIndexerDeclarator
entryRuleIndexerDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexerDeclaratorRule()); } 
	 iv_ruleIndexerDeclarator=ruleIndexerDeclarator 
	 { $current=$iv_ruleIndexerDeclarator.current.getText(); }  
	 EOF 
;

// Rule IndexerDeclarator
ruleIndexerDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIndexerDeclaratorAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType    {
		$current.merge(this_Type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclaratorAccess().getThisKeyword_1_0_0()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclaratorAccess().getLeftSquareBracketKeyword_1_0_1()); 
    }
(( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getIndexerDeclaratorAccess().getFormalParameterListParserRuleCall_1_0_2()); 
    }
    this_FormalParameterList_3=ruleFormalParameterList    {
		$current.merge(this_FormalParameterList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclaratorAccess().getRightSquareBracketKeyword_1_0_3()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getIndexerDeclaratorAccess().getQualifiedIdentifierParserRuleCall_1_1_0()); 
    }
    this_QualifiedIdentifier_5=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclaratorAccess().getFullStopKeyword_1_1_1()); 
    }

	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclaratorAccess().getThisKeyword_1_1_2()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclaratorAccess().getLeftSquareBracketKeyword_1_1_3()); 
    }
(( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getIndexerDeclaratorAccess().getFormalParameterListParserRuleCall_1_1_4()); 
    }
    this_FormalParameterList_9=ruleFormalParameterList    {
		$current.merge(this_FormalParameterList_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerDeclaratorAccess().getRightSquareBracketKeyword_1_1_5()); 
    }
)))
    ;





// Entry rule entryRuleIndexerModifier
entryRuleIndexerModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexerModifierRule()); } 
	 iv_ruleIndexerModifier=ruleIndexerModifier 
	 { $current=$iv_ruleIndexerModifier.current.getText(); }  
	 EOF 
;

// Rule IndexerModifier
ruleIndexerModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getPrivateKeyword_4()); 
    }

    |
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getVirtualKeyword_5()); 
    }

    |
	kw='sealed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getSealedKeyword_6()); 
    }

    |
	kw='override' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getOverrideKeyword_7()); 
    }

    |
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getAbstractKeyword_8()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexerModifierAccess().getExternKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleEventDeclaration
entryRuleEventDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDeclarationRule()); } 
	 iv_ruleEventDeclaration=ruleEventDeclaration 
	 { $current=$iv_ruleEventDeclaration.current.getText(); }  
	 EOF 
;

// Rule EventDeclaration
ruleEventDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getEventDeclarationAccess().getEventModifierParserRuleCall_0()); 
    }
    this_EventModifier_0=ruleEventModifier    {
		$current.merge(this_EventModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='event' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventDeclarationAccess().getEventKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEventDeclarationAccess().getTypeParserRuleCall_2()); 
    }
    this_Type_2=ruleType    {
		$current.merge(this_Type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
    { 
        newCompositeNode(grammarAccess.getEventDeclarationAccess().getVariableDeclaratorParserRuleCall_3_0_0_0()); 
    }
    this_VariableDeclarator_3=ruleVariableDeclarator    {
		$current.merge(this_VariableDeclarator_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventDeclarationAccess().getCommaKeyword_3_0_0_1()); 
    }
)+
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventDeclarationAccess().getSemicolonKeyword_3_0_1()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getEventDeclarationAccess().getQualifiedIdentifierParserRuleCall_3_1_0()); 
    }
    this_QualifiedIdentifier_6=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventDeclarationAccess().getLeftCurlyBracketKeyword_3_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEventDeclarationAccess().getEventAccessorDeclarationsParserRuleCall_3_1_2()); 
    }
    this_EventAccessorDeclarations_8=ruleEventAccessorDeclarations    {
		$current.merge(this_EventAccessorDeclarations_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventDeclarationAccess().getRightCurlyBracketKeyword_3_1_3()); 
    }
)))
    ;





// Entry rule entryRuleEventAccessorDeclarations
entryRuleEventAccessorDeclarations returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventAccessorDeclarationsRule()); } 
	 iv_ruleEventAccessorDeclarations=ruleEventAccessorDeclarations 
	 { $current=$iv_ruleEventAccessorDeclarations.current.getText(); }  
	 EOF 
;

// Rule EventAccessorDeclarations
ruleEventAccessorDeclarations returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEventAccessorDeclarationsAccess().getAttributesParserRuleCall_0()); 
    }
    this_Attributes_0=ruleAttributes    {
		$current.merge(this_Attributes_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
    { 
        newCompositeNode(grammarAccess.getEventAccessorDeclarationsAccess().getAddAccessorDeclarationParserRuleCall_1_0_0()); 
    }
    this_AddAccessorDeclaration_1=ruleAddAccessorDeclaration    {
		$current.merge(this_AddAccessorDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEventAccessorDeclarationsAccess().getAttributesParserRuleCall_1_0_1()); 
    }
    this_Attributes_2=ruleAttributes    {
		$current.merge(this_Attributes_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEventAccessorDeclarationsAccess().getRemoveAccessorDeclarationParserRuleCall_1_0_2()); 
    }
    this_RemoveAccessorDeclaration_3=ruleRemoveAccessorDeclaration    {
		$current.merge(this_RemoveAccessorDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getEventAccessorDeclarationsAccess().getRemoveAccessorDeclarationParserRuleCall_1_1_0()); 
    }
    this_RemoveAccessorDeclaration_4=ruleRemoveAccessorDeclaration    {
		$current.merge(this_RemoveAccessorDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEventAccessorDeclarationsAccess().getAttributesParserRuleCall_1_1_1()); 
    }
    this_Attributes_5=ruleAttributes    {
		$current.merge(this_Attributes_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEventAccessorDeclarationsAccess().getAddAccessorDeclarationParserRuleCall_1_1_2()); 
    }
    this_AddAccessorDeclaration_6=ruleAddAccessorDeclaration    {
		$current.merge(this_AddAccessorDeclaration_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    ;





// Entry rule entryRuleRemoveAccessorDeclaration
entryRuleRemoveAccessorDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRemoveAccessorDeclarationRule()); } 
	 iv_ruleRemoveAccessorDeclaration=ruleRemoveAccessorDeclaration 
	 { $current=$iv_ruleRemoveAccessorDeclaration.current.getText(); }  
	 EOF 
;

// Rule RemoveAccessorDeclaration
ruleRemoveAccessorDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='remove' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRemoveAccessorDeclarationAccess().getRemoveKeyword()); 
    }

    ;





// Entry rule entryRuleAddAccessorDeclaration
entryRuleAddAccessorDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddAccessorDeclarationRule()); } 
	 iv_ruleAddAccessorDeclaration=ruleAddAccessorDeclaration 
	 { $current=$iv_ruleAddAccessorDeclaration.current.getText(); }  
	 EOF 
;

// Rule AddAccessorDeclaration
ruleAddAccessorDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='add' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAddAccessorDeclarationAccess().getAddKeyword()); 
    }

    ;





// Entry rule entryRuleEventModifier
entryRuleEventModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventModifierRule()); } 
	 iv_ruleEventModifier=ruleEventModifier 
	 { $current=$iv_ruleEventModifier.current.getText(); }  
	 EOF 
;

// Rule EventModifier
ruleEventModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getPrivateKeyword_4()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getStaticKeyword_5()); 
    }

    |
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getVirtualKeyword_6()); 
    }

    |
	kw='sealed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getSealedKeyword_7()); 
    }

    |
	kw='override' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getOverrideKeyword_8()); 
    }

    |
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getAbstractKeyword_9()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventModifierAccess().getExternKeyword_10()); 
    }
)
    ;





// Entry rule entryRulePropertyDeclaration
entryRulePropertyDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyDeclarationRule()); } 
	 iv_rulePropertyDeclaration=rulePropertyDeclaration 
	 { $current=$iv_rulePropertyDeclaration.current.getText(); }  
	 EOF 
;

// Rule PropertyDeclaration
rulePropertyDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getPropertyModifierParserRuleCall_0()); 
    }
    this_PropertyModifier_0=rulePropertyModifier    {
		$current.merge(this_PropertyModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    { 
        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getTypeParserRuleCall_1()); 
    }
    this_Type_1=ruleType    {
		$current.merge(this_Type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getQualifiedIdentifierParserRuleCall_2()); 
    }
    this_QualifiedIdentifier_2=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyDeclarationAccess().getLeftCurlyBracketKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getAccessorDeclarationsParserRuleCall_4()); 
    }
    this_AccessorDeclarations_4=ruleAccessorDeclarations    {
		$current.merge(this_AccessorDeclarations_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyDeclarationAccess().getRightCurlyBracketKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleAccessorDeclarations
entryRuleAccessorDeclarations returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessorDeclarationsRule()); } 
	 iv_ruleAccessorDeclarations=ruleAccessorDeclarations 
	 { $current=$iv_ruleAccessorDeclarations.current.getText(); }  
	 EOF 
;

// Rule AccessorDeclarations
ruleAccessorDeclarations returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessorDeclarationsAccess().getAttributesParserRuleCall_0()); 
    }
    this_Attributes_0=ruleAttributes    {
		$current.merge(this_Attributes_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
    { 
        newCompositeNode(grammarAccess.getAccessorDeclarationsAccess().getGetAccessorDeclarationParserRuleCall_1_0_0()); 
    }
    this_GetAccessorDeclaration_1=ruleGetAccessorDeclaration    {
		$current.merge(this_GetAccessorDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getAccessorDeclarationsAccess().getAttributesParserRuleCall_1_0_1()); 
    }
    this_Attributes_2=ruleAttributes    {
		$current.merge(this_Attributes_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getAccessorDeclarationsAccess().getSetAccessorDeclarationParserRuleCall_1_0_2()); 
    }
    this_SetAccessorDeclaration_3=ruleSetAccessorDeclaration    {
		$current.merge(this_SetAccessorDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getAccessorDeclarationsAccess().getSetAccessorDeclarationParserRuleCall_1_1_0()); 
    }
    this_SetAccessorDeclaration_4=ruleSetAccessorDeclaration    {
		$current.merge(this_SetAccessorDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getAccessorDeclarationsAccess().getAttributesParserRuleCall_1_1_1()); 
    }
    this_Attributes_5=ruleAttributes    {
		$current.merge(this_Attributes_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getAccessorDeclarationsAccess().getGetAccessorDeclarationParserRuleCall_1_1_2()); 
    }
    this_GetAccessorDeclaration_6=ruleGetAccessorDeclaration    {
		$current.merge(this_GetAccessorDeclaration_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)))
    ;





// Entry rule entryRuleSetAccessorDeclaration
entryRuleSetAccessorDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetAccessorDeclarationRule()); } 
	 iv_ruleSetAccessorDeclaration=ruleSetAccessorDeclaration 
	 { $current=$iv_ruleSetAccessorDeclaration.current.getText(); }  
	 EOF 
;

// Rule SetAccessorDeclaration
ruleSetAccessorDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='set' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSetAccessorDeclarationAccess().getSetKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSetAccessorDeclarationAccess().getMaybeEmptyBlockParserRuleCall_1()); 
    }
    this_MaybeEmptyBlock_1=ruleMaybeEmptyBlock    {
		$current.merge(this_MaybeEmptyBlock_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleGetAccessorDeclaration
entryRuleGetAccessorDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetAccessorDeclarationRule()); } 
	 iv_ruleGetAccessorDeclaration=ruleGetAccessorDeclaration 
	 { $current=$iv_ruleGetAccessorDeclaration.current.getText(); }  
	 EOF 
;

// Rule GetAccessorDeclaration
ruleGetAccessorDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='get' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGetAccessorDeclarationAccess().getGetKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getGetAccessorDeclarationAccess().getMaybeEmptyBlockParserRuleCall_1()); 
    }
    this_MaybeEmptyBlock_1=ruleMaybeEmptyBlock    {
		$current.merge(this_MaybeEmptyBlock_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePropertyModifier
entryRulePropertyModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyModifierRule()); } 
	 iv_rulePropertyModifier=rulePropertyModifier 
	 { $current=$iv_rulePropertyModifier.current.getText(); }  
	 EOF 
;

// Rule PropertyModifier
rulePropertyModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getPrivateKeyword_4()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getStaticKeyword_5()); 
    }

    |
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getVirtualKeyword_6()); 
    }

    |
	kw='sealed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getSealedKeyword_7()); 
    }

    |
	kw='override' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getOverrideKeyword_8()); 
    }

    |
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getAbstractKeyword_9()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyModifierAccess().getExternKeyword_10()); 
    }
)
    ;





// Entry rule entryRuleMethodDeclaration
entryRuleMethodDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodDeclarationRule()); } 
	 iv_ruleMethodDeclaration=ruleMethodDeclaration 
	 { $current=$iv_ruleMethodDeclaration.current.getText(); }  
	 EOF 
;

// Rule MethodDeclaration
ruleMethodDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getMethodHeaderParserRuleCall_0()); 
    }
    this_MethodHeader_0=ruleMethodHeader    {
		$current.merge(this_MethodHeader_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getMaybeEmptyBlockParserRuleCall_1()); 
    }
    this_MaybeEmptyBlock_1=ruleMaybeEmptyBlock    {
		$current.merge(this_MaybeEmptyBlock_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleMethodHeader
entryRuleMethodHeader returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodHeaderRule()); } 
	 iv_ruleMethodHeader=ruleMethodHeader 
	 { $current=$iv_ruleMethodHeader.current.getText(); }  
	 EOF 
;

// Rule MethodHeader
ruleMethodHeader returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMethodHeaderAccess().getAttributesParserRuleCall_0()); 
    }
    this_Attributes_0=ruleAttributes    {
		$current.merge(this_Attributes_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getMethodHeaderAccess().getMethodModifierParserRuleCall_1()); 
    }
    this_MethodModifier_1=ruleMethodModifier    {
		$current.merge(this_MethodModifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    { 
        newCompositeNode(grammarAccess.getMethodHeaderAccess().getTypeOrVoidParserRuleCall_2()); 
    }
    this_TypeOrVoid_2=ruleTypeOrVoid    {
		$current.merge(this_TypeOrVoid_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getMethodHeaderAccess().getQualifiedIdentifierParserRuleCall_3()); 
    }
    this_QualifiedIdentifier_3=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodHeaderAccess().getLeftParenthesisKeyword_4()); 
    }
(( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getMethodHeaderAccess().getFormalParameterListParserRuleCall_5()); 
    }
    this_FormalParameterList_5=ruleFormalParameterList    {
		$current.merge(this_FormalParameterList_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodHeaderAccess().getRightParenthesisKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleFormalParameterList
entryRuleFormalParameterList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParameterListRule()); } 
	 iv_ruleFormalParameterList=ruleFormalParameterList 
	 { $current=$iv_ruleFormalParameterList.current.getText(); }  
	 EOF 
;

// Rule FormalParameterList
ruleFormalParameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getFormalParameterListAccess().getFixedParametersParserRuleCall_0()); 
    }
    this_FixedParameters_0=ruleFixedParameters    {
		$current.merge(this_FixedParameters_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)((
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormalParameterListAccess().getCommaKeyword_1_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFormalParameterListAccess().getParameterArrayParserRuleCall_1_0_1()); 
    }
    this_ParameterArray_2=ruleParameterArray    {
		$current.merge(this_ParameterArray_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getFormalParameterListAccess().getParameterArrayParserRuleCall_1_1()); 
    }
    this_ParameterArray_3=ruleParameterArray    {
		$current.merge(this_ParameterArray_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleParameterArray
entryRuleParameterArray returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterArrayRule()); } 
	 iv_ruleParameterArray=ruleParameterArray 
	 { $current=$iv_ruleParameterArray.current.getText(); }  
	 EOF 
;

// Rule ParameterArray
ruleParameterArray returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterArrayAccess().getAttributesParserRuleCall_0()); 
    }
    this_Attributes_0=ruleAttributes    {
		$current.merge(this_Attributes_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='params' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterArrayAccess().getParamsKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getParameterArrayAccess().getArrayTypeParserRuleCall_2()); 
    }
    this_ArrayType_2=ruleArrayType    {
		$current.merge(this_ArrayType_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getParameterArrayAccess().getIdentifierParserRuleCall_3()); 
    }
    this_Identifier_3=ruleIdentifier    {
		$current.merge(this_Identifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleFixedParameters
entryRuleFixedParameters returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixedParametersRule()); } 
	 iv_ruleFixedParameters=ruleFixedParameters 
	 { $current=$iv_ruleFixedParameters.current.getText(); }  
	 EOF 
;

// Rule FixedParameters
ruleFixedParameters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((( ruleFixedParameter)=>
    { 
        newCompositeNode(grammarAccess.getFixedParametersAccess().getFixedParameterParserRuleCall_0()); 
    }
    this_FixedParameter_0=ruleFixedParameter    {
		$current.merge(this_FixedParameter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFixedParametersAccess().getCommaKeyword_1()); 
    }
)+
    ;





// Entry rule entryRuleFixedParameter
entryRuleFixedParameter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixedParameterRule()); } 
	 iv_ruleFixedParameter=ruleFixedParameter 
	 { $current=$iv_ruleFixedParameter.current.getText(); }  
	 EOF 
;

// Rule FixedParameter
ruleFixedParameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getFixedParameterAccess().getParameterModifierParserRuleCall_0()); 
    }
    this_ParameterModifier_0=ruleParameterModifier    {
		$current.merge(this_ParameterModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getFixedParameterAccess().getTypeParserRuleCall_1()); 
    }
    this_Type_1=ruleType    {
		$current.merge(this_Type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFixedParameterAccess().getIdentifierParserRuleCall_2()); 
    }
    this_Identifier_2=ruleIdentifier    {
		$current.merge(this_Identifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleParameterModifier
entryRuleParameterModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterModifierRule()); } 
	 iv_ruleParameterModifier=ruleParameterModifier 
	 { $current=$iv_ruleParameterModifier.current.getText(); }  
	 EOF 
;

// Rule ParameterModifier
ruleParameterModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ref' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterModifierAccess().getRefKeyword_0()); 
    }

    |
	kw='out' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterModifierAccess().getOutKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleTypeOrVoid
entryRuleTypeOrVoid returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeOrVoidRule()); } 
	 iv_ruleTypeOrVoid=ruleTypeOrVoid 
	 { $current=$iv_ruleTypeOrVoid.current.getText(); }  
	 EOF 
;

// Rule TypeOrVoid
ruleTypeOrVoid returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeOrVoidAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType    {
		$current.merge(this_Type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeOrVoidAccess().getVoidKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMethodModifier
entryRuleMethodModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodModifierRule()); } 
	 iv_ruleMethodModifier=ruleMethodModifier 
	 { $current=$iv_ruleMethodModifier.current.getText(); }  
	 EOF 
;

// Rule MethodModifier
ruleMethodModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getPrivateKeyword_4()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getStaticKeyword_5()); 
    }

    |
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getVirtualKeyword_6()); 
    }

    |
	kw='sealed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getSealedKeyword_7()); 
    }

    |
	kw='override' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getOverrideKeyword_8()); 
    }

    |
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getAbstractKeyword_9()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodModifierAccess().getExternKeyword_10()); 
    }
)
    ;





// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldDeclarationRule()); } 
	 iv_ruleFieldDeclaration=ruleFieldDeclaration 
	 { $current=$iv_ruleFieldDeclaration.current.getText(); }  
	 EOF 
;

// Rule FieldDeclaration
ruleFieldDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getFieldModifierParserRuleCall_0()); 
    }
    this_FieldModifier_0=ruleFieldModifier    {
		$current.merge(this_FieldModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    { 
        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getTypeParserRuleCall_1()); 
    }
    this_Type_1=ruleType    {
		$current.merge(this_Type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getVariableDeclaratorParserRuleCall_2_0()); 
    }
    this_VariableDeclarator_2=ruleVariableDeclarator    {
		$current.merge(this_VariableDeclarator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldDeclarationAccess().getCommaKeyword_2_1()); 
    }
)+
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleVariableDeclarator
entryRuleVariableDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclaratorRule()); } 
	 iv_ruleVariableDeclarator=ruleVariableDeclarator 
	 { $current=$iv_ruleVariableDeclarator.current.getText(); }  
	 EOF 
;

// Rule VariableDeclarator
ruleVariableDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getIdentifierParserRuleCall_0()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getIdentifierParserRuleCall_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getVariableInitializerParserRuleCall_3()); 
    }
    this_VariableInitializer_3=ruleVariableInitializer    {
		$current.merge(this_VariableInitializer_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleVariableInitializer
entryRuleVariableInitializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableInitializerRule()); } 
	 iv_ruleVariableInitializer=ruleVariableInitializer 
	 { $current=$iv_ruleVariableInitializer.current.getText(); }  
	 EOF 
;

// Rule VariableInitializer
ruleVariableInitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getVariableInitializerAccess().getArrayInitializerParserRuleCall()); 
    }
    this_ArrayInitializer_0=ruleArrayInitializer    {
		$current.merge(this_ArrayInitializer_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleArrayInitializer
entryRuleArrayInitializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitializerRule()); } 
	 iv_ruleArrayInitializer=ruleArrayInitializer 
	 { $current=$iv_ruleArrayInitializer.current.getText(); }  
	 EOF 
;

// Rule ArrayInitializer
ruleArrayInitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_0_0()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_0_1()); 
    }
)
    |(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_1_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getArrayInitializerAccess().getVariableInitializerParserRuleCall_1_1_0()); 
    }
    this_VariableInitializer_3=ruleVariableInitializer    {
		$current.merge(this_VariableInitializer_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayInitializerAccess().getCommaKeyword_1_1_1()); 
    }
)+(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayInitializerAccess().getCommaKeyword_1_2()); 
    }
)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_1_3()); 
    }
))
    ;





// Entry rule entryRuleFieldModifier
entryRuleFieldModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldModifierRule()); } 
	 iv_ruleFieldModifier=ruleFieldModifier 
	 { $current=$iv_ruleFieldModifier.current.getText(); }  
	 EOF 
;

// Rule FieldModifier
ruleFieldModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldModifierAccess().getPrivateKeyword_4()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldModifierAccess().getStaticKeyword_5()); 
    }

    |
	kw='readonly' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldModifierAccess().getReadonlyKeyword_6()); 
    }

    |
	kw='volatile' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldModifierAccess().getVolatileKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); } 
	 iv_ruleConstantDeclaration=ruleConstantDeclaration 
	 { $current=$iv_ruleConstantDeclaration.current.getText(); }  
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getConstantModifierParserRuleCall_0()); 
    }
    this_ConstantModifier_0=ruleConstantModifier    {
		$current.merge(this_ConstantModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantDeclarationAccess().getConstKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getTypeParserRuleCall_2()); 
    }
    this_Type_2=ruleType    {
		$current.merge(this_Type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getConstantDeclaratorParserRuleCall_3_0()); 
    }
    this_ConstantDeclarator_3=ruleConstantDeclarator    {
		$current.merge(this_ConstantDeclarator_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantDeclarationAccess().getCommaKeyword_3_1()); 
    }
)+
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantDeclarationAccess().getSemicolonKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleConstantModifier
entryRuleConstantModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantModifierRule()); } 
	 iv_ruleConstantModifier=ruleConstantModifier 
	 { $current=$iv_ruleConstantModifier.current.getText(); }  
	 EOF 
;

// Rule ConstantModifier
ruleConstantModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantModifierAccess().getPrivateKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleConstantDeclarator
entryRuleConstantDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclaratorRule()); } 
	 iv_ruleConstantDeclarator=ruleConstantDeclarator 
	 { $current=$iv_ruleConstantDeclarator.current.getText(); }  
	 EOF 
;

// Rule ConstantDeclarator
ruleConstantDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantDeclaratorAccess().getIdentifierParserRuleCall_0()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantDeclaratorAccess().getEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstantDeclaratorAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression    {
		$current.merge(this_Expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleClassBase
entryRuleClassBase returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassBaseRule()); } 
	 iv_ruleClassBase=ruleClassBase 
	 { $current=$iv_ruleClassBase.current.getText(); }  
	 EOF 
;

// Rule ClassBase
ruleClassBase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassBaseAccess().getColonKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getClassBaseAccess().getQualifiedIdentifierListParserRuleCall_1_0()); 
    }
    this_QualifiedIdentifierList_1=ruleQualifiedIdentifierList    {
		$current.merge(this_QualifiedIdentifierList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getClassBaseAccess().getBuiltInClassTypeParserRuleCall_1_1_0()); 
    }
    this_BuiltInClassType_2=ruleBuiltInClassType    {
		$current.merge(this_BuiltInClassType_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassBaseAccess().getCommaKeyword_1_1_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getClassBaseAccess().getQualifiedIdentifierListParserRuleCall_1_1_1_1()); 
    }
    this_QualifiedIdentifierList_4=ruleQualifiedIdentifierList    {
		$current.merge(this_QualifiedIdentifierList_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)))
    ;





// Entry rule entryRuleQualifiedIdentifierList
entryRuleQualifiedIdentifierList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIdentifierListRule()); } 
	 iv_ruleQualifiedIdentifierList=ruleQualifiedIdentifierList 
	 { $current=$iv_ruleQualifiedIdentifierList.current.getText(); }  
	 EOF 
;

// Rule QualifiedIdentifierList
ruleQualifiedIdentifierList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedIdentifierListAccess().getQualifiedIdentifierParserRuleCall_0()); 
    }
    this_QualifiedIdentifier_0=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIdentifierListAccess().getCommaKeyword_1()); 
    }
)+
    ;





// Entry rule entryRuleClassModifier
entryRuleClassModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassModifierRule()); } 
	 iv_ruleClassModifier=ruleClassModifier 
	 { $current=$iv_ruleClassModifier.current.getText(); }  
	 EOF 
;

// Rule ClassModifier
ruleClassModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClassModifierAccess().getModifierParserRuleCall_0()); 
    }
    this_Modifier_0=ruleModifier    {
		$current.merge(this_Modifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassModifierAccess().getAbstractKeyword_1()); 
    }

    |
	kw='sealed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassModifierAccess().getSealedKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleGlobalAttributes
entryRuleGlobalAttributes returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalAttributesRule()); } 
	 iv_ruleGlobalAttributes=ruleGlobalAttributes 
	 { $current=$iv_ruleGlobalAttributes.current.getText(); }  
	 EOF 
;

// Rule GlobalAttributes
ruleGlobalAttributes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGlobalAttributesAccess().getGlobalAttributeSectionParserRuleCall()); 
    }
    this_GlobalAttributeSection_0=ruleGlobalAttributeSection    {
		$current.merge(this_GlobalAttributeSection_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    ;





// Entry rule entryRuleGlobalAttributeSection
entryRuleGlobalAttributeSection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalAttributeSectionRule()); } 
	 iv_ruleGlobalAttributeSection=ruleGlobalAttributeSection 
	 { $current=$iv_ruleGlobalAttributeSection.current.getText(); }  
	 EOF 
;

// Rule GlobalAttributeSection
ruleGlobalAttributeSection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalAttributeSectionAccess().getLeftSquareBracketKeyword_0()); 
    }

	kw='assembly' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalAttributeSectionAccess().getAssemblyKeyword_1()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalAttributeSectionAccess().getColonKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getGlobalAttributeSectionAccess().getAttributeListParserRuleCall_3()); 
    }
    this_AttributeList_3=ruleAttributeList    {
		$current.merge(this_AttributeList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalAttributeSectionAccess().getCommaKeyword_4()); 
    }
)?
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalAttributeSectionAccess().getRightSquareBracketKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleAttributes
entryRuleAttributes returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributesRule()); } 
	 iv_ruleAttributes=ruleAttributes 
	 { $current=$iv_ruleAttributes.current.getText(); }  
	 EOF 
;

// Rule Attributes
ruleAttributes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributesAccess().getAttributeSectionParserRuleCall()); 
    }
    this_AttributeSection_0=ruleAttributeSection    {
		$current.merge(this_AttributeSection_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    ;





// Entry rule entryRuleAttributeSection
entryRuleAttributeSection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeSectionRule()); } 
	 iv_ruleAttributeSection=ruleAttributeSection 
	 { $current=$iv_ruleAttributeSection.current.getText(); }  
	 EOF 
;

// Rule AttributeSection
ruleAttributeSection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeSectionAccess().getLeftSquareBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getAttributeSectionAccess().getAttributeTargetParserRuleCall_1_0()); 
    }
    this_AttributeTarget_1=ruleAttributeTarget    {
		$current.merge(this_AttributeTarget_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeSectionAccess().getColonKeyword_1_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getAttributeSectionAccess().getAttributeListParserRuleCall_2()); 
    }
    this_AttributeList_3=ruleAttributeList    {
		$current.merge(this_AttributeList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeSectionAccess().getCommaKeyword_3()); 
    }
)?
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeSectionAccess().getRightSquareBracketKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleAttributeTarget
entryRuleAttributeTarget returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeTargetRule()); } 
	 iv_ruleAttributeTarget=ruleAttributeTarget 
	 { $current=$iv_ruleAttributeTarget.current.getText(); }  
	 EOF 
;

// Rule AttributeTarget
ruleAttributeTarget returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='field' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTargetAccess().getFieldKeyword_0()); 
    }

    |
	kw='event' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTargetAccess().getEventKeyword_1()); 
    }

    |
	kw='method' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTargetAccess().getMethodKeyword_2()); 
    }

    |
	kw='module' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTargetAccess().getModuleKeyword_3()); 
    }

    |
	kw='param' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTargetAccess().getParamKeyword_4()); 
    }

    |
	kw='property' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTargetAccess().getPropertyKeyword_5()); 
    }

    |
	kw='return' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTargetAccess().getReturnKeyword_6()); 
    }

    |
	kw='type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTargetAccess().getTypeKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleAttributeList
entryRuleAttributeList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeListRule()); } 
	 iv_ruleAttributeList=ruleAttributeList 
	 { $current=$iv_ruleAttributeList.current.getText(); }  
	 EOF 
;

// Rule AttributeList
ruleAttributeList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeListAccess().getAttributeParserRuleCall_0()); 
    }
    this_Attribute_0=ruleAttribute    {
		$current.merge(this_Attribute_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeListAccess().getCommaKeyword_1()); 
    }
)+
    ;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); } 
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current.getText(); }  
	 EOF 
;

// Rule Attribute
ruleAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getAttributeNameParserRuleCall_0()); 
    }
    this_AttributeName_0=ruleAttributeName    {
		$current.merge(this_AttributeName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getAttributeArgumentsParserRuleCall_1()); 
    }
    this_AttributeArguments_1=ruleAttributeArguments    {
		$current.merge(this_AttributeArguments_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleAttributeArguments
entryRuleAttributeArguments returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeArgumentsRule()); } 
	 iv_ruleAttributeArguments=ruleAttributeArguments 
	 { $current=$iv_ruleAttributeArguments.current.getText(); }  
	 EOF 
;

// Rule AttributeArguments
ruleAttributeArguments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeArgumentsAccess().getLeftParenthesisKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getAttributeArgumentsAccess().getExpressionListParserRuleCall_1()); 
    }
    this_ExpressionList_1=ruleExpressionList    {
		$current.merge(this_ExpressionList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeArgumentsAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); } 
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current.getText(); }  
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression    {
		$current.merge(this_Expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionListAccess().getCommaKeyword_1()); 
    }
)+
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current.getText(); }  
	 EOF 
;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression    {
		$current.merge(this_UnaryExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression2ParserRuleCall_1_0()); 
    }
    this_Expression2_1=ruleExpression2    {
		$current.merge(this_Expression2_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(    this_BAR_2=RULE_BAR    {
		$current.merge(this_BAR_2);
    }

    { 
    newLeafNode(this_BAR_2, grammarAccess.getExpressionAccess().getBARTerminalRuleCall_1_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_1_1_1()); 
    }
    this_Expression_3=ruleExpression    {
		$current.merge(this_Expression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression2ParserRuleCall_1_1_2()); 
    }
    this_Expression2_4=ruleExpression2    {
		$current.merge(this_Expression2_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    ;





// Entry rule entryRuleExpression2
entryRuleExpression2 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression2Rule()); } 
	 iv_ruleExpression2=ruleExpression2 
	 { $current=$iv_ruleExpression2.current.getText(); }  
	 EOF 
;

// Rule Expression2
ruleExpression2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getQuestionMarkKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression    {
		$current.merge(this_Expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getColonKeyword_0_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_0_3()); 
    }
    this_Expression_3=ruleExpression    {
		$current.merge(this_Expression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_0_4()); 
    }
    this_Expression2_4=ruleExpression2    {
		$current.merge(this_Expression2_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getVerticalLineVerticalLineKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_1_1()); 
    }
    this_Expression_6=ruleExpression    {
		$current.merge(this_Expression_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_1_2()); 
    }
    this_Expression2_7=ruleExpression2    {
		$current.merge(this_Expression2_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getAmpersandAmpersandKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_2_1()); 
    }
    this_Expression_9=ruleExpression    {
		$current.merge(this_Expression_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_2_2()); 
    }
    this_Expression2_10=ruleExpression2    {
		$current.merge(this_Expression2_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(    this_BAR_11=RULE_BAR    {
		$current.merge(this_BAR_11);
    }

    { 
    newLeafNode(this_BAR_11, grammarAccess.getExpression2Access().getBARTerminalRuleCall_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_3_1()); 
    }
    this_Expression_12=ruleExpression    {
		$current.merge(this_Expression_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_3_2()); 
    }
    this_Expression2_13=ruleExpression2    {
		$current.merge(this_Expression2_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getCircumflexAccentKeyword_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_4_1()); 
    }
    this_Expression_15=ruleExpression    {
		$current.merge(this_Expression_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_4_2()); 
    }
    this_Expression2_16=ruleExpression2    {
		$current.merge(this_Expression2_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(    this_AMPERSAND_17=RULE_AMPERSAND    {
		$current.merge(this_AMPERSAND_17);
    }

    { 
    newLeafNode(this_AMPERSAND_17, grammarAccess.getExpression2Access().getAMPERSANDTerminalRuleCall_5_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_5_1()); 
    }
    this_Expression_18=ruleExpression    {
		$current.merge(this_Expression_18);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_5_2()); 
    }
    this_Expression2_19=ruleExpression2    {
		$current.merge(this_Expression2_19);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(    this_EXPRESSION_EQUALITY_OPERATOR_20=RULE_EXPRESSION_EQUALITY_OPERATOR    {
		$current.merge(this_EXPRESSION_EQUALITY_OPERATOR_20);
    }

    { 
    newLeafNode(this_EXPRESSION_EQUALITY_OPERATOR_20, grammarAccess.getExpression2Access().getEXPRESSION_EQUALITY_OPERATORTerminalRuleCall_6_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_6_1()); 
    }
    this_Expression_21=ruleExpression    {
		$current.merge(this_Expression_21);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_6_2()); 
    }
    this_Expression2_22=ruleExpression2    {
		$current.merge(this_Expression2_22);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionRelationalOperatorParserRuleCall_7_0()); 
    }
    this_ExpressionRelationalOperator_23=ruleExpressionRelationalOperator    {
		$current.merge(this_ExpressionRelationalOperator_23);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_7_1()); 
    }
    this_Expression_24=ruleExpression    {
		$current.merge(this_Expression_24);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_7_2()); 
    }
    this_Expression2_25=ruleExpression2    {
		$current.merge(this_Expression2_25);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getIsKeyword_8_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getBuiltInTypeParserRuleCall_8_1()); 
    }
    this_BuiltInType_27=ruleBuiltInType    {
		$current.merge(this_BuiltInType_27);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_8_2()); 
    }
    this_Expression2_28=ruleExpression2    {
		$current.merge(this_Expression2_28);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionShiftOperatorParserRuleCall_9_0()); 
    }
    this_ExpressionShiftOperator_29=ruleExpressionShiftOperator    {
		$current.merge(this_ExpressionShiftOperator_29);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_9_1()); 
    }
    this_Expression_30=ruleExpression    {
		$current.merge(this_Expression_30);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_9_2()); 
    }
    this_Expression2_31=ruleExpression2    {
		$current.merge(this_Expression2_31);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(    this_OPERATOR_OR_SIGN_32=RULE_OPERATOR_OR_SIGN    {
		$current.merge(this_OPERATOR_OR_SIGN_32);
    }

    { 
    newLeafNode(this_OPERATOR_OR_SIGN_32, grammarAccess.getExpression2Access().getOPERATOR_OR_SIGNTerminalRuleCall_10_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_10_1()); 
    }
    this_Expression_33=ruleExpression    {
		$current.merge(this_Expression_33);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_10_2()); 
    }
    this_Expression2_34=ruleExpression2    {
		$current.merge(this_Expression2_34);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getAsteriskKeyword_11_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_11_1()); 
    }
    this_Expression_36=ruleExpression    {
		$current.merge(this_Expression_36);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_11_2()); 
    }
    this_Expression2_37=ruleExpression2    {
		$current.merge(this_Expression2_37);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getSolidusKeyword_12_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_12_1()); 
    }
    this_Expression_39=ruleExpression    {
		$current.merge(this_Expression_39);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_12_2()); 
    }
    this_Expression2_40=ruleExpression2    {
		$current.merge(this_Expression2_40);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression2Access().getPercentSignKeyword_13_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpressionParserRuleCall_13_1()); 
    }
    this_Expression_42=ruleExpression    {
		$current.merge(this_Expression_42);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpression2Access().getExpression2ParserRuleCall_13_2()); 
    }
    this_Expression2_43=ruleExpression2    {
		$current.merge(this_Expression2_43);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))*
    ;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); } 
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current.getText(); }  
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryOperatorParserRuleCall_0_0()); 
    }
    this_ExpressionUnaryOperator_0=ruleExpressionUnaryOperator    {
		$current.merge(this_ExpressionUnaryOperator_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_0_1()); 
    }
    this_UnaryExpression_1=ruleUnaryExpression    {
		$current.merge(this_UnaryExpression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryExpressionAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getTypeParserRuleCall_1_1()); 
    }
    this_Type_3=ruleType    {
		$current.merge(this_Type_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryExpressionAccess().getRightParenthesisKeyword_1_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_1_3()); 
    }
    this_UnaryExpression_5=ruleUnaryExpression    {
		$current.merge(this_UnaryExpression_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleExpressionUnaryOperator
entryRuleExpressionUnaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionUnaryOperatorRule()); } 
	 iv_ruleExpressionUnaryOperator=ruleExpressionUnaryOperator 
	 { $current=$iv_ruleExpressionUnaryOperator.current.getText(); }  
	 EOF 
;

// Rule ExpressionUnaryOperator
ruleExpressionUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_OPERATOR_OR_PUNCTUATOR_0=RULE_OPERATOR_OR_PUNCTUATOR    {
		$current.merge(this_OPERATOR_OR_PUNCTUATOR_0);
    }

    { 
    newLeafNode(this_OPERATOR_OR_PUNCTUATOR_0, grammarAccess.getExpressionUnaryOperatorAccess().getOPERATOR_OR_PUNCTUATORTerminalRuleCall_0()); 
    }

    |    this_INCREMENT_DECREMENT_1=RULE_INCREMENT_DECREMENT    {
		$current.merge(this_INCREMENT_DECREMENT_1);
    }

    { 
    newLeafNode(this_INCREMENT_DECREMENT_1, grammarAccess.getExpressionUnaryOperatorAccess().getINCREMENT_DECREMENTTerminalRuleCall_1()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionUnaryOperatorAccess().getExclamationMarkKeyword_2()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionUnaryOperatorAccess().getTildeKeyword_3()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionUnaryOperatorAccess().getAsteriskKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleExpressionShiftOperator
entryRuleExpressionShiftOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionShiftOperatorRule()); } 
	 iv_ruleExpressionShiftOperator=ruleExpressionShiftOperator 
	 { $current=$iv_ruleExpressionShiftOperator.current.getText(); }  
	 EOF 
;

// Rule ExpressionShiftOperator
ruleExpressionShiftOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionShiftOperatorAccess().getLessThanSignLessThanSignKeyword_0()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionShiftOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleExpressionRelationalOperator
entryRuleExpressionRelationalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRelationalOperatorRule()); } 
	 iv_ruleExpressionRelationalOperator=ruleExpressionRelationalOperator 
	 { $current=$iv_ruleExpressionRelationalOperator.current.getText(); }  
	 EOF 
;

// Rule ExpressionRelationalOperator
ruleExpressionRelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_LESS_THAN_0=RULE_LESS_THAN    {
		$current.merge(this_LESS_THAN_0);
    }

    { 
    newLeafNode(this_LESS_THAN_0, grammarAccess.getExpressionRelationalOperatorAccess().getLESS_THANTerminalRuleCall_0()); 
    }

    |    this_GREATER_THAN_1=RULE_GREATER_THAN    {
		$current.merge(this_GREATER_THAN_1);
    }

    { 
    newLeafNode(this_GREATER_THAN_1, grammarAccess.getExpressionRelationalOperatorAccess().getGREATER_THANTerminalRuleCall_1()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionRelationalOperatorAccess().getIsKeyword_4()); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionRelationalOperatorAccess().getAsKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeNameRule()); } 
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current.getText(); }  
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAttributeNameAccess().getQualifiedIdentifierParserRuleCall()); 
    }
    this_QualifiedIdentifier_0=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleUsingDirective
entryRuleUsingDirective returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsingDirectiveRule()); } 
	 iv_ruleUsingDirective=ruleUsingDirective 
	 { $current=$iv_ruleUsingDirective.current.getText(); }  
	 EOF 
;

// Rule UsingDirective
ruleUsingDirective returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='using' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingDirectiveAccess().getUsingKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getUsingDirectiveAccess().getIdentifierParserRuleCall_1_0()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingDirectiveAccess().getEqualsSignKeyword_1_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getUsingDirectiveAccess().getQualifiedIdentifierParserRuleCall_2()); 
    }
    this_QualifiedIdentifier_3=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingDirectiveAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getNonArrayTypeParserRuleCall_0()); 
    }
    this_NonArrayType_0=ruleNonArrayType    {
		$current.merge(this_NonArrayType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_RANK_SPECIFIER_1=RULE_RANK_SPECIFIER    {
		$current.merge(this_RANK_SPECIFIER_1);
    }

    { 
    newLeafNode(this_RANK_SPECIFIER_1, grammarAccess.getTypeAccess().getRANK_SPECIFIERTerminalRuleCall_1()); 
    }
)*)
    ;





// Entry rule entryRuleIntegralType
entryRuleIntegralType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegralTypeRule()); } 
	 iv_ruleIntegralType=ruleIntegralType 
	 { $current=$iv_ruleIntegralType.current.getText(); }  
	 EOF 
;

// Rule IntegralType
ruleIntegralType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='sbyte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getSbyteKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getByteKeyword_1()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getShortKeyword_2()); 
    }

    |
	kw='ushort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUshortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getIntKeyword_4()); 
    }

    |
	kw='uint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUintKeyword_5()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getLongKeyword_6()); 
    }

    |
	kw='ulong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getUlongKeyword_7()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegralTypeAccess().getCharKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleArrayType
entryRuleArrayType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); } 
	 iv_ruleArrayType=ruleArrayType 
	 { $current=$iv_ruleArrayType.current.getText(); }  
	 EOF 
;

// Rule ArrayType
ruleArrayType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArrayTypeAccess().getNonArrayTypeParserRuleCall_0()); 
    }
    this_NonArrayType_0=ruleNonArrayType    {
		$current.merge(this_NonArrayType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_RANK_SPECIFIER_1=RULE_RANK_SPECIFIER    {
		$current.merge(this_RANK_SPECIFIER_1);
    }

    { 
    newLeafNode(this_RANK_SPECIFIER_1, grammarAccess.getArrayTypeAccess().getRANK_SPECIFIERTerminalRuleCall_1()); 
    }
)+)
    ;







// Entry rule entryRuleNonArrayType
entryRuleNonArrayType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonArrayTypeRule()); } 
	 iv_ruleNonArrayType=ruleNonArrayType 
	 { $current=$iv_ruleNonArrayType.current.getText(); }  
	 EOF 
;

// Rule NonArrayType
ruleNonArrayType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNonArrayTypeAccess().getBuiltInTypeParserRuleCall()); 
    }
    this_BuiltInType_0=ruleBuiltInType    {
		$current.merge(this_BuiltInType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleQualifiedIdentifier
entryRuleQualifiedIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIdentifierRule()); } 
	 iv_ruleQualifiedIdentifier=ruleQualifiedIdentifier 
	 { $current=$iv_ruleQualifiedIdentifier.current.getText(); }  
	 EOF 
;

// Rule QualifiedIdentifier
ruleQualifiedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedIdentifierAccess().getIdentifierParserRuleCall_0()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIdentifierAccess().getFullStopKeyword_1()); 
    }
)+
    ;





// Entry rule entryRuleBuiltInType
entryRuleBuiltInType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInTypeRule()); } 
	 iv_ruleBuiltInType=ruleBuiltInType 
	 { $current=$iv_ruleBuiltInType.current.getText(); }  
	 EOF 
;

// Rule BuiltInType
ruleBuiltInType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBuiltInTypeAccess().getIntegralTypeParserRuleCall_0()); 
    }
    this_IntegralType_0=ruleIntegralType    {
		$current.merge(this_IntegralType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInTypeAccess().getBuiltInClassTypeParserRuleCall_1()); 
    }
    this_BuiltInClassType_1=ruleBuiltInClassType    {
		$current.merge(this_BuiltInClassType_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getBoolKeyword_2()); 
    }

    |
	kw='decimal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getDecimalKeyword_3()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getFloatKeyword_4()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInTypeAccess().getDoubleKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleBuiltInClassType
entryRuleBuiltInClassType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInClassTypeRule()); } 
	 iv_ruleBuiltInClassType=ruleBuiltInClassType 
	 { $current=$iv_ruleBuiltInClassType.current.getText(); }  
	 EOF 
;

// Rule BuiltInClassType
ruleBuiltInClassType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInClassTypeAccess().getObjectKeyword_0()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInClassTypeAccess().getStringKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEnumBody
entryRuleEnumBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumBodyRule()); } 
	 iv_ruleEnumBody=ruleEnumBody 
	 { $current=$iv_ruleEnumBody.current.getText(); }  
	 EOF 
;

// Rule EnumBody
ruleEnumBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getLeftCurlyBracketKeyword_0_0()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getRightCurlyBracketKeyword_0_1()); 
    }
)
    |(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getLeftCurlyBracketKeyword_1_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getEnumBodyAccess().getEnumMemberDeclarationParserRuleCall_1_1_0()); 
    }
    this_EnumMemberDeclaration_3=ruleEnumMemberDeclaration    {
		$current.merge(this_EnumMemberDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getCommaKeyword_1_1_1()); 
    }
)+(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getCommaKeyword_1_2()); 
    }
)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBodyAccess().getRightCurlyBracketKeyword_1_3()); 
    }
))
    ;





// Entry rule entryRuleEnumMemberDeclaration
entryRuleEnumMemberDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumMemberDeclarationRule()); } 
	 iv_ruleEnumMemberDeclaration=ruleEnumMemberDeclaration 
	 { $current=$iv_ruleEnumMemberDeclaration.current.getText(); }  
	 EOF 
;

// Rule EnumMemberDeclaration
ruleEnumMemberDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEnumMemberDeclarationAccess().getAttributesParserRuleCall_0()); 
    }
    this_Attributes_0=ruleAttributes    {
		$current.merge(this_Attributes_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEnumMemberDeclarationAccess().getIdentifierParserRuleCall_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumMemberDeclarationAccess().getEqualsSignKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumMemberDeclarationAccess().getExpressionParserRuleCall_2_1()); 
    }
    this_Expression_3=ruleExpression    {
		$current.merge(this_Expression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleEnumModifier
entryRuleEnumModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumModifierRule()); } 
	 iv_ruleEnumModifier=ruleEnumModifier 
	 { $current=$iv_ruleEnumModifier.current.getText(); }  
	 EOF 
;

// Rule EnumModifier
ruleEnumModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getNewKeyword_0()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getPublicKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getInternalKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumModifierAccess().getPrivateKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleStatement
entryRuleStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current.getText(); }  
	 EOF 
;

// Rule Statement
ruleStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLabeledStatementParserRuleCall_0()); 
    }
    this_LabeledStatement_0=ruleLabeledStatement    {
		$current.merge(this_LabeledStatement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDeclarationStatementParserRuleCall_1()); 
    }
    this_DeclarationStatement_1=ruleDeclarationStatement    {
		$current.merge(this_DeclarationStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getEmbeddedStatementParserRuleCall_2()); 
    }
    this_EmbeddedStatement_2=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleDeclarationStatement
entryRuleDeclarationStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationStatementRule()); } 
	 iv_ruleDeclarationStatement=ruleDeclarationStatement 
	 { $current=$iv_ruleDeclarationStatement.current.getText(); }  
	 EOF 
;

// Rule DeclarationStatement
ruleDeclarationStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getDeclarationStatementAccess().getLocalVariableDeclarationParserRuleCall_0_0()); 
    }
    this_LocalVariableDeclaration_0=ruleLocalVariableDeclaration    {
		$current.merge(this_LocalVariableDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationStatementAccess().getSemicolonKeyword_0_1()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getDeclarationStatementAccess().getLocalConstantDeclarationParserRuleCall_1_0()); 
    }
    this_LocalConstantDeclaration_2=ruleLocalConstantDeclaration    {
		$current.merge(this_LocalConstantDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationStatementAccess().getSemicolonKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleLocalConstantDeclaration
entryRuleLocalConstantDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalConstantDeclarationRule()); } 
	 iv_ruleLocalConstantDeclaration=ruleLocalConstantDeclaration 
	 { $current=$iv_ruleLocalConstantDeclaration.current.getText(); }  
	 EOF 
;

// Rule LocalConstantDeclaration
ruleLocalConstantDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLocalConstantDeclarationAccess().getConstKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLocalConstantDeclarationAccess().getTypeParserRuleCall_1()); 
    }
    this_Type_1=ruleType    {
		$current.merge(this_Type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getLocalConstantDeclarationAccess().getConstantDeclaratorParserRuleCall_2_0()); 
    }
    this_ConstantDeclarator_2=ruleConstantDeclarator    {
		$current.merge(this_ConstantDeclarator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLocalConstantDeclarationAccess().getCommaKeyword_2_1()); 
    }
)+)
    ;





// Entry rule entryRuleLabeledStatement
entryRuleLabeledStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabeledStatementRule()); } 
	 iv_ruleLabeledStatement=ruleLabeledStatement 
	 { $current=$iv_ruleLabeledStatement.current.getText(); }  
	 EOF 
;

// Rule LabeledStatement
ruleLabeledStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLabeledStatementAccess().getIdentifierParserRuleCall_0()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabeledStatementAccess().getColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_2()); 
    }
    this_Statement_2=ruleStatement    {
		$current.merge(this_Statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleEmbeddedStatement
entryRuleEmbeddedStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmbeddedStatementRule()); } 
	 iv_ruleEmbeddedStatement=ruleEmbeddedStatement 
	 { $current=$iv_ruleEmbeddedStatement.current.getText(); }  
	 EOF 
;

// Rule EmbeddedStatement
ruleEmbeddedStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getMaybeEmptyBlockParserRuleCall_0()); 
    }
    this_MaybeEmptyBlock_0=ruleMaybeEmptyBlock    {
		$current.merge(this_MaybeEmptyBlock_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getStatementExpressionParserRuleCall_1_0()); 
    }
    this_StatementExpression_1=ruleStatementExpression    {
		$current.merge(this_StatementExpression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEmbeddedStatementAccess().getSemicolonKeyword_1_1()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getSelectionStatementParserRuleCall_2()); 
    }
    this_SelectionStatement_3=ruleSelectionStatement    {
		$current.merge(this_SelectionStatement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getIterationStatementParserRuleCall_3()); 
    }
    this_IterationStatement_4=ruleIterationStatement    {
		$current.merge(this_IterationStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getJumpStatementParserRuleCall_4()); 
    }
    this_JumpStatement_5=ruleJumpStatement    {
		$current.merge(this_JumpStatement_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getTryStatementParserRuleCall_5()); 
    }
    this_TryStatement_6=ruleTryStatement    {
		$current.merge(this_TryStatement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |((
	kw='checked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEmbeddedStatementAccess().getCheckedKeyword_6_0_0()); 
    }

    |
	kw='unchecked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEmbeddedStatementAccess().getUncheckedKeyword_6_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getBlockParserRuleCall_6_1()); 
    }
    this_Block_9=ruleBlock    {
		$current.merge(this_Block_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getLockStatementParserRuleCall_7()); 
    }
    this_LockStatement_10=ruleLockStatement    {
		$current.merge(this_LockStatement_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEmbeddedStatementAccess().getUsingStatementParserRuleCall_8()); 
    }
    this_UsingStatement_11=ruleUsingStatement    {
		$current.merge(this_UsingStatement_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleUsingStatement
entryRuleUsingStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsingStatementRule()); } 
	 iv_ruleUsingStatement=ruleUsingStatement 
	 { $current=$iv_ruleUsingStatement.current.getText(); }  
	 EOF 
;

// Rule UsingStatement
ruleUsingStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='using' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingStatementAccess().getUsingKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingStatementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getUsingStatementAccess().getResourceAquisitionParserRuleCall_2()); 
    }
    this_ResourceAquisition_2=ruleResourceAquisition    {
		$current.merge(this_ResourceAquisition_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingStatementAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getUsingStatementAccess().getEmbeddedStatementParserRuleCall_4()); 
    }
    this_EmbeddedStatement_4=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleResourceAquisition
entryRuleResourceAquisition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getResourceAquisitionRule()); } 
	 iv_ruleResourceAquisition=ruleResourceAquisition 
	 { $current=$iv_ruleResourceAquisition.current.getText(); }  
	 EOF 
;

// Rule ResourceAquisition
ruleResourceAquisition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getResourceAquisitionAccess().getLocalVariableDeclarationParserRuleCall_0()); 
    }
    this_LocalVariableDeclaration_0=ruleLocalVariableDeclaration    {
		$current.merge(this_LocalVariableDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getResourceAquisitionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression    {
		$current.merge(this_Expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); } 
	 iv_ruleLocalVariableDeclaration=ruleLocalVariableDeclaration 
	 { $current=$iv_ruleLocalVariableDeclaration.current.getText(); }  
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType    {
		$current.merge(this_Type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getVariableDeclaratorParserRuleCall_1_0()); 
    }
    this_VariableDeclarator_1=ruleVariableDeclarator    {
		$current.merge(this_VariableDeclarator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLocalVariableDeclarationAccess().getCommaKeyword_1_1()); 
    }
)+)
    ;





// Entry rule entryRuleLockStatement
entryRuleLockStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLockStatementRule()); } 
	 iv_ruleLockStatement=ruleLockStatement 
	 { $current=$iv_ruleLockStatement.current.getText(); }  
	 EOF 
;

// Rule LockStatement
ruleLockStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='lock' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLockStatementAccess().getLockKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLockStatementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getLockStatementAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression    {
		$current.merge(this_Expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLockStatementAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getLockStatementAccess().getEmbeddedStatementParserRuleCall_4()); 
    }
    this_EmbeddedStatement_4=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTryStatement
entryRuleTryStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTryStatementRule()); } 
	 iv_ruleTryStatement=ruleTryStatement 
	 { $current=$iv_ruleTryStatement.current.getText(); }  
	 EOF 
;

// Rule TryStatement
ruleTryStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='try' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTryStatementAccess().getBlockParserRuleCall_1()); 
    }
    this_Block_1=ruleBlock    {
		$current.merge(this_Block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
    { 
        newCompositeNode(grammarAccess.getTryStatementAccess().getCatchClausesParserRuleCall_2_0_0()); 
    }
    this_CatchClauses_2=ruleCatchClauses    {
		$current.merge(this_CatchClauses_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyClauseParserRuleCall_2_0_1()); 
    }
    this_FinallyClause_3=ruleFinallyClause    {
		$current.merge(this_FinallyClause_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyClauseParserRuleCall_2_1()); 
    }
    this_FinallyClause_4=ruleFinallyClause    {
		$current.merge(this_FinallyClause_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleFinallyClause
entryRuleFinallyClause returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFinallyClauseRule()); } 
	 iv_ruleFinallyClause=ruleFinallyClause 
	 { $current=$iv_ruleFinallyClause.current.getText(); }  
	 EOF 
;

// Rule FinallyClause
ruleFinallyClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='finally' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFinallyClauseAccess().getFinallyKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFinallyClauseAccess().getBlockParserRuleCall_1()); 
    }
    this_Block_1=ruleBlock    {
		$current.merge(this_Block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleCatchClauses
entryRuleCatchClauses returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCatchClausesRule()); } 
	 iv_ruleCatchClauses=ruleCatchClauses 
	 { $current=$iv_ruleCatchClauses.current.getText(); }  
	 EOF 
;

// Rule CatchClauses
ruleCatchClauses returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getCatchClausesAccess().getSpecificCatchClauseParserRuleCall_0_0()); 
    }
    this_SpecificCatchClause_0=ruleSpecificCatchClause    {
		$current.merge(this_SpecificCatchClause_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+(
    { 
        newCompositeNode(grammarAccess.getCatchClausesAccess().getGeneralCatchClauseParserRuleCall_0_1()); 
    }
    this_GeneralCatchClause_1=ruleGeneralCatchClause    {
		$current.merge(this_GeneralCatchClause_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |((
    { 
        newCompositeNode(grammarAccess.getCatchClausesAccess().getSpecificCatchClauseParserRuleCall_1_0()); 
    }
    this_SpecificCatchClause_2=ruleSpecificCatchClause    {
		$current.merge(this_SpecificCatchClause_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(( ruleGeneralCatchClause)=>
    { 
        newCompositeNode(grammarAccess.getCatchClausesAccess().getGeneralCatchClauseParserRuleCall_1_1()); 
    }
    this_GeneralCatchClause_3=ruleGeneralCatchClause    {
		$current.merge(this_GeneralCatchClause_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    ;





// Entry rule entryRuleGeneralCatchClause
entryRuleGeneralCatchClause returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGeneralCatchClauseRule()); } 
	 iv_ruleGeneralCatchClause=ruleGeneralCatchClause 
	 { $current=$iv_ruleGeneralCatchClause.current.getText(); }  
	 EOF 
;

// Rule GeneralCatchClause
ruleGeneralCatchClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGeneralCatchClauseAccess().getCatchKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getGeneralCatchClauseAccess().getBlockParserRuleCall_1()); 
    }
    this_Block_1=ruleBlock    {
		$current.merge(this_Block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSpecificCatchClause
entryRuleSpecificCatchClause returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecificCatchClauseRule()); } 
	 iv_ruleSpecificCatchClause=ruleSpecificCatchClause 
	 { $current=$iv_ruleSpecificCatchClause.current.getText(); }  
	 EOF 
;

// Rule SpecificCatchClause
ruleSpecificCatchClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecificCatchClauseAccess().getCatchKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecificCatchClauseAccess().getLeftParenthesisKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getSpecificCatchClauseAccess().getBuiltInClassTypeParserRuleCall_2_0()); 
    }
    this_BuiltInClassType_2=ruleBuiltInClassType    {
		$current.merge(this_BuiltInClassType_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpecificCatchClauseAccess().getQualifiedIdentifierParserRuleCall_2_1()); 
    }
    this_QualifiedIdentifier_3=ruleQualifiedIdentifier    {
		$current.merge(this_QualifiedIdentifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
    { 
        newCompositeNode(grammarAccess.getSpecificCatchClauseAccess().getIdentifierParserRuleCall_3()); 
    }
    this_Identifier_4=ruleIdentifier    {
		$current.merge(this_Identifier_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecificCatchClauseAccess().getRightParenthesisKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getSpecificCatchClauseAccess().getBlockParserRuleCall_5()); 
    }
    this_Block_6=ruleBlock    {
		$current.merge(this_Block_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleJumpStatement
entryRuleJumpStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJumpStatementRule()); } 
	 iv_ruleJumpStatement=ruleJumpStatement 
	 { $current=$iv_ruleJumpStatement.current.getText(); }  
	 EOF 
;

// Rule JumpStatement
ruleJumpStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJumpStatementAccess().getBreakStatementParserRuleCall_0()); 
    }
    this_BreakStatement_0=ruleBreakStatement    {
		$current.merge(this_BreakStatement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJumpStatementAccess().getContinueStatementParserRuleCall_1()); 
    }
    this_ContinueStatement_1=ruleContinueStatement    {
		$current.merge(this_ContinueStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJumpStatementAccess().getGotoStatementParserRuleCall_2()); 
    }
    this_GotoStatement_2=ruleGotoStatement    {
		$current.merge(this_GotoStatement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJumpStatementAccess().getReturnStatementParserRuleCall_3()); 
    }
    this_ReturnStatement_3=ruleReturnStatement    {
		$current.merge(this_ReturnStatement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJumpStatementAccess().getThrowStatementParserRuleCall_4()); 
    }
    this_ThrowStatement_4=ruleThrowStatement    {
		$current.merge(this_ThrowStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleThrowStatement
entryRuleThrowStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getThrowStatementRule()); } 
	 iv_ruleThrowStatement=ruleThrowStatement 
	 { $current=$iv_ruleThrowStatement.current.getText(); }  
	 EOF 
;

// Rule ThrowStatement
ruleThrowStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='throw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression    {
		$current.merge(this_Expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); } 
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current.getText(); }  
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='return' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression    {
		$current.merge(this_Expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleGotoStatement
entryRuleGotoStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGotoStatementRule()); } 
	 iv_ruleGotoStatement=ruleGotoStatement 
	 { $current=$iv_ruleGotoStatement.current.getText(); }  
	 EOF 
;

// Rule GotoStatement
ruleGotoStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='goto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGotoStatementAccess().getGotoKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getGotoStatementAccess().getIdentifierParserRuleCall_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGotoStatementAccess().getSemicolonKeyword_2()); 
    }

	kw='goto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGotoStatementAccess().getGotoKeyword_3()); 
    }

	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGotoStatementAccess().getCaseKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getGotoStatementAccess().getExpressionParserRuleCall_5()); 
    }
    this_Expression_5=ruleExpression    {
		$current.merge(this_Expression_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGotoStatementAccess().getSemicolonKeyword_6()); 
    }

	kw='goto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGotoStatementAccess().getGotoKeyword_7()); 
    }

	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGotoStatementAccess().getDefaultKeyword_8()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGotoStatementAccess().getSemicolonKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getContinueStatementRule()); } 
	 iv_ruleContinueStatement=ruleContinueStatement 
	 { $current=$iv_ruleContinueStatement.current.getText(); }  
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='continue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContinueStatementAccess().getContinueKeyword_0()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContinueStatementAccess().getSemicolonKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); } 
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current.getText(); }  
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='break' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBreakStatementAccess().getBreakKeyword_0()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleIterationStatement
entryRuleIterationStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIterationStatementRule()); } 
	 iv_ruleIterationStatement=ruleIterationStatement 
	 { $current=$iv_ruleIterationStatement.current.getText(); }  
	 EOF 
;

// Rule IterationStatement
ruleIterationStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_0()); 
    }
    this_WhileStatement_0=ruleWhileStatement    {
		$current.merge(this_WhileStatement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_1()); 
    }
    this_DoStatement_1=ruleDoStatement    {
		$current.merge(this_DoStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
    }
    this_ForStatement_2=ruleForStatement    {
		$current.merge(this_ForStatement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getForeachStatementParserRuleCall_3()); 
    }
    this_ForeachStatement_3=ruleForeachStatement    {
		$current.merge(this_ForeachStatement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleForeachStatement
entryRuleForeachStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeachStatementRule()); } 
	 iv_ruleForeachStatement=ruleForeachStatement 
	 { $current=$iv_ruleForeachStatement.current.getText(); }  
	 EOF 
;

// Rule ForeachStatement
ruleForeachStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='foreach' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForeachStatementAccess().getForeachKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForeachStatementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getForeachStatementAccess().getTypeParserRuleCall_2()); 
    }
    this_Type_2=ruleType    {
		$current.merge(this_Type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getForeachStatementAccess().getIdentifierParserRuleCall_3()); 
    }
    this_Identifier_3=ruleIdentifier    {
		$current.merge(this_Identifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForeachStatementAccess().getInKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getForeachStatementAccess().getExpressionParserRuleCall_5()); 
    }
    this_Expression_5=ruleExpression    {
		$current.merge(this_Expression_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForeachStatementAccess().getRightParenthesisKeyword_6()); 
    }

    { 
        newCompositeNode(grammarAccess.getForeachStatementAccess().getEmbeddedStatementParserRuleCall_7()); 
    }
    this_EmbeddedStatement_7=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); } 
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current.getText(); }  
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForStatementAccess().getForKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getForStatementAccess().getForInitializerParserRuleCall_2()); 
    }
    this_ForInitializer_2=ruleForInitializer    {
		$current.merge(this_ForInitializer_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForStatementAccess().getSemicolonKeyword_3()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getForStatementAccess().getExpressionParserRuleCall_4()); 
    }
    this_Expression_4=ruleExpression    {
		$current.merge(this_Expression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForStatementAccess().getSemicolonKeyword_5()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getForStatementAccess().getStatementExpressionListParserRuleCall_6()); 
    }
    this_StatementExpressionList_6=ruleStatementExpressionList    {
		$current.merge(this_StatementExpressionList_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7()); 
    }

    { 
        newCompositeNode(grammarAccess.getForStatementAccess().getEmbeddedStatementParserRuleCall_8()); 
    }
    this_EmbeddedStatement_8=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleForInitializer
entryRuleForInitializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInitializerRule()); } 
	 iv_ruleForInitializer=ruleForInitializer 
	 { $current=$iv_ruleForInitializer.current.getText(); }  
	 EOF 
;

// Rule ForInitializer
ruleForInitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getForInitializerAccess().getLocalVariableDeclarationParserRuleCall_0()); 
    }
    this_LocalVariableDeclaration_0=ruleLocalVariableDeclaration    {
		$current.merge(this_LocalVariableDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getForInitializerAccess().getStatementExpressionListParserRuleCall_1()); 
    }
    this_StatementExpressionList_1=ruleStatementExpressionList    {
		$current.merge(this_StatementExpressionList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleStatementExpressionList
entryRuleStatementExpressionList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementExpressionListRule()); } 
	 iv_ruleStatementExpressionList=ruleStatementExpressionList 
	 { $current=$iv_ruleStatementExpressionList.current.getText(); }  
	 EOF 
;

// Rule StatementExpressionList
ruleStatementExpressionList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementExpressionListAccess().getStatementExpressionParserRuleCall_0()); 
    }
    this_StatementExpression_0=ruleStatementExpression    {
		$current.merge(this_StatementExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementExpressionListAccess().getCommaKeyword_1()); 
    }
)+
    ;





// Entry rule entryRuleStatementExpression
entryRuleStatementExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementExpressionRule()); } 
	 iv_ruleStatementExpression=ruleStatementExpression 
	 { $current=$iv_ruleStatementExpression.current.getText(); }  
	 EOF 
;

// Rule StatementExpression
ruleStatementExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getPrimaryExpressionParserRuleCall_0_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression    {
		$current.merge(this_PrimaryExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementExpressionAccess().getLeftParenthesisKeyword_0_1_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getArgumentListParserRuleCall_0_1_0_1()); 
    }
    this_ArgumentList_2=ruleArgumentList    {
		$current.merge(this_ArgumentList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementExpressionAccess().getRightParenthesisKeyword_0_1_0_2()); 
    }
)
    |    this_INCREMENT_DECREMENT_4=RULE_INCREMENT_DECREMENT    {
		$current.merge(this_INCREMENT_DECREMENT_4);
    }

    { 
    newLeafNode(this_INCREMENT_DECREMENT_4, grammarAccess.getStatementExpressionAccess().getINCREMENT_DECREMENTTerminalRuleCall_0_1_1()); 
    }
))
    |(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementExpressionAccess().getNewKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getTypeParserRuleCall_1_1()); 
    }
    this_Type_6=ruleType    {
		$current.merge(this_Type_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementExpressionAccess().getLeftParenthesisKeyword_1_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getArgumentListParserRuleCall_1_3()); 
    }
    this_ArgumentList_8=ruleArgumentList    {
		$current.merge(this_ArgumentList_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementExpressionAccess().getRightParenthesisKeyword_1_4()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getUnaryExpressionParserRuleCall_2_0()); 
    }
    this_UnaryExpression_10=ruleUnaryExpression    {
		$current.merge(this_UnaryExpression_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_ASSIGNEMENT_OPERATOR_11=RULE_ASSIGNEMENT_OPERATOR    {
		$current.merge(this_ASSIGNEMENT_OPERATOR_11);
    }

    { 
    newLeafNode(this_ASSIGNEMENT_OPERATOR_11, grammarAccess.getStatementExpressionAccess().getASSIGNEMENT_OPERATORTerminalRuleCall_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getExpressionParserRuleCall_2_2()); 
    }
    this_Expression_12=ruleExpression    {
		$current.merge(this_Expression_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(    this_INCREMENT_DECREMENT_13=RULE_INCREMENT_DECREMENT    {
		$current.merge(this_INCREMENT_DECREMENT_13);
    }

    { 
    newLeafNode(this_INCREMENT_DECREMENT_13, grammarAccess.getStatementExpressionAccess().getINCREMENT_DECREMENTTerminalRuleCall_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getPrimaryExpressionParserRuleCall_3_1()); 
    }
    this_PrimaryExpression_14=rulePrimaryExpression    {
		$current.merge(this_PrimaryExpression_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); } 
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current.getText(); }  
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getNewKeyword_0_0_0()); 
    }
((
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNonArrayTypeParserRuleCall_0_0_1_0_0()); 
    }
    this_NonArrayType_1=ruleNonArrayType    {
		$current.merge(this_NonArrayType_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getLeftSquareBracketKeyword_0_0_1_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionListParserRuleCall_0_0_1_0_2()); 
    }
    this_ExpressionList_3=ruleExpressionList    {
		$current.merge(this_ExpressionList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getRightSquareBracketKeyword_0_0_1_0_3()); 
    }
(    this_RANK_SPECIFIER_5=RULE_RANK_SPECIFIER    {
		$current.merge(this_RANK_SPECIFIER_5);
    }

    { 
    newLeafNode(this_RANK_SPECIFIER_5, grammarAccess.getPrimaryExpressionAccess().getRANK_SPECIFIERTerminalRuleCall_0_0_1_0_4()); 
    }
)*(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayInitializerParserRuleCall_0_0_1_0_5()); 
    }
    this_ArrayInitializer_6=ruleArrayInitializer    {
		$current.merge(this_ArrayInitializer_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayTypeParserRuleCall_0_0_1_1_0()); 
    }
    this_ArrayType_7=ruleArrayType    {
		$current.merge(this_ArrayType_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayInitializerParserRuleCall_0_0_1_1_1()); 
    }
    this_ArrayInitializer_8=ruleArrayInitializer    {
		$current.merge(this_ArrayInitializer_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTypeParserRuleCall_0_0_1_2_0()); 
    }
    this_Type_9=ruleType    {
		$current.merge(this_Type_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0_1_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArgumentListParserRuleCall_0_0_1_2_2()); 
    }
    this_ArgumentList_11=ruleArgumentList    {
		$current.merge(this_ArgumentList_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_0_1_2_3()); 
    }
)))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierParserRuleCall_0_1()); 
    }
    this_Identifier_13=ruleIdentifier    {
		$current.merge(this_Identifier_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0_2()); 
    }
    this_Literal_14=ruleLiteral    {
		$current.merge(this_Literal_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_3_1()); 
    }
    this_Expression_16=ruleExpression    {
		$current.merge(this_Expression_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_3_2()); 
    }
)
    |(
	kw='base' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getBaseKeyword_0_4_0()); 
    }
((
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_0_4_1_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierParserRuleCall_0_4_1_0_1()); 
    }
    this_Identifier_20=ruleIdentifier    {
		$current.merge(this_Identifier_20);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getLeftSquareBracketKeyword_0_4_1_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionListParserRuleCall_0_4_1_1_1()); 
    }
    this_ExpressionList_22=ruleExpressionList    {
		$current.merge(this_ExpressionList_22);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getRightSquareBracketKeyword_0_4_1_1_2()); 
    }
)))
    |(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPredefinedTypeParserRuleCall_0_5_0()); 
    }
    this_PredefinedType_24=rulePredefinedType    {
		$current.merge(this_PredefinedType_24);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_0_5_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierParserRuleCall_0_5_2()); 
    }
    this_Identifier_26=ruleIdentifier    {
		$current.merge(this_Identifier_26);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getThisKeyword_0_6()); 
    }

    |(
	kw='typeof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getTypeofKeyword_0_7_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_7_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTypeOrVoidParserRuleCall_0_7_2()); 
    }
    this_TypeOrVoid_30=ruleTypeOrVoid    {
		$current.merge(this_TypeOrVoid_30);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_7_3()); 
    }
)
    |(
	kw='checked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getCheckedKeyword_0_8_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_8_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_8_2()); 
    }
    this_Expression_34=ruleExpression    {
		$current.merge(this_Expression_34);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_8_3()); 
    }
)
    |(
	kw='unchecked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getUncheckedKeyword_0_9_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_9_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_9_2()); 
    }
    this_Expression_38=ruleExpression    {
		$current.merge(this_Expression_38);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_9_3()); 
    }
))
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpression2ParserRuleCall_1()); 
    }
    this_PrimaryExpression2_40=rulePrimaryExpression2    {
		$current.merge(this_PrimaryExpression2_40);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePrimaryExpression2
entryRulePrimaryExpression2 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpression2Rule()); } 
	 iv_rulePrimaryExpression2=rulePrimaryExpression2 
	 { $current=$iv_rulePrimaryExpression2.current.getText(); }  
	 EOF 
;

// Rule PrimaryExpression2
rulePrimaryExpression2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpression2Access().getFullStopKeyword_0_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpression2Access().getIdentifierParserRuleCall_0_0_1()); 
    }
    this_Identifier_1=ruleIdentifier    {
		$current.merge(this_Identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpression2Access().getLeftParenthesisKeyword_0_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpression2Access().getArgumentListParserRuleCall_0_1_1()); 
    }
    this_ArgumentList_3=ruleArgumentList    {
		$current.merge(this_ArgumentList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpression2Access().getRightParenthesisKeyword_0_1_2()); 
    }
)
    |(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpression2Access().getLeftSquareBracketKeyword_0_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpression2Access().getExpressionListParserRuleCall_0_2_1()); 
    }
    this_ExpressionList_6=ruleExpressionList    {
		$current.merge(this_ExpressionList_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExpression2Access().getRightSquareBracketKeyword_0_2_2()); 
    }
)
    |    this_INCREMENT_DECREMENT_8=RULE_INCREMENT_DECREMENT    {
		$current.merge(this_INCREMENT_DECREMENT_8);
    }

    { 
    newLeafNode(this_INCREMENT_DECREMENT_8, grammarAccess.getPrimaryExpression2Access().getINCREMENT_DECREMENTTerminalRuleCall_0_3()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getPrimaryExpression2Access().getPrimaryExpression2ParserRuleCall_1()); 
    }
    this_PrimaryExpression2_9=rulePrimaryExpression2    {
		$current.merge(this_PrimaryExpression2_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    ;





// Entry rule entryRuleDoStatement
entryRuleDoStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoStatementRule()); } 
	 iv_ruleDoStatement=ruleDoStatement 
	 { $current=$iv_ruleDoStatement.current.getText(); }  
	 EOF 
;

// Rule DoStatement
ruleDoStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getDoStatementAccess().getEmbeddedStatementParserRuleCall_1()); 
    }
    this_EmbeddedStatement_1=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionParserRuleCall_4()); 
    }
    this_Expression_4=ruleExpression    {
		$current.merge(this_Expression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoStatementAccess().getSemicolonKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); } 
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current.getText(); }  
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression    {
		$current.merge(this_Expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhileStatementAccess().getEmbeddedStatementParserRuleCall_4()); 
    }
    this_EmbeddedStatement_4=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSelectionStatement
entryRuleSelectionStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionStatementRule()); } 
	 iv_ruleSelectionStatement=ruleSelectionStatement 
	 { $current=$iv_ruleSelectionStatement.current.getText(); }  
	 EOF 
;

// Rule SelectionStatement
ruleSelectionStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getIfStatementParserRuleCall_0()); 
    }
    this_IfStatement_0=ruleIfStatement    {
		$current.merge(this_IfStatement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getSwitchStatementParserRuleCall_1()); 
    }
    this_SwitchStatement_1=ruleSwitchStatement    {
		$current.merge(this_SwitchStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); } 
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current.getText(); }  
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression    {
		$current.merge(this_Expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getSwitchStatementAccess().getSwitchSectionParserRuleCall_5()); 
    }
    this_SwitchSection_5=ruleSwitchSection    {
		$current.merge(this_SwitchSection_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleSwitchSection
entryRuleSwitchSection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchSectionRule()); } 
	 iv_ruleSwitchSection=ruleSwitchSection 
	 { $current=$iv_ruleSwitchSection.current.getText(); }  
	 EOF 
;

// Rule SwitchSection
ruleSwitchSection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getSwitchSectionAccess().getSwitchLabelParserRuleCall_0()); 
    }
    this_SwitchLabel_0=ruleSwitchLabel    {
		$current.merge(this_SwitchLabel_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+(
    { 
        newCompositeNode(grammarAccess.getSwitchSectionAccess().getStatementParserRuleCall_1()); 
    }
    this_Statement_1=ruleStatement    {
		$current.merge(this_Statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
    ;





// Entry rule entryRuleSwitchLabel
entryRuleSwitchLabel returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchLabelRule()); } 
	 iv_ruleSwitchLabel=ruleSwitchLabel 
	 { $current=$iv_ruleSwitchLabel.current.getText(); }  
	 EOF 
;

// Rule SwitchLabel
ruleSwitchLabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchLabelAccess().getCaseKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSwitchLabelAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression    {
		$current.merge(this_Expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchLabelAccess().getColonKeyword_0_2()); 
    }
)
    |(
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchLabelAccess().getDefaultKeyword_1_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitchLabelAccess().getColonKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); } 
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current.getText(); }  
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression    {
		$current.merge(this_Expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getIfStatementAccess().getEmbeddedStatementParserRuleCall_4()); 
    }
    this_EmbeddedStatement_4=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIfStatementAccess().getElsePartParserRuleCall_5()); 
    }
    this_ElsePart_5=ruleElsePart    {
		$current.merge(this_ElsePart_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleElsePart
entryRuleElsePart returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElsePartRule()); } 
	 iv_ruleElsePart=ruleElsePart 
	 { $current=$iv_ruleElsePart.current.getText(); }  
	 EOF 
;

// Rule ElsePart
ruleElsePart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getElsePartAccess().getElseKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getElsePartAccess().getEmbeddedStatementParserRuleCall_1()); 
    }
    this_EmbeddedStatement_1=ruleEmbeddedStatement    {
		$current.merge(this_EmbeddedStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleBlock
entryRuleBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); } 
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current.getText(); }  
	 EOF 
;

// Rule Block
ruleBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getStatementParserRuleCall_1()); 
    }
    this_Statement_1=ruleStatement    {
		$current.merge(this_Statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleMaybeEmptyBlock
entryRuleMaybeEmptyBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaybeEmptyBlockRule()); } 
	 iv_ruleMaybeEmptyBlock=ruleMaybeEmptyBlock 
	 { $current=$iv_ruleMaybeEmptyBlock.current.getText(); }  
	 EOF 
;

// Rule MaybeEmptyBlock
ruleMaybeEmptyBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMaybeEmptyBlockAccess().getLeftCurlyBracketKeyword_0_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getMaybeEmptyBlockAccess().getStatementParserRuleCall_0_1()); 
    }
    this_Statement_1=ruleStatement    {
		$current.merge(this_Statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMaybeEmptyBlockAccess().getRightCurlyBracketKeyword_0_2()); 
    }
)
    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMaybeEmptyBlockAccess().getSemicolonKeyword_1()); 
    }
)
    ;





RULE_ASSIGNEMENT_OPERATOR : ('='|'+='|'-='|'*='|'/='|'%='|'&='|'^='|'<<='|'>>=');

RULE_EXPRESSION_EQUALITY_OPERATOR : ('=='|'!=');

RULE_LESS_THAN : '<';

RULE_GREATER_THAN : '>';

RULE_BAR : '|';

RULE_AMPERSAND : '&';

RULE_INCREMENT_DECREMENT : ('++'|'--');

RULE_OPERATOR_OR_SIGN : ('+'|'-');

RULE_REAL_TYPE_SUFFIX : ('F'|'f'|'D'|'d'|'M'|'m');

RULE_LETTER : ('A'..'Z'|'a'..'z');

RULE_IDENTIFIER_START_CHARACTER : (RULE_LETTER|'_');

RULE_QUOTE_ESCAPE_SEQUENCE : '""';

RULE_ESCAPE_SEQUENCE : ('\''|'"'|'\\'|'0'|'a'|'b'|'f'|'n'|'r'|'t'|'v');

RULE_NEW_LINE : ('\r'|'\n')* EOF;

RULE_RANK_SPECIFIER : '[' ','* ']';

RULE_INTEGER_TYPE_SUFFIX : ('U'|'u'|'L'|'l'|'UL'|'Ul'|'uL'|'ul'|'LU'|'Lu'|'lU'|'lu');

RULE_HEX_DIGIT : ('0'..'9'|('A'..'F'|'a'..'f'));

RULE_OPERATOR_OR_PUNCTUATOR : ('{'|'}'|'['|']'|'('|')'|'.'|','|':'|';'|'+'|'-'|'*'|'/'|'%'|'&'|'|'|'^'|'!'|'~'|'='|'<'|'>'|'?'|'++'|'--'|'&&'|'||'|'<<'|'>>'|'=='|'!='|'<='|'>='|'+='|'-='|'*='|'/='|'%='|'&='|'|='|'^='|'<<='|'>>='|'->');

RULE_SINGLE_CHARACTER : .?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_QUOTES : '{' ( options {greedy=false;} : . )*'}';


