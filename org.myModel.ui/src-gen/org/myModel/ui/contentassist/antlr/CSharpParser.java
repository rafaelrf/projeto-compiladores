/*
* generated by Xtext
*/
package org.myModel.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.myModel.services.CSharpGrammarAccess;

public class CSharpParser extends AbstractContentAssistParser {
	
	@Inject
	private CSharpGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.myModel.ui.contentassist.antlr.internal.InternalCSharpParser createParser() {
		org.myModel.ui.contentassist.antlr.internal.InternalCSharpParser result = new org.myModel.ui.contentassist.antlr.internal.InternalCSharpParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getCharDefinitionsAccess().getAlternatives_0(), "rule__CharDefinitions__Alternatives_0");
					put(grammarAccess.getIntDefinitionAccess().getAlternatives_0(), "rule__IntDefinition__Alternatives_0");
					put(grammarAccess.getCharDefinitionsAccess().getGroup(), "rule__CharDefinitions__Group__0");
					put(grammarAccess.getCharDefinitionsAccess().getGroup_0_0(), "rule__CharDefinitions__Group_0_0__0");
					put(grammarAccess.getCharDefinitionsAccess().getGroup_0_1(), "rule__CharDefinitions__Group_0_1__0");
					put(grammarAccess.getCharDefinitionsAccess().getGroup_1(), "rule__CharDefinitions__Group_1__0");
					put(grammarAccess.getIntDefinitionAccess().getGroup(), "rule__IntDefinition__Group__0");
					put(grammarAccess.getIntDefinitionAccess().getGroup_0_0(), "rule__IntDefinition__Group_0_0__0");
					put(grammarAccess.getIntDefinitionAccess().getGroup_0_1(), "rule__IntDefinition__Group_0_1__0");
					put(grammarAccess.getIntDefinitionAccess().getGroup_1(), "rule__IntDefinition__Group_1__0");
					put(grammarAccess.getModelAccess().getTypiesAssignment(), "rule__Model__TypiesAssignment");
					put(grammarAccess.getCharDefinitionsAccess().getNameAssignment_0_0_1(), "rule__CharDefinitions__NameAssignment_0_0_1");
					put(grammarAccess.getCharDefinitionsAccess().getNameAssignment_0_1_1(), "rule__CharDefinitions__NameAssignment_0_1_1");
					put(grammarAccess.getCharDefinitionsAccess().getValueAssignment_1_1(), "rule__CharDefinitions__ValueAssignment_1_1");
					put(grammarAccess.getIntDefinitionAccess().getNameAssignment_0_0_1(), "rule__IntDefinition__NameAssignment_0_0_1");
					put(grammarAccess.getIntDefinitionAccess().getNameAssignment_0_1_1(), "rule__IntDefinition__NameAssignment_0_1_1");
					put(grammarAccess.getIntDefinitionAccess().getValueAssignment_1_1(), "rule__IntDefinition__ValueAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.myModel.ui.contentassist.antlr.internal.InternalCSharpParser typedParser = (org.myModel.ui.contentassist.antlr.internal.InternalCSharpParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CSharpGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CSharpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
